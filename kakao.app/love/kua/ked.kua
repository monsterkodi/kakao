###
    ███   ███  ████████  ███████    
    ███  ███   ███       ███   ███  
    ███████    ███████   ███   ███  
    ███  ███   ███       ███   ███  
    ███   ███  ████████  ███████    
###

use kxk.kxk
use util.logfile
use util.session
use view.editor.fileeditor
use view.editor.status
use view.menu.menu
use view.menu.macro
use view.menu.context
use view.colmns.dircol
use view.colmns.funcol
use theme.theme

class KED

    @: ->

        @version = '0.1.0'
        
        @args = {
            new: true
            }
        
        @session = session @args
        @logfile = logfile()
        
        _G.ked_session = @session
        _G.screen = { cols:1 rows:1 cw:1 ch:1 }

        # @session.on 'loaded' @onSessionLoaded
        
        # @indexer  = indexer()
        # @git      = git()

        @menu     = menu()
        @macro    = macro()
        # @quicky   = quicky()
        # @browse   = browse()
        @editor   = fileeditor 'editor'
        # @droop    = droop     @screen @editor
        @dircol   = dircol @editor  ['scroll' 'knob']
        @funcol   = funcol @editor  ['scroll' 'knob']
        # @finder   = finder    @editor
        # @searcher = searcher  @editor
        # @differ   = differ    @editor
        @status   = status @editor
        @context  = context()
        # @input    = input()

        # @input.on 'action' @onInputAction
        
        log ◌d "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━" ◌g @session.name, ◌d "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"

        # log "THEME" noon(theme)

        # @editor.state.hasFocus = true
        # @editor.funtree = @funcol.funtree
        
        post∙on 'redraw'        @redraw        @
        post∙on 'window.focus'  @redraw        @
        post∙on 'window.blur'   @redraw        @
        post∙on 'input.popup'   @onInputPopup  @
        post∙on 'view.size'     @onViewSize    @
        post∙on 'quicky'        @onQuicky      @
        post∙on 'file.new'      @newFile       @
        post∙on 'file.reload'   @reloadFile    @
        post∙on 'file.open'     @openFile      @
        post∙on 'quit'          @quit          @
        post∙on 'file.change'   @onFileChange  @
        
        @contextHandlers = [                                                                               @editor         @dircol @funcol ]
        @mouseHandlers   = [ @input @context @finder @searcher @differ @quicky @browse @droop @menu @macro @editor @status @dircol @funcol ]
        @wheelHandlers   = [                 @finder @searcher @differ @quicky @browse @droop       @macro @editor         @dircol @funcol ]
        @keyHandlers     = [ @input @context @finder @searcher @differ @quicky @browse @droop @menu @macro @editor         @dircol @funcol ]
        
        # log 'ked args:' @args
        
        # ked_session.set 'ked▸args' @args
        # 
        if valid @args.options
            @loadFile @args.options[1]
        elif @args.fresh
            @hideEditor()
            @menu.show true
        elif @args.new
            @newFile()
        
            # @menu∙show true
            
    showEditor: -> 
    
        @editor∙show()
        @status∙show()
        # @dircol∙show()
        # @funcol∙show()

    hideEditor: -> 
    
        @editor∙hide()
        @status∙hide()
        # @dircol∙hide()
        # @funcol∙hide()
        
    # 00000000   000   000  000   000  
    # 000   000  000   000  0000  000  
    # 0000000    000   000  000 0 000  
    # 000   000  000   000  000  0000  
    # 000   000   0000000   000   000  
    
    @run: -> new KED()

    #  ███████  ████████   ███████   ███████  ███   ███████   ███   ███
    # ███       ███       ███       ███       ███  ███   ███  ████  ███
    # ███████   ███████   ███████   ███████   ███  ███   ███  ███ █ ███
    #      ███  ███            ███       ███  ███  ███   ███  ███  ████
    # ███████   ████████  ███████   ███████   ███   ███████   ███   ███

    onSessionLoaded: ->
    
        ⮐  if @args.fresh
        ⮐  if @args.new
        
        if empty(@currentFile) and empty(@loadingFile)
            file = ked_session.get "editor▸file"
            if file
                # log 'no current or loading file ... loading last session file'
                @loadFile file
            else
                @hideEditor()
                @menu.show true
                
    #  ███████   ████████   ████████    ███████   ███   ███   ███████   ████████
    # ███   ███  ███   ███  ███   ███  ███   ███  ████  ███  ███        ███     
    # █████████  ███████    ███████    █████████  ███ █ ███  ███  ████  ███████ 
    # ███   ███  ███   ███  ███   ███  ███   ███  ███  ████  ███   ███  ███     
    # ███   ███  ███   ███  ███   ███  ███   ███  ███   ███   ███████   ████████

    arrange: si ->
        
        dcw = 0
        fcw = 0

        @dircol∙layout 1             1     dcw               si.rows  
        @status∙layout dcw           1     si.cols-dcw       1        
        @funcol∙layout si.cols-fcw   2     fcw               si.rows-1
        @editor∙layout dcw           2     si.cols-dcw-fcw   si.rows-1
        
    #  ███████   ███   ███  ███  █████████
    # ███   ███  ███   ███  ███     ███   
    # ███ ██ ██  ███   ███  ███     ███   
    # ███ ████   ███   ███  ███     ███   
    #  █████ ██   ███████   ███     ███   

    quit: msg ->
        
        @quitting = true
        
        # @session.save()
        
        log ◌d "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━ " ◌g @session.name, ◌d " ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
        
        if msg != nil
           if msg.stack
               error msg.stack 
           error msg

        @logfile∙close()
        @
            
    # 000   000  00000000  000   000  
    # 0000  000  000       000 0 000  
    # 000 0 000  0000000   000000000  
    # 000  0000  000       000   000  
    # 000   000  00000000  00     00  
    
    newFile: ->
        
        @currentFile = nil

        @status∙setFile ''
    
        @editor.state.syntax.ext = 'txt'
        # @editor.state∙loadLines ['hello world! line 1' 'hello world! line 2' 'hello world! line 3']
        @editor.state∙loadSegls kseg.segls("hello world! line 1\nhello world! line 2\nhello world! line 3")

        if @editor.mapscr
            @editor.mapscr∙reload()
        
        post∙emit 'file.loaded' nil

        @showEditor()
        
        @editor∙grabFocus()
        
        @redraw()
            
    # ████████  ███  ███      ████████   ███████  ███   ███   ███████   ███   ███   ███████   ████████
    # ███       ███  ███      ███       ███       ███   ███  ███   ███  ████  ███  ███        ███     
    # ██████    ███  ███      ███████   ███       █████████  █████████  ███ █ ███  ███  ████  ███████ 
    # ███       ███  ███      ███       ███       ███   ███  ███   ███  ███  ████  ███   ███  ███     
    # ███       ███  ███████  ████████   ███████  ███   ███  ███   ███  ███   ███   ███████   ████████

    onFileChange: event ->
    
        if event.path == @currentFile
            switch event.change
                'delete' ➜ @newFile() # todo: load current text into new file
                'change'
                'rename' ➜ @reloadFile()
        
    # ████████   ████████  ███       ███████    ███████   ███████  
    # ███   ███  ███       ███      ███   ███  ███   ███  ███   ███
    # ███████    ███████   ███      ███   ███  █████████  ███   ███
    # ███   ███  ███       ███      ███   ███  ███   ███  ███   ███
    # ███   ███  ████████  ███████   ███████   ███   ███  ███████  

    reloadFile: -> 
        
        if valid @currentFile
            @loadFile @currentFile
        else
            @newFile()
            
    #  0000000   00000000   00000000  000   000  
    # 000   000  000   000  000       0000  000  
    # 000   000  00000000   0000000   000 0 000  
    # 000   000  000        000       000  0000  
    #  0000000   000        00000000  000   000  
    
    openFile: path row col view ->
        
        @loadFile path row col view
        @editor∙grabFocus()
        
    #  0000000   000   000  000   0000000  000   000  000   000  
    # 000   000  000   000  000  000       000  000    000 000   
    # 000 00 00  000   000  000  000       0000000      00000    
    # 000 0000   000   000  000  000       000  000      000     
    #  00000 00   0000000   000   0000000  000   000     000     
    
    onQuicky: path ->
        
        ⮐  if valid @loadingFile
        
        if slash.isAbsolute path
            file = path
        else
            file = slash.absolute path slash.dir(@currentFile)
        
        ⮐  if slash.samePath(file @currentFile)
        
        @loadFile file
                                
    # ███       ███████    ███████   ███████          ████████  ███  ███      ████████
    # ███      ███   ███  ███   ███  ███   ███        ███       ███  ███      ███     
    # ███      ███   ███  █████████  ███   ███        ██████    ███  ███      ███████ 
    # ███      ███   ███  ███   ███  ███   ███        ███       ███  ███      ███     
    # ███████   ███████   ███   ███  ███████          ███       ███  ███████  ████████

    loadFile: p row col view ->
    
        log "ked.loadFile #{p} #{row} #{col} #{noon view}"
        
        absFile = p
        if slash.isAbsolute p
            absFile = slash.absolute p
        else
            absFile = slash.path process.cwd() p
        
        ⮐  if slash.samePath absFile @loadingFile
        
        @loadingFile = absFile
        
        exists = slash.fileExists @loadingFile
        
        if not exists
            warn "ked.loadFile - file doesn't exist! #{@loadingFile}"
            @loadingFile = nil
            ⮐ 
        
        @loadingFile = slash.resolveSymlink @loadingFile
        
        if empty @loadingFile
            error "ked.loadFile - #{absFile} resolved to empty!"
            ⮐  
        
        ▴ 'loadingFile' @loadingFile
        
        readingFile = @loadingFile
        
        text = slash.readText @loadingFile
        
        if @loadingFile != readingFile
            # warn 'another file started loading, skip editor update'
            ⮐  
        
        @currentFile = @loadingFile
        
        ▴ 'currentFile' @currentFile
        
        @loadingFile = nil
        
        @status∙setFile slash.tilde(@currentFile)
                
        if text == undefined
            text = '○ binary ○'
        
        (colors segls) = belt.colorSeglsForText text
        
        if valid colors
            @editor.state.syntax∙setColors colors
        else
            @editor.state.syntax∙setExt slash.ext(@currentFile)
        
        @editor.state∙loadSegls segls
        @editor∙setCurrentFile @currentFile     
        ked_session∙set "editor▸file" @currentFile
        
        mode.fileLoaded @editor.state @currentFile row col view
        
        post∙emit "file.loaded" @currentFile
        
        @showEditor()
        @redraw()
        
        @indexer∙index @currentFile
        prjcts.index   @currentFile
        git.diff       @currentFile
        watcher.watch  @currentFile
                
        # @t.setTitle slash.file(@status.file)
        
        @saveSessionFile @currentFile 'loaded'        
        
        gitDir = git.dir @currentFile
        if gitDir
            watcher.watch slash.path(gitDir '.git/refs/heads') {recursive: false}
            
        @
                    
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ->
        
        text = kseg.str @editor.state.s.lines
        
        if valid @currentFile
            slash.write @currentFile text
            @editor.state∙clearHistory() # lazy way to 'undirty' :> no undo after save :(
            @redraw()
            @saveSessionFile @currentFile 'saved'
            
    saveSessionFile: file typ ->
        
        frecent∙fileAction file typ
                
        @session∙set 'files▸recent' frecent∙store('file')
            
    saveAs: -> log 'todo: saveAs'
    
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    onPaste: text -> 
    
        @editor.state∙insert text
        @redraw()
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event ->

        if event.type == 'wheel'

            for handler in @wheelHandlers
                if handler∙onWheel event
                    ⮐ 
            ⮐ 

        # log "mouse" event.type, event.x, event.y
        for handler in @mouseHandlers
            if handler∙onMouse event
                # log "handled" handler.name
                event.handled = true
                break if event.type != 'move' or handler.isPopup

        if event.button == 'right' and event.type == 'press' and event.count == 1
            
            for handler in @contextHandlers
                if handler.hover
                    if handler∙onContext event
                        break
        
    showFinderOrSearcher: ->
    
        if @finder∙visible() and valid @finder.input∙current()
            @searcher∙show @finder.input∙current()
        else
            @finder∙show()
        @
            
    showFileposHistory: ->
    
        if filepos.fileposl.len > 1

            files = filepos.fileposl∙map((fp) -> fp[0])
            files = files∙reverse()
            files.shift() if filepos.offset == 0
            scx = int @screen.cols/2
            scy = int @screen.rows/2
            post∙emit 'droop.show' {files:files pos:[scx scy-6]}
        @
                
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event ->
    
        # log 'ked.onKey' event
            
        switch key
            
            'alt+1'                      ➜ ⮐  post∙emit 'filepos.goBackward'  
            'alt+2'                      ➜ ⮐  post∙emit 'filepos.goForward'   
            'cmd+1'                      ➜ ⮐  post∙emit 'filepos.swapPrevious'
            'alt+h'                      ➜ ⮐  @showFileposHistory()
            'alt+q' 'ctrl+q' 'cmd+esc'   ➜ ⮐  @quit()
            'ctrl+r' 'cmd+r'             ➜ ⮐  @reloadFile()
            'ctrl+s' 'cmd+s'             ➜ ⮐  @saveFile()
            'shift+cmd+s' 'shift+ctrl+s' ➜ ⮐  @saveAs()
            'cmd+n' 'ctrl+n'             ➜ ⮐  @newFile()
            'alt+m'                      ➜ ⮐  @menu∙show()
            'cmd+p' 'ctrl+p'             ➜ ⮐  @quicky∙showProjectFiles @currentFile
            'cmd+f' 'ctrl+f'             ➜ ⮐  @showFinderOrSearcher()
            'shift+cmd+f' 'shift+ctrl+f' ➜ ⮐  @searcher∙show()
            'alt+o'                      ➜ ⮐  @editor∙jumpToCounterpart()
            'alt+,'                      ➜ ⮐  @editor∙singleCursorAtLine @funcol.funtree∙lineIndexOfPrevFunc()
            'alt+.'                      ➜ ⮐  @editor∙singleCursorAtLine @funcol.funtree∙lineIndexOfNextFunc()
            'cmd+o' 'ctrl+o'
            'cmd+m' 'cmd+;' 'ctrl+;'     ➜ ⮐  @macro∙show()
            'cmd+.' 'ctrl+.'             ➜ ⮐  @browse∙gotoDir slash.dir(@currentFile)
            'cmd+i'                      ➜ ⮐  post∙emit 'differ.status'
            'alt+r'                      ➜ ⮐  post∙emit 'dircol.reveal' @currentFile
            "cmd+\\" "ctrl+\\"           ➜ ⮐  post∙emit 'dircol.toggle'
            "cmd+'" "ctrl+'"             ➜ ⮐  post∙emit 'funcol.toggle'
        
        result = nil    
        for handler in @keyHandlers∙each()
            # ●▸ on key
            if not handler∙hidden()
                # log "handler" handler.name
                result = handler∙onKey key event
                # log "result" result
                if result
                    break 
            # ●▪ on key
        # @redraw() if result.redraw != false
        @        
        
    #  0000000  000  0000000  00000000  
    # 000       000     000   000       
    # 0000000   000    000    0000000   
    #      000  000   000     000       
    # 0000000   000  0000000  00000000  
    
    onViewSize: name side delta ->
        
        @viewSizeDelta = {name:name side:side delta:delta}
        @redraw()
        
    onResize: cols rows size cellsz -> 
    
        mcw = int cols/6
        
        rounded.cache = {}
        
        if mcw >= 16
            @dircol.cells.cols = mcw
            @funcol.cells.cols = mcw
            @dircol.show()
            @funcol.show()
        else
            @dircol.hide()
            @funcol.hide()
        
        squares.onResize cols rows size cellsz
        sircels.onResize cols rows size cellsz
        @redraw()
        @editor.mapscr.onResize()
        
    # ███  ███   ███  ████████   ███   ███  █████████       ████████    ███████   ████████   ███   ███  ████████ 
    # ███  ████  ███  ███   ███  ███   ███     ███          ███   ███  ███   ███  ███   ███  ███   ███  ███   ███
    # ███  ███ █ ███  ████████   ███   ███     ███          ████████   ███   ███  ████████   ███   ███  ████████ 
    # ███  ███  ████  ███        ███   ███     ███          ███        ███   ███  ███        ███   ███  ███      
    # ███  ███   ███  ███         ███████      ███          ███         ███████   ███         ███████   ███      

    onInputPopup: opt ->
    
        @input.set opt.text
        @input.state.moveCursors 'eol'
        @input.layout opt.x opt.y opt.w 1
        @input.grabFocus()
        @input.orig = opt.text
        @input.cb = opt.cb
        @redraw()
        
    onInputAction: action event ->
    
        # log "ked.onInputAction #{action} #{event}"
        switch action
            'submit'
                if @input.cb is func
                    @input.cb @input.current()
                @input.hide()
            'cancel'
                if @input.cb is func
                    @input.cb @input.orig
                @input.hide()
    
    # ███████    ████████    ███████   ███   ███
    # ███   ███  ███   ███  ███   ███  ███ █ ███
    # ███   ███  ███████    █████████  █████████
    # ███   ███  ███   ███  ███   ███  ███   ███
    # ███████    ███   ███  ███   ███  ██     ██

    redraw: ->    
        
        ⮐  if @quitting

    draw: cols rows cw ch ->
            
        ⮐  if @quitting
        
        # @status.gutter = @editor.state.gutterWidth()
        
        _G.screen = { cols:cols rows:rows cw:cw ch:ch }
        
        @arrange screen
        
        if @menu.greet∙hidden()
             @editor∙draw() #if not @differ∙visible()
             @status∙draw()
             @dircol∙draw()
             @funcol∙draw()

        # for y in 1..rows
        #     for x in 1..cols
        #         @screen∙set x y string.sub($x 1 1) [50 0 0] 
            
        @menu∙draw()
        @macro∙draw()
        # @quicky∙draw()
        # @browse∙draw()
        # @droop∙draw()
        # @finder∙draw()
        # @searcher∙draw()
        # @differ∙draw()
        @context∙draw()
        # @input∙draw()
            
⮐  KED
