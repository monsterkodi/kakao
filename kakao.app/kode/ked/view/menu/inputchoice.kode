###
    ███  ███   ███  ████████   ███   ███  █████████   ███████  ███   ███   ███████   ███   ███████  ████████  
    ███  ████  ███  ███   ███  ███   ███     ███     ███       ███   ███  ███   ███  ███  ███       ███       
    ███  ███ █ ███  ████████   ███   ███     ███     ███       █████████  ███   ███  ███  ███       ███████   
    ███  ███  ████  ███        ███   ███     ███     ███       ███   ███  ███   ███  ███  ███       ███       
    ███  ███   ███  ███         ███████      ███      ███████  ███   ███   ███████   ███   ███████  ████████  

    a combination of input and choices
    the input is usually hidden and only shown when user types text to filter the choices
###

use ../../../kxk ▪ post
use ../../theme  ◆ color theme
use ../../util   ◆ rounded
use ../base      ◆ view input
use ../menu      ◆ choices

function inputchoice extends view

    @: @screen @name features ->

        super @screen @name features
        
        @autoHideInput = true
        @isVisible = false
        @isPopup   = true
        
        @input   = new input   @screen "#{@name}_input"
        @choices = new choices @screen "#{@name}_choices" features
        
        @setColor 'bg'    theme.quicky.bg
        @setColor 'frame' theme.quicky.frame

        @choices.mapscr?.hide()       
        
        @input.hide()
        @choices.show()

        @input.on   'action'  @onInputAction
        @choices.on 'action'  @onChoicesAction
        
    setColor: key clr ->
    
        super key clr
        
        if key == 'bg'
        
            # @input.setColor     'bg'    color.brighten(@color.bg)
            # @input.setColor     'empty' @color.bg #color.brighten(@color.bg)
            @choices.setColor   'bg'    @color.bg
        
    inputIsActive: -> @input.hasFocus() or @input.current().length
        
    #  ███████   ████████   ████████    ███████   ███   ███   ███████   ████████
    # ███   ███  ███   ███  ███   ███  ███   ███  ████  ███  ███        ███     
    # █████████  ███████    ███████    █████████  ███ █ ███  ███  ████  ███████ 
    # ███   ███  ███   ███  ███   ███  ███   ███  ███  ████  ███   ███  ███     
    # ███   ███  ███   ███  ███   ███  ███   ███  ███   ███   ███████   ████████

    arrange: =>

        x = int @screen.cols/4
        y = int @screen.rows/4
        w = int @screen.cols/2
        h = int @screen.rows/2-4

        cs = min h @choices.numFiltered()
        
        @input.layout    x+2   y+1  w-4  1
        @choices.layout  x+2   y+3  w-3  cs
        @cells.layout    x     y    w    cs+4
        
    #  0000000  000   000   0000000   000   000
    # 000       000   000  000   000  000 0 000
    # 0000000   000000000  000   000  000000000
    #      000  000   000  000   000  000   000
    # 0000000   000   000   0000000   00     00

    show: =>

        super()
        if @choices.numFiltered()
            @choices.grabFocus()
        else if @input.visible()
            @input.grabFocus()
        redraw:true

    hide: => 
        
        @choices.mapscr?.hide()     
        super()
                            
    # 000  000   000  00000000   000   000  000000000  
    # 000  0000  000  000   000  000   000     000     
    # 000  000 0 000  00000000   000   000     000     
    # 000  000  0000  000        000   000     000     
    # 000  000   000  000         0000000      000     
    
    onInputChange: text =>
        
        ⮐  if text == @choices.filterText

        @choices.filter text
        @choices.state.selectLine 0
        # @choices.state.setMainCursor @choices.state.s.lines[0].length 0
        @choices.state.setMainCursor 0 0
        @choicesFiltered()
        @arrange()
        
    onInputAction: action text =>
        
        # log 'input.choice.onInputAction' action text
        
        switch action
            'right'
            'submit' ➜ ⮐  @applyChoice @choices.current()
            'change' ➜ ⮐  @onInputChange text
            'up'          
            'down'   ➜ ⮐  @choices.moveSelection action
    
        # log "inputchoice.onInputAction #{action} #{text} (unhandled?)"
        
    autoHide: => @input.hide() if @autoHideInput and not @inputIsActive()
        
    #  0000000  000   000   0000000   000   0000000  00000000   0000000  
    # 000       000   000  000   000  000  000       000       000       
    # 000       000000000  000   000  000  000       0000000   0000000   
    # 000       000   000  000   000  000  000       000            000  
    #  0000000  000   000   0000000   000   0000000  00000000  0000000   
    
    onChoicesAction: action choice =>
    
        switch action
            'click'
            'right'
            'space'
            'return' ➜ ⮐  @applyChoice @choices.current()
            
            'hover'  ➜ @autoHide()
                                             
    choicesFiltered: ->
        
    currentChoice: ->
    
        choice = @choices.current() ? @input.current()
        choice = trim choice if choice is str
            
    # 0000000    00000000    0000000   000   000
    # 000   000  000   000  000   000  000 0 000
    # 000   000  0000000    000000000  000000000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000  00     00

    draw: ->

        ⮐  if @hidden()
        
        @arrange()
        @drawFrame()
        @drawChoices()

    drawChoices: ->
        
        @input.draw()
        @choices.draw()    
        
    drawFrame: ->

        sy = 0
        
        if @input.visible()
        
            outer = color.brighten @color.bg
            # inner = @input.hasFocus() ? @color.bg : outer
            inner = @input.hasFocus() ? @input.color.empty : outer
            
            @cells.draw_rounded_border 0 0 -1 2 fg:outer
            
            # add left and right half-width padding to input
            @cells.draw_vertical_padding 1 1 outer inner
            @cells.draw_vertical_padding @cells.cols-2 1 inner outer
            
            sy = 2
        
        @cells.draw_rounded_border 0 sy -1 -1 fg:@color.bg zLayer: 1001
        
    moveFocus: ->
        
        if @choices.hasFocus()
            @input.grabFocus()
            @input.selectAll()
        else
            @choices.grabFocus()
            @autoHide()

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    onKey: key event =>

        ⮐  if @hidden()

        switch event.combo
            
            'tab' 
            
                ⮐  @moveFocus()
            
            'esc'     

                post.emit 'focus' 'editor'
                ⮐  @hide()

        if result = @choices.onKey key event

            if event.char and event.char not in ' \n'
                @input.grabFocus()
            else
                @autoHide()
                ⮐  result
             
        if result = @input.onKey key event
            
            # @choices.grabFocus() if empty @input.current()
            @autoHide()
            
            ⮐  result

        true
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>

        ⮐  if @hidden()
        
        ret = @input.onMouse   event ; ⮐  ret if ret?.redraw
        ret = @choices.onMouse event ; ⮐  ret if ret?.redraw
        ret = super event            ; ⮐  ret if ret?.redraw
        
        if event.type == 'press' and not @hover
            post.emit 'focus' 'editor'
            ⮐  @hide()
            
        @hover

    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: event =>

        ⮐  if @hidden()

        ret = @input.onWheel   event ; ⮐  ret if ret?.redraw
        ret = @choices.onWheel event ; ⮐  ret if ret?.redraw
        
        inside = @cells.isInsideEvent event
        if inside ➜ ⮐  redraw:false 
        
export inputchoice
