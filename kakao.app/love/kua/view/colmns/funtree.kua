#    ████████  ███   ███  ███   ███  █████████  ████████   ████████  ████████  
#    ███       ███   ███  ████  ███     ███     ███   ███  ███       ███       
#    ██████    ███   ███  ███ █ ███     ███     ███████    ███████   ███████   
#    ███       ███   ███  ███  ████     ███     ███   ███  ███       ███       
#    ███        ███████   ███   ███     ███     ███   ███  ████████  ████████  

# use ../../../kxk    ▪ post slash
# use ../../../kxk    ◆ nfs
# use ../../theme     ◆ color theme icons
# use ../../edit/tool ◆ belt
# use ../menu         ◆ choices 

###
     ███████  ███   ███  ███   ███  █████████   ███████   ███   ███
    ███        ███ ███   ████  ███     ███     ███   ███   ███ ███ 
    ███████     █████    ███ █ ███     ███     █████████    █████  
         ███     ███     ███  ████     ███     ███   ███   ███ ███ 
    ███████      ███     ███   ███     ███     ███   ███  ███   ███
###

SYMBOL = {
    clss:          '■'  # '■' 
    unbound:       '->' # '▸'
    bound:         '->' # '▸'
    async_unbound: '○→' # '○'
    async_bound:   '●→' # '●' 
    }
        
class funSyntax

    @: tree ->
    
        @tree = tree
    
        @color = {
            class:          theme.funtree.class
            async:          theme.funtree.async
            bound:          theme.funtree.bound
            bound_async:    theme.funtree.bound_async
            func:           theme.funtree.func
            func_async:     theme.funtree.func_async
            test0:          theme.funtree.test0
            test1:          theme.funtree.test1
            test2:          theme.funtree.test2
            test3:          theme.funtree.test3
            }
        
    clear: ->

    setLines: lines -> log 'setLines'
    setSegls: segls ->
        
    #  ███████   ███████   ███       ███████   ████████ 
    # ███       ███   ███  ███      ███   ███  ███   ███
    # ███       ███   ███  ███      ███   ███  ███████  
    # ███       ███   ███  ███      ███   ███  ███   ███
    #  ███████   ███████   ███████   ███████   ███   ███

    getClass: x y -> ''
    getColor: x y ->
        
        item = @tree.items[y]
        name = item.name
        char = name[x]
        if char == ' ' ➜ ⮐  [0 0 0]

        if 
            item.clss       ➜ clr = @color.class
            item.test       ➜ clr = @color['test' + int(belt.numIndent(item.name)/2)] 
            item.async      ➜ clr = item.bound and @color.bound_async or @color.func_async
            item.bound      ➜ clr = @color.bound
                            ➜ clr = @color.func
        if 
            item.static     ➜ clr = color.brighten clr 0.2
            char == '@' and empty name[x+1]
                              clr = @color.class
        if 
            char == '▸'            ➜ clr = color.darken clr 0.5
            char == '@'            ➜ clr = color.darken clr (clr == @color.class and 0.75 or 0.5)
            char == SYMBOL.clss    ➜ clr = color.darken clr 0.2
            # char in SYMBOL.bound   and item.bound ➜ clr = color.darken clr 0.5
            # char in SYMBOL.unbound                ➜ clr = color.darken clr 0.7
        clr
        
    getChar: x y char -> char

###    
    ████████  ███   ███  ███   ███  █████████  ████████   ████████  ████████
    ███       ███   ███  ████  ███     ███     ███   ███  ███       ███     
    ██████    ███   ███  ███ █ ███     ███     ███████    ███████   ███████ 
    ███       ███   ███  ███  ████     ███     ███   ███  ███       ███     
    ███        ███████   ███   ███     ███     ███   ███  ████████  ████████
###

class funtree extends choices

    @: editor name features ->
    
        @editor = editor
        
        choices.init @ name features
        
        @state.syntax = funSyntax @
        
        @editor.state∙on 'cursorsSet' @onCursorsSet @
        
        post∙on 'file.loaded'  @clear          @
        post∙on 'file.indexed' @onFileIndexed  @
        
    onCursorsSet: ->
    
        @selectItemForLineIndex @editor.state∙mainCursor()[1]
        
    selectItemForLineIndex: li ->
    
        for idx item in ipairs @items
            if item.line-1 <= li and (idx >= @items.len-1 or @items[idx+1].line-1 > li)
                @state∙setSelections [belt.rangeOfLine(@state.s.lines idx)]
                @state∙setMainCursor 0 idx
                ⮐  
                
    nameOfCurrentFunc:      -> @current().name
    lineIndexOfCurrentFunc: -> @current().line-1
    lineIndexOfNextFunc:    -> @items[@currentIndex()+1].line-1 
    lineIndexOfPrevFunc:    -> @items[@currentIndex()-1].line-1
    
    # ███      ███  ███   ███  ████████        ████████   ███████   ████████         ████████  ███   ███  ███   ███   ███████
    # ███      ███  ████  ███  ███             ███       ███   ███  ███   ███        ███       ███   ███  ████  ███  ███     
    # ███      ███  ███ █ ███  ███████         ██████    ███   ███  ███████          ██████    ███   ███  ███ █ ███  ███     
    # ███      ███  ███  ████  ███             ███       ███   ███  ███   ███        ███       ███   ███  ███  ████  ███     
    # ███████  ███  ███   ███  ████████        ███        ███████   ███   ███        ███        ███████   ███   ███   ███████
    
    lineIndexForFunc: func -> 
    
        for _ item in ipairs @items
            if item.name == func.name and item.class == func.class
                ⮐  item.line-1 
                
        funcname = "   -> #{func.class}"
        if func.name == funcname and func.line
            ⮐  @lineIndexForFunc {class:func.class name:'   -> @'}
            
        if func.name == "   -> @" and func.line
            ⮐  @lineIndexForFunc {class:func.class name:funcname}
                
        # log "can't find func: items:" @items
        log "can't find func:" func
        
    #  ███████   ███   ███        ███  ███   ███  ███████    ████████  ███   ███
    # ███   ███  ████  ███        ███  ████  ███  ███   ███  ███        ███ ███ 
    # ███   ███  ███ █ ███        ███  ███ █ ███  ███   ███  ███████     █████  
    # ███   ███  ███  ████        ███  ███  ████  ███   ███  ███        ███ ███ 
    #  ███████   ███   ███        ███  ███   ███  ███████    ████████  ███   ███

    onFileIndexed: path info ->
    
        ⮐  if path != @editor.currentFile
        ⮐  if empty info.classes and empty info.funcs
    
        clssl = clone info.classes
        funcs = clone info.funcs
        
        for _ clss in ipairs clssl
            clss.file ?= path
            clss.name = ' ' & SYMBOL.clss & ' ' + clss.name
            
        for _ func in ipairs funcs
            if func.test
                func.name = ' ' & belt.reindent(4 2 func.name)
            else
                if func.async
                    if func.bound
                        symbol = SYMBOL.async_bound
                    else
                        symbol = SYMBOL.async_unbound
                else
                    if func.bound
                        symbol = SYMBOL.bound
                    else
                        symbol = SYMBOL.unbound
                        
                name = func.name
                if func.static
                    name = '@' + name 
                indt = if func.class ➜ '   ' ➜ ' '
                func.name = indt & symbol & ' ' & name
        
        items = clssl + funcs
        items∙sort((a b) -> a.line - b.line)
        
        @set items 'name'
        post∙emit 'funtree.loaded'
        @onCursorsSet()
        post∙emit 'redraw'
        
    #  0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000          000     000  000   000  0000  000  
    # 000000000  000          000     000  000   000  000 0 000  
    # 000   000  000          000     000  000   000  000  0000  
    # 000   000   0000000     000     000   0000000   000   000  
    
    emitAction: action choice event  ->
    
        if empty choice
            error 'funtree.emitAction -- empty choice ▸ action:' action 
            error 'funtree.emitAction -- empty choice ▸ event:' event
            ⮐  
        
        switch action
        
            'right'
            
                post∙emit 'goto.line' choice.line-1 'ind' 'topDelta'
                ⮐  
                
            'click'
            'return'
            
                post∙emit 'goto.line' choice.line-1 'ind' 'topDelta'
                post∙emit 'focus' 'editor'
                ⮐  
                
            'drag'
            
                post∙emit 'goto.line' choice.line-1 'ind' 'topDelta'
                ⮐  
                 
        choices.emitAction @ action choice event
        
⮐  funtree
