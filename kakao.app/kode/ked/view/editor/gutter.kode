###
     ███████   ███   ███  █████████  █████████  ████████  ████████   
    ███        ███   ███     ███        ███     ███       ███   ███  
    ███  ████  ███   ███     ███        ███     ███████   ███████    
    ███   ███  ███   ███     ███        ███     ███       ███   ███  
     ███████    ███████      ███        ███     ████████  ███   ███  

    displays line numbers to the left of an editor
    used in fileeditor and searcher/finder 
    searcher/finder replaces lineno to display source line numbers 
###

use ../../util  ◆ prof 
use ../../theme ◆ color theme 
use ../base     ◆ view

function gutter extends view

    @: screen @state ->
        
        super screen @state.owner() + '.gutter'
        
        @setColor 'fg'                     theme.gutter.fg
        @setColor 'bg'                     theme.gutter.bg
        @setColor 'bg_selected'            theme.gutter.bg_selected
        @setColor 'bg_fully_selected'      theme.gutter.bg_fully_selected
        @setColor 'cursor_main'            theme.cursor.main
        @setColor 'cursor_multi'           theme.cursor.multi
        @setColor 'selection'              theme.selection.span
        @setColor 'selection_line'         theme.selection.line
        @setColor 'highlight'              theme.highlight.bg
        
    lineno: y ->
                
        lineno = lpad @cells.cols-1 y+1
        lineno += ' '
        lineno
        
    fgcolor: x y ->
        
    draw: ->
        
        mainCursor = @state.mainCursor()
        
        for row in 0...@cells.rows
                        
            y = @state.s.view[1] + row
            
            lineno = @lineno y
            
            hasCursor   = @state.isAnyCursorInLine y
            selected    = @state.isSelectedLine y
            highlighted = @state.isHighlightedLine y
            spansel     = @state.isSpanSelectedLine y
            
            for c,i in lineno
                
                col = i
                if col < @cells.rows
                    
                    if sc = @fgcolor i y c
                        fg = sc
                    else
                        fg = if
                            y == mainCursor[1] ➜ color.darken(@color.cursor_main @state.hasFocus?1:0.5)
                            hasCursor          ➜ @color.cursor_multi
                            spansel            ➜ @color.selection
                            selected           ➜ @color.selection_line
                            highlighted        ➜ @color.highlight
                                               ➜ @color.fg
                                               
                        fg = color.darken fg if (selected or hasCursor or highlighted) and not @cells.screen.t.hasFocus
                    
                    bg = if 
                        spansel    ➜ @color.bg_selected
                        selected   ➜ @color.bg_fully_selected
                                   ➜ @color.bg
                                 
                    bg = color.darken bg if selected and not @cells.screen.t.hasFocus
                    
                    @cells.set col row (y<@state.s.lines.length) ? c : ' ' fg bg

export gutter
