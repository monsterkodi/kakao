###
000   000   0000000  00000000   0000000 
000  000   000       000       000      
0000000    0000000   0000000   000  0000
000  000        000  000       000   000
000   000  0000000   00000000   0000000 
###

use ◆ kstr

segmenter = new Intl.Segmenter "en-US" granularity:'grapheme'

kseg = s ->
    
    ⮐ [] if empty s
    ⮐ s if not s is str
    
    Array.from(segmenter.segment(s)).map (r) -> r.segment
    
kseg.lines = s ->
    
    lines = kstr.lines s
    
    segls = lines.map (l) -> kseg(l)
    
    lines: lines
    segls: segls
    
kseg.segls = s -> kseg.lines(s).segls
    
kseg.str = a ->

    ⮐ '' if empty a
    ⮐ a if not a is arr
    if a[0] is str
        a.join ''
    else
        a.map(kseg.str).join('\n')

kseg.join = args... ->
        
    r = []
    for a in args
        r = r.concat kseg(a)
    r
    
kseg.detab = a tw=4 ->
    
    ⮐ a if not a is arr
    
    i = 0
    while i < a.length
        if a[i] == '\t'
            n = tw-(i%tw)
            args = [i 1].concat(rpad(n).split(''))
            a.splice.apply a args
            i += n
        else
            i += 1
    a
    
kseg.chunks = a ->
    
    chunks = []
    spaces = true
    for g,i in a
        if spaces
            if g not in ' \t\r\n'
                chunk = index:i segl:[g]
                spaces = false
        else
            if g in ' \t\r\n'
                spaces = true
                chunks.push chunk
            else
                chunk.segl.push g
    if not spaces
        chunks.push chunk
    chunks
    
kseg.startsWith = a prefix ->
    
    ⮐ false if a.length < prefix.length
    ⮐ false if empty a or empty prefix
    ⮐ false if not a is arr
    
    segs = kseg prefix
    a[0...segs.length] eql segs
    
kseg.numIndent = a ->
        
    i = 0
    for s in a
        ⮐ i if s != ' '
        i += 1
    i
        
kseg.splitAtIndent = a ->
        
    i = kseg.numIndent a
    [a[0...i] a[i..]]
    
kseg.repeat = n s=' ' ->
    
    ⮐ [] if n <= 0
    
    s = kseg s
    a = []
    for i in 0...n
        a = a.concat s
    a

# segworder = new Intl.Segmenter "en-US" granularity:'word'
# log Array.from(segworder.segment("""
    # hello_world.     how's it going?
    # dash-ed    ./slash/ed/   #hashed
    # """))
    
export kseg
