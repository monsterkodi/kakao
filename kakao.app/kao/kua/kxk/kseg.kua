
use kxk.array

class kseg extends array 

    @: s ->
        
        if s 
            switch type(s)
                "string" 
                    if s.len > 0
                        for i seg in @codes s
                            @push seg
                "table"
                    if s.len > 0
                        for g in s∙each()
                            @push g
                    else if s∙len()
                        for g in s∙each()
                            @push g
                ➜ 
                    log ">>?????" type(s)

    decode: str startPos=1 ->
    
        b1 = str∙byte( startPos, startPos )
    
        if b1 < 0x80
            ⮐  (startPos, startPos)
    
        if b1 > 0xF4 or b1 < 0xC2
            ⮐  nil
    
        bytes = b1 >= 0xF0 and 3 or b1 >= 0xE0 and 2 or b1 >= 0xC0 and 1
    
        endPos = startPos + bytes
    
        b2 = str∙byte( startPos + 1, endPos )
        for _ bX in ipairs { b2 }
            
            if bit.band( bX, 0xC0 ) != 0x80
                ⮐  nil
    
        (startPos endPos)
    
    codes: str ->
    
        i = 1
    
        ->
            if i > str.len ➜ ⮐  nil
            
            (startPos endPos) = @decode(str i)
    
            if not startPos ➜ error("invalid UTF-8 code" 2)
            
            i = endPos + 1
            
            (startPos string.sub(str startPos endPos))
    
    $: -> table.concat @ ""
        
    rpad: l c=' ' ->  
        while @len < l ➜ @push c
        @
        
    rtrim: c=" \n" ->
        s = kseg(c) 
        while @len > 0 and s∙has(@[^1]) ➜ @pop()
        @
        
    ltrim: c=" \n" -> 
        s = kseg(c) 
        while @len > 0 and s∙has(@[1]) ➜ @shift()
        @
        
    trim: c=" \n" -> @rtrim(c)∙ltrim(c)

    lcount: c ->

        ⮐  0 if @len <= 0
        cnt = 0
        for i in 1..@len
            if @[i] == c
                cnt += 1
            else
                break
        cnt
        
    indent: -> @lcount " "
    
    find: c ->
    
        ⮐  -1 if @len <= 0
        c = kseg c
        ⮐  -1 if c.len >= @len
        for i in 1..@len+1-c.len
            for j in 1..c.len
                if c[j] != @[i+j-1]
                    break 
                if j == c.len
                    ⮐  i
        -1

    rfind: c ->
    
        ⮐  -1 if @len <= 0
        c = kseg c
        ⮐  -1 if c.len >= @len
        for i in @len+1-c.len..1
            for j in 1..c.len
                if c[j] != @[i+j-1]
                    break 
                if j == c.len
                    ⮐  i
        -1
        
    slice: f t ->
    
        t ?= @len
        r = kseg()
        for i in f..t
            r∙push @[i]
        r
   
⮐  kseg