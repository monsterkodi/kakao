###
     ███████   ███████  ████████   ████████  ████████  ███   ███
    ███       ███       ███   ███  ███       ███       ████  ███
    ███████   ███       ███████    ███████   ███████   ███ █ ███
         ███  ███       ███   ███  ███       ███       ███  ████
    ███████    ███████  ███   ███  ████████  ████████  ███   ███
###

class screen

    @: cols rows cw ch -> 
    
        @rows  = rows
        @cols  = cols
        @cw    = cw
        @ch    = ch
        @areas = [] 
        
    $: -> "[screen sw #{@sw} sh #{@sh} cols #{@cols} rows #{@rows} cw #{@cw} ch #{@ch}]"
    
    layout: node ->
    
        children = []
        if node.hbox
            log "HBOX"
            node.width  = 0
            node.height = 0
            node.dir    = "horz"
            children = node.hbox
        elif node.vbox
            log "VBOX"
            node.width  = 0
            node.height = 0
            node.dir    = "vert"
            children = node.vbox
        elif node.view
            log "VIEW" node.view.name
            if type(node.w) == "number"
                node.width = node.w
                if node.parent.dir == "horz"
                    node.parent.width += node.w
                else
                    node.parent.width = max node.parent.width node.w
            if type(node.h) == "number"
                node.height = node.h
                if node.parent.dir == "vert"
                    node.parent.height += node.h
                else
                    node.parent.height = max node.parent.height node.h
            
        for _ child in ipairs children
            child.parent = node
            @layout child
            
        log node.width, node.height
    
    area: w h dir pad gap ->
    
        @areas∙push { w:w h:h dir:dir pad:pad gap:gap }
        
⮐  screen    