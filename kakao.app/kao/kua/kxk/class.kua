
#  ███████  ███       ███████    ███████   ███████
# ███       ███      ███   ███  ███       ███     
# ███       ███      █████████  ███████   ███████ 
# ███       ███      ███   ███       ███       ███
#  ███████  ███████  ███   ███  ███████   ███████ 

# Copyright (c) 2011 Enrique García Cota

_wrapIndex = aClass f ->

    if f == nil
        ⮐   aClass.__members
        
    elif type(f) == "function"
        ⮐  (self name) ->
            value = aClass.__members[name]
            
            if value != nil
                ⮐  value
            else
                ⮐  f(self name)
                
    else
        ▴ type(f) == "table" "__index not a table"
        ⮐  (self name) ->
            value = aClass.__members[name]
            
            if value != nil
                ⮐  value
            else
                ⮐  f[name]
                
_wrapMethod = aClass f ->

    ⮐  (self ...) ->
        ▴ type(self) == "table" and self.class and (self.class == aClass or self.class:extends(aClass)) 
            "Invalid self: expected " & aClass.name & " but got " & type(self)
        ⮐  f(self, ...)

_propMember = aClass name f ->

    f = name == "__index" and _wrapIndex(aClass, f) or f
    
    if type(f) == "function"
        aClass.__members[name] = _wrapMethod(aClass, f)
        for subclass in pairs(aClass.subclasses)
            if rawget(subclass.__members, name) == nil
                _propMember(subclass, name, f)
    else
        aClass.__proto[name] = f
        for subclass in pairs(aClass.subclasses)
            if rawget(subclass.__proto, name) == nil
                _propMember(subclass, name, f)

_newMember = aClass name f ->
  
    if f == nil and aClass.super ➜ f = aClass.super.__members[name]
    if f == nil and aClass.super ➜ f = aClass.super.__proto[name]
        
    _propMember(aClass, name, f)

_createClass = name super ->

    dict = {}
    dict.__index = dict
    
    aClass = { 
        name:       name
        super:      super
        static:     {}
        __proto:    {}
        __members:  dict
        subclasses: setmetatable({}, {__mode='k'}) 
        }
    
    if super
        setmetatable(aClass.static, {
            __index: (_ k) ->
                result = rawget(dict,k)
                if result == nil
                      ⮐  super.static[k]
                ⮐  result
        })
    else
        setmetatable(aClass.static, { __index = ((_ k) -> ⮐  rawget(dict,k)) })
    
    setmetatable(aClass, {  
        __index:      aClass.static
        __tostring:   (self)      -> ⮐  "class " & self.name
        __call:       (self, ...) -> ⮐  self:new(...)
        __newindex:   _newMember })
        
    ⮐  aClass

_includeMixin = aClass mixin ->

    ▴ type(mixin) == 'table' "Invalid Mixin table"
    # log "includeMixin"
    for name meth in pairs(mixin)
        if name != "included" and name != "static" 
            # log "_includeMixin nonstatic" name, meth, aClass, mixin
            aClass[name] = meth
    
    for name meth in pairs(mixin.static or {})
        # log "_includeMixin static" name, meth, aClass, mixin
        aClass.static[name] = meth
    
    ⮐  aClass

DefaultMixin = {

    __tostring: (self) -> ⮐  "instance of " .. tostring(self.class)
    
    is: self aClass ->
    
        ▴ type(self) == 'table' "Use :is instead of .is"
        log "IS?" type(aClass)
        ⮐  false if type(aClass) != 'table' or type(self) != 'table'
        ⮐  true if self.class == aClass
        ⮐  true if self.class and self.class.extends and self.class:extends(aClass)
        log "IS NOT" self, aClass
        ⮐  false
    
    static: {
    
        alloc: self ->
        
            ▴ type(self) == 'table' "Use :alloc instead of .alloc"
            instance = { class = self }
            for k m in pairs(self.__proto)
                instance[k] = m
            setmetatable(instance, self.__members)
            ⮐  instance
        
        new: (self ...) ->
        
            ▴ type(self) == 'table' "Use :new instead of .new"
            instance = self:alloc()
            if type(instance.init) == "function"
                ⮐  instance:init(...)
            ⮐  instance
        
        subclass: self name ->
        
            ▴ type(self) == "table"  "Use :subclass instead of .subclass"
            ▴ type(name) == "string" "Invalid subclass name"
            
            subclass = _createClass(name, self)
            
            for name, f in pairs(self.__members)
                if not (name == "__index" and type(f) == "table")
                    _propMember(subclass, name, f)
                    
            for name, f in pairs(self.__proto)
                if not (name == "__index" and type(f) == "table")
                    _propMember(subclass, name, f)
                    
            subclass.init = ((instance, ...) -> ⮐  self.init(instance, ...))
            
            self.subclasses[subclass] = true
            
            ⮐  subclass
        
        extends: self other ->
        
            ▴ type(self) == "table" "Use :extends instead of .extends"
            ⮐  type(other) == 'table' and type(self.super) == 'table' and ( self.super == other or self.super:extends(other) )
        
        include: (self ...) ->
            log "include..."
            ▴ type(self) == "table" "Use :include instead of .include"
            for _ mixin in ipairs({...}) ➜  _includeMixin(self, mixin)
            log "...include"
            ⮐  self
    }
}

middleclass = {
    class: name super ->
        ▴ type(name) == "string" "Invalid class name"
        ⮐  super and super:subclass(name) or _includeMixin(_createClass(name), DefaultMixin)
    }
    
setmetatable(middleclass, { __call = ((_ ...) -> ⮐  middleclass.class(...)) })

⮐  middleclass
