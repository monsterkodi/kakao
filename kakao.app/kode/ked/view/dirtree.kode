###
0000000    000  00000000   000000000  00000000   00000000  00000000
000   000  000  000   000     000     000   000  000       000     
000   000  000  0000000       000     0000000    0000000   0000000 
000   000  000  000   000     000     000   000  000       000     
0000000    000  000   000     000     000   000  00000000  00000000
###

use ../../kxk ▪ kutil kstr slash post noon
use ../../kxk ◆ nfs
use ../util   ◆ prjcts icons util
use           ◆ choices crumbs

import rgxs from './quicky.json' with { type: "json" }

function dirtree extends choices

    @: screen name features ->
        
        super screen name features
                        
        @state.syntax.setRgxs rgxs
        
        @frontRoundOffset = 0
    
    symbol: item ->
                          
        switch item.type
            'file' 
                ⮐ icons[slash.ext(item.path)] ? icons.file
            'dir'
                ⮐ item.open ? icons.dir_open : icons.dir_close
                
    symbolName: item -> 
        
        switch slash.ext item.path
            'kode'
            'noon'
            'json'
            'pug'
            'styl'
            'html'
            'js'
            'md'
                name = slash.name item.path
            else
                name = slash.file item.path
        
        @symbol(item) + ' ' + name
        
    emitAction: action arg ->
        
        # log "dirtree.emitAction #{action}" arg @current()
        
        c = arg
                
        switch c.type
            
            'dir' 
                
                switch action
                    
                    'click'
                    'space'
            
                        c.open = not c.open                
                        if c.open ➜ @openDir c else @closeDir c
                        ⮐ 
                        
                    'right'
                    
                        @openDir c if not c.open
                
            'file'

                switch action
                        
                    'right'
                    'click'
                    'space'
                        
                        ⮐ post.emit 'quicky' c.path
        
        super action arg
        
    #  0000000   00000000   00000000  000   000  0000000    000  00000000   
    # 000   000  000   000  000       0000  000  000   000  000  000   000  
    # 000   000  00000000   0000000   000 0 000  000   000  000  0000000    
    # 000   000  000        000       000  0000  000   000  000  000   000  
    #  0000000   000        00000000  000   000  0000000    000  000   000  
    
    openDir: dirItem ○->
        
        dirItem.open = true
        
        try
            items =○ nfs.list dirItem.path recursive:false
        catch err
            error 'list error' err
            ⮐ 
        
        dirItem.tilde = dirItem.tilde.replace icons.dir_close icons.dir_open 
            
        depth = (dirItem.depth ? 0) + 1
        
        for item in items
            item.depth = depth
            item.tilde = lpad(1+depth*2) + @symbolName(item) #(@symbol(item)+' ')) + slash.file(item.path)
        
        items.sort (a b) => @weight(a) - @weight(b)
        
        index = @items.indexOf dirItem
        
        kutil.insert @items index+1 items
        
        @set @items 'tilde'        
        
    #  0000000  000       0000000    0000000  00000000  0000000    000  00000000   
    # 000       000      000   000  000       000       000   000  000  000   000  
    # 000       000      000   000  0000000   0000000   000   000  000  0000000    
    # 000       000      000   000       000  000       000   000  000  000   000  
    #  0000000  0000000   0000000   0000000   00000000  0000000    000  000   000  
    
    closeDir: dirItem ->
        
        dirItem.tilde = dirItem.tilde.replace icons.dir_open icons.dir_close
        
        index = @items.indexOf dirItem
        
        numChildren = 0
        while @items[index+numChildren+1].path.startsWith dirItem.path
            numChildren += 1
        
        kutil.replace @items index+1 numChildren []
        
        @set @items 'tilde'
        
    # 00000000    0000000    0000000   000000000  
    # 000   000  000   000  000   000     000     
    # 0000000    000   000  000   000     000     
    # 000   000  000   000  000   000     000     
    # 000   000   0000000    0000000      000     
    
    setRoot: path ○=>
        
        dir = slash.untilde path
        
        try
            items =○ nfs.list dir recursive:false
        catch err
            error 'list error' err
            ⮐ 

        @currentRoot = dir
                
        for item in items
            item.tilde = ' ' + @symbolName(item)

        items.sort (a b) => @weight(a) - @weight(b)
                    
        select ?= items[1].path                    
        
        @set items 'tilde'
        
        selectIndex = 0
        @state.selectLine selectIndex
        @state.setMainCursor 0 selectIndex
        @state.setView [0 0]
        
    # 000   000  00000000  000   0000000   000   000  000000000  
    # 000 0 000  000       000  000        000   000     000     
    # 000000000  0000000   000  000  0000  000000000     000     
    # 000   000  000       000  000   000  000   000     000     
    # 00     00  00000000  000   0000000   000   000     000     
    
    weight: item ->

        p = slash.parse item.path

        w = 0
        w += 10000 if item.type == 'file'
        w += kstr.weight(p.file)
        w

export dirtree
