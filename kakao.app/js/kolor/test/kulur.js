var toExport = {}
var dissect, dss, ext, lang, ranges, rgs

import kxk from "../../kxk.js"
let kstr = kxk.kstr
let kseg = kxk.kseg

import util from "./util.js"
let inc = util.inc

import kulur from "../kulur.js"

ext = 'kode'

lang = function (l)
{
    return ext = l
}

ranges = function (s)
{
    return kulur.ranges(s,ext)
}

dissect = function (c)
{
    return kulur.dissect(kstr.lines(c),ext)
}
toExport["kulur"] = function ()
{
    section("unicode", function ()
    {
        rgs = ranges("🌈")
        compare(inc(rgs,0,'🌈'),'text unicode')
        compare(rgs[0],{start:0,length:2,match:'🌈',turd:'🌈',clss:'text unicode'})
        rgs = ranges("🌈🌱")
        compare(inc(rgs,0,'🌈'),'text unicode')
        compare(inc(rgs,2,'🌱'),'text unicode')
        rgs = ranges("🙂lol😀")
        compare(inc(rgs,0,'🙂'),'text unicode')
        compare(inc(rgs,2,'lol'),'text')
        compare(inc(rgs,5,'😀'),'text unicode')
        rgs = ranges("a➜b")
        compare(inc(rgs,1,'➜'),'punct keyword')
        rgs = ranges('┌─┬─┐')
        compare(inc(rgs,0,'┌'),'text unicode')
        compare(inc(rgs,1,'─'),'text unicode')
        compare(inc(rgs,2,'┬'),'text unicode')
        compare(inc(rgs,3,'─'),'text unicode')
        compare(inc(rgs,4,'┐'),'text unicode')
        rgs = ranges("🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟🐠🐡🐢🐣🐤🐥")
        compare(inc(rgs,0,'🐀'),'text unicode')
        compare(inc(rgs,24,'🐌'),'text unicode')
        rgs = ranges("'🔧' bla:1")
        compare(inc(rgs,5,'bla'),'dictionary key')
        rgs = ranges("icon: '🔧' bla:1")
        compare(inc(rgs,11,'bla'),'dictionary key')
    })
    section("kode", function ()
    {
        lang('kode')
        dss = dissect("a = b -> true")
        compare(inc(dss[0],0,"a"),'function')
        compare(inc(dss[0],2,"="),'punct function')
        compare(inc(dss[0],4,"b"),'function argument')
        compare(inc(dss[0],6,"->"),'punct function')
        dss = dissect("->")
        compare(inc(dss[0],0,"->"),'punct function')
        dss = dissect("    -> true")
        compare(inc(dss[0],4,"->"),'punct function')
        dss = dissect("=>")
        compare(inc(dss[0],0,"=>"),'punct function bound')
        dss = dissect("    => true")
        compare(inc(dss[0],4,"=>"),'punct function bound')
    })
    section("fallback", function ()
    {
        rgs = ranges('text','unknown')
        compare(inc(rgs,0,'text'),'text')
        rgs = ranges('text','fish')
        compare(inc(rgs,0,'text'),'text')
        rgs = ranges(' ###','kode')
        compare(inc(rgs,1,'###'),'punct comment triple')
    })
    section("comments", function ()
    {
        rgs = ranges("hello # world")
        compare(inc(rgs,6,"#"),'punct comment')
        compare(inc(rgs,8,"world"),'comment')
    })
    section("triple comment", function ()
    {
        rgs = ranges("###a###")
        compare(inc(rgs,0,'###'),'punct comment triple')
        compare(inc(rgs,3,"a"),'comment triple')
        compare(inc(rgs,4,'###'),'punct comment triple')
        dss = dissect("###\na\n###")
        compare(inc(dss[0],0,'###'),'punct comment triple')
        compare(inc(dss[1],0,'a'),'comment triple')
        compare(inc(dss[2],0,'###'),'punct comment triple')
        lang('styl')
        dss = dissect("/*\na\n*/")
        compare(inc(dss[0],0,"/"),'punct comment triple')
        compare(inc(dss[0],1,"*"),'punct comment triple')
        compare(inc(dss[1],0,"a"),'comment triple')
        compare(inc(dss[2],0,"*"),'punct comment triple')
        compare(inc(dss[2],1,"/"),'punct comment triple')
    })
    section("comment header", function ()
    {
        lang('kode')
        rgs = ranges("# 0 00 0000")
        compare(inc(rgs,0,"#"),'punct comment')
        compare(inc(rgs,2,"0"),'comment header')
        compare(inc(rgs,4,"00"),'comment header')
        compare(inc(rgs,7,"0000"),'comment header')
        dss = dissect("###\n 0 00 0 \n###")
        compare(inc(dss[1],1,"0"),'comment triple header')
        rgs = ranges("# 0 * 0.2")
        compare(inc(rgs,2,'0'),'comment')
        compare(inc(rgs,6,'0'),'comment')
        dss = dissect("###\n 0 1 0 \n###")
        compare(inc(dss[1],1,"0"),'comment triple')
        lang('styl')
        rgs = ranges("// 000")
        compare(inc(rgs,3,"000"),'comment header')
        dss = dissect("/*\n 0 0 0 \n*/")
        compare(inc(dss[1],1,"0"),'comment triple header')
    })
    section("numbers", function ()
    {
        rgs = ranges("a 6670")
        compare(inc(rgs,2,"6670"),'number')
        rgs = ranges("0x667AC")
        compare(inc(rgs,0,"0x667AC"),'number hex')
        rgs = ranges("66.700")
        compare(inc(rgs,0,"66"),'number float')
        compare(inc(rgs,2,"."),'punct number float')
        compare(inc(rgs,3,"700"),'number float')
        rgs = ranges("77.800 -100")
        compare(inc(rgs,0,"77"),'number float')
        compare(inc(rgs,8,"100"),'number')
        rgs = ranges("(8.9,100.2)")
        compare(inc(rgs,3,"9"),'number float')
        compare(inc(rgs,9,"2"),'number float')
    })
    section("semver", function ()
    {
        lang('coffee')
        rgs = ranges("66.70.0")
        compare(inc(rgs,0,"66"),'semver')
        compare(inc(rgs,2,"."),'punct semver')
        compare(inc(rgs,3,"70"),'semver')
        compare(inc(rgs,5,"."),'punct semver')
        compare(inc(rgs,6,"0"),'semver')
        rgs = ranges("^0.7.1")
        compare(inc(rgs,0,"^"),'punct semver')
        compare(inc(rgs,1,"0"),'semver')
        compare(inc(rgs,3,"7"),'semver')
        compare(inc(rgs,5,"1"),'semver')
        rgs = ranges("^1.0.0-alpha.12")
        compare(inc(rgs,1,"1"),'semver')
        compare(inc(rgs,3,"0"),'semver')
        compare(inc(rgs,5,"0"),'semver')
        rgs = ranges(">=6.7.9")
        compare(inc(rgs,0,">"),'punct semver')
        compare(inc(rgs,1,"="),'punct semver')
        compare(inc(rgs,2,"6"),'semver')
        compare(inc(rgs,3,"."),'punct semver')
        compare(inc(rgs,4,"7"),'semver')
        compare(inc(rgs,5,"."),'punct semver')
        compare(inc(rgs,6,"9"),'semver')
    })
    section("js", function ()
    {
        lang('js')
        rgs = ranges("obj.prop.call(1);")
        compare(inc(rgs,0,'obj'),'obj')
        compare(inc(rgs,4,'prop'),'property')
        compare(inc(rgs,9,'call'),'function call')
        rgs = ranges("func = function() {")
        compare(inc(rgs,0,'func'),'function')
        compare(inc(rgs,7,'function'),'keyword function')
        rgs = ranges("obj.value = obj.another.value")
        compare(inc(rgs,0,"obj"),'obj')
        compare(inc(rgs,4,"value"),'property')
        compare(inc(rgs,12,"obj"),'obj')
        compare(inc(rgs,16,"another"),'property')
        compare(inc(rgs,24,"value"),'property')
        rgs = ranges("a(2);")
        compare(inc(rgs,0,'a'),'function call')
        rgs = ranges("//# sourceMappingURL=data:")
        compare(inc(rgs,0,"/"),'punct comment')
        compare(inc(rgs,1,"/"),'punct comment')
        compare(inc(rgs,2,"#"),'comment')
    })
    section("txt", function ()
    {
        lang('txt')
        rgs = ranges("it's all we'll ever need. we'd never do that!")
        compare(inc(rgs,2,"'"),'punct')
        compare(inc(rgs,3,"s"),'text')
        compare(inc(rgs,11,"'"),'punct')
        compare(inc(rgs,28,"'"),'punct')
        rgs = ranges("'it' s, 'we' ll")
        compare(inc(rgs,0,"'"),'punct string single')
        compare(inc(rgs,3,"'"),'punct string single')
        compare(inc(rgs,5,"s"),'text')
        compare(inc(rgs,8,"'"),'punct string single')
        compare(inc(rgs,11,"'"),'punct string single')
        compare(inc(rgs,13,"ll"),'text')
        rgs = ranges("['s' 'll' 'd' 't']")
        compare(inc(rgs,1,"'"),'punct string single')
        compare(inc(rgs,2,"s"),'string single')
        compare(inc(rgs,3,"'"),'punct string single')
        compare(inc(rgs,5,"'"),'punct string single')
        compare(inc(rgs,8,"'"),'punct string single')
    })
    section("html", function ()
    {
        lang('html')
        rgs = ranges("</div>")
        compare(inc(rgs,0,"<"),'punct keyword')
        compare(inc(rgs,1,"/"),'punct keyword')
        compare(inc(rgs,2,"div"),'keyword')
        compare(inc(rgs,5,">"),'punct keyword')
        rgs = ranges("<div>")
        compare(inc(rgs,0,"<"),'punct keyword')
        compare(inc(rgs,1,"div"),'keyword')
        compare(inc(rgs,4,">"),'punct keyword')
    })
    section("css", function ()
    {
        lang('css')
        rgs = ranges("0.5")
        compare(inc(rgs,0,"0"),'number float')
        compare(inc(rgs,1,"."),'punct number float')
        compare(inc(rgs,2,"5"),'number float')
    })
    section("cpp", function ()
    {
        lang('cpp')
        rgs = ranges("#include")
        compare(inc(rgs,0,"#"),'punct define')
        compare(inc(rgs,1,"include"),'define')
        rgs = ranges("#if")
        compare(inc(rgs,0,"#"),'punct define')
        compare(inc(rgs,1,"if"),'define')
        rgs = ranges("#  if")
        compare(inc(rgs,0,"#"),'punct define')
        compare(inc(rgs,3,"if"),'define')
        rgs = ranges("if (true) {} else {}")
        compare(inc(rgs,0,"if"),'keyword')
        compare(inc(rgs,4,"true"),'keyword')
        compare(inc(rgs,13,"else"),'keyword')
        rgs = ranges("1.0f")
        compare(inc(rgs,0,"1"),'number float')
        compare(inc(rgs,1,"."),'punct number float')
        compare(inc(rgs,2,"0f"),'number float')
        rgs = ranges("0.0000f")
        compare(inc(rgs,2,"0000f"),'number float')
        rgs = ranges("obj.value = obj.another.value;")
        compare(inc(rgs,0,"obj"),'obj')
        compare(inc(rgs,4,"value"),'property')
        compare(inc(rgs,12,"obj"),'obj')
        compare(inc(rgs,16,"another"),'property')
        compare(inc(rgs,24,"value"),'property')
        rgs = ranges("Cast<targ>")
        compare(inc(rgs,4,'<'),'punct template')
        compare(inc(rgs,5,'targ'),'template')
        compare(inc(rgs,9,'>'),'punct template')
        rgs = ranges("TMap<FGrid, FRoute>")
        compare(inc(rgs,0,'TMap'),'keyword type')
        compare(inc(rgs,4,'<'),'punct template')
        compare(inc(rgs,5,'FGrid'),'template')
        compare(inc(rgs,10,','),'punct template')
        compare(inc(rgs,12,'FRoute'),'template')
        compare(inc(rgs,18,'>'),'punct template')
    })
    section("mm", function ()
    {
        lang('mm')
        rgs = ranges("@import")
        compare(inc(rgs,0,"@"),'punct')
        compare(inc(rgs,1,"import"),'define')
        rgs = ranges("@implementation")
        compare(inc(rgs,0,"@"),'punct')
        compare(inc(rgs,1,"implementation"),'define')
        rgs = ranges("@interface")
        compare(inc(rgs,0,"@"),'punct')
        compare(inc(rgs,1,"interface"),'define')
        rgs = ranges("@synthesize")
        compare(inc(rgs,0,"@"),'punct')
        compare(inc(rgs,1,"synthesize"),'define')
        rgs = ranges("@property")
        compare(inc(rgs,0,"@"),'punct')
        compare(inc(rgs,1,"property"),'define')
        section("NSString", function ()
        {
            rgs = ranges('@"X"')
            compare(inc(rgs,0,"@"),'punct')
            compare(inc(rgs,1,'"'),'punct string double')
            compare(inc(rgs,2,'X'),'string double')
            compare(inc(rgs,3,'"'),'punct string double')
            rgs = ranges('@"%@"')
            compare(inc(rgs,0,"@"),'punct')
            compare(inc(rgs,1,'"'),'punct string double')
            compare(inc(rgs,2,'%'),'string double')
            compare(inc(rgs,3,'@'),'string double')
            compare(inc(rgs,4,'"'),'punct string double')
        })
    })
    section("sh", function ()
    {
        lang('sh')
        rgs = ranges("dir/path/with/dashes/file.txt")
        compare(inc(rgs,0,'dir'),'text dir')
        compare(inc(rgs,4,'path'),'text dir')
        compare(inc(rgs,9,'with'),'text dir')
        compare(inc(rgs,14,'dashes'),'text dir')
        rgs = ranges("prg --arg1 -arg2")
        compare(inc(rgs,4,'-'),'punct argument')
        compare(inc(rgs,5,'-'),'punct argument')
        compare(inc(rgs,6,'arg1'),'argument')
        compare(inc(rgs,11,'-'),'punct argument')
        compare(inc(rgs,12,'arg2'),'argument')
        rgs = ranges("cd ~")
        compare(inc(rgs,3,'~'),'text dir')
        rgs = ranges("~/home")
        compare(inc(rgs,0,'~'),'text dir')
        compare(inc(rgs,1,'/'),'punct dir')
        compare(inc(rgs,2,'home'),'text file')
    })
    section("log", function ()
    {
        lang('log')
        rgs = ranges("http://domain.com")
        compare(inc(rgs,0,'http'),'url protocol')
        compare(inc(rgs,4,':'),'punct url')
        compare(inc(rgs,5,'/'),'punct url')
        compare(inc(rgs,6,'/'),'punct url')
        compare(inc(rgs,7,'domain'),'url domain')
        compare(inc(rgs,13,'.'),'punct url tld')
        compare(inc(rgs,14,'com'),'url tld')
        rgs = ranges("file.coffee")
        compare(inc(rgs,0,'file'),'coffee file')
        compare(inc(rgs,4,'.'),'punct coffee')
        compare(inc(rgs,5,'coffee'),'coffee ext')
        rgs = ranges("/some/path")
        compare(inc(rgs,1,'some'),'text dir')
        compare(inc(rgs,5,'/'),'punct dir')
        rgs = ranges("key: value")
        compare(inc(rgs,0,'key'),'dictionary key')
        compare(inc(rgs,3,':'),'punct dictionary')
    })
    section("md", function ()
    {
        lang('md')
        rgs = ranges("**bold**")
        compare(inc(rgs,0,'*'),'punct bold')
        compare(inc(rgs,1,'*'),'punct bold')
        compare(inc(rgs,2,'bold'),'text bold')
        compare(inc(rgs,6,'*'),'punct bold')
        compare(inc(rgs,7,'*'),'punct bold')
        rgs = ranges(",**b**,")
        compare(inc(rgs,1,'*'),'punct bold')
        compare(inc(rgs,3,'b'),'text bold')
        compare(inc(rgs,4,'*'),'punct bold')
        rgs = ranges("*it lic*")
        compare(inc(rgs,0,'*'),'punct italic')
        compare(inc(rgs,1,'it'),'text italic')
        compare(inc(rgs,4,'lic'),'text italic')
        compare(inc(rgs,7,'*'),'punct italic')
        rgs = ranges("*italic*")
        compare(inc(rgs,0,'*'),'punct italic')
        compare(inc(rgs,1,'italic'),'text italic')
        compare(inc(rgs,7,'*'),'punct italic')
        rgs = ranges("*`italic code`*")
        compare(inc(rgs,0,'*'),'punct italic')
        compare(inc(rgs,1,'`'),'punct italic code')
        compare(inc(rgs,2,'italic'),'text italic code')
        compare(inc(rgs,9,'code'),'text italic code')
        compare(inc(rgs,14,'*'),'punct italic')
        rgs = ranges("it's good")
        compare(inc(rgs,0,'it'),'text')
        compare(inc(rgs,2,"'"),'punct')
        compare(inc(rgs,3,'s'),'text')
        rgs = ranges("if is empty in then")
        compare(inc(rgs,0,'if'),'text')
        compare(inc(rgs,3,'is'),'text')
        compare(inc(rgs,6,'empty'),'text')
        compare(inc(rgs,12,'in'),'text')
        compare(inc(rgs,15,'then'),'text')
        rgs = ranges('text files. bla')
        compare(inc(rgs,0,'text'),'text')
        compare(inc(rgs,10,'.'),'punct')
        rgs = ranges('..bla')
        compare(inc(rgs,0,'.'),'punct')
        compare(inc(rgs,1,'.'),'punct')
        rgs = ranges('```coffeescript')
        compare(inc(rgs,0,'`'),'punct code triple')
        compare(inc(rgs,3,'coffeescript'),'comment')
    })
    section("md2", function ()
    {
        rgs = ranges("- li")
        compare(inc(rgs,0,'-'),'punct li1 marker')
        compare(inc(rgs,2,'li'),'text li1')
        rgs = ranges("    - **bold**")
        compare(inc(rgs,4,'-'),'punct li2 marker')
        compare(inc(rgs,8,'bold'),'text li2 bold')
        rgs = ranges("        - **bold**")
        compare(inc(rgs,8,'-'),'punct li3 marker')
        compare(inc(rgs,12,'bold'),'text li3 bold')
        rgs = ranges("        * **bold**")
        compare(inc(rgs,8,'*'),'punct li3 marker')
        compare(inc(rgs,12,'bold'),'text li3 bold')
        dss = dissect(`- li1
text`)
        compare(inc(dss[0],0,'-'),'punct li1 marker')
        compare(inc(dss[1],0,'text'),'text')
        dss = dissect(`# h1
## h2
### h3
#### h4
##### h5`)
        compare(inc(dss[0],0,"#"),'punct h1')
        compare(inc(dss[0],2,"h1"),'text h1')
        compare(inc(dss[1],0,"#"),'punct h2')
        compare(inc(dss[1],3,"h2"),'text h2')
        compare(inc(dss[2],0,"#"),'punct h3')
        compare(inc(dss[2],4,"h3"),'text h3')
        compare(inc(dss[3],0,"#"),'punct h4')
        compare(inc(dss[3],5,"h4"),'text h4')
        compare(inc(dss[4],0,"#"),'punct h5')
        compare(inc(dss[4],6,"h5"),'text h5')
        dss = dissect(`\`\`\`js
\`\`\``)
        compare(inc(dss[1],0,'`'),'punct code triple')
        dss = dissect(`\`\`\`js
\`\`\``)
        compare(inc(dss[1],0,'`'),'punct code triple')
    })
}
toExport["kulur"]._section_ = true
toExport._test_ = true
export default toExport
