###
    ███   ███   ███████    ███████   ███   ███
    ████  ███  ███   ███  ███   ███  ████  ███
    ███ █ ███  ███   ███  ███   ███  ███ █ ███
    ███  ████  ███   ███  ███   ███  ███  ████
    ███   ███   ███████    ███████   ███   ███
###

indstr = "    "
scl = [' ' '#' '|']

class noon

    @: s -> ⮐  noon.stringify s

    #  ███████  █████████  ████████   ███  ███   ███   ███████   ███  ████████  ███   ███
    # ███          ███     ███   ███  ███  ████  ███  ███        ███  ███        ███ ███ 
    # ███████      ███     ███████    ███  ███ █ ███  ███  ████  ███  ██████      █████  
    #      ███     ███     ███   ███  ███  ███  ████  ███   ███  ███  ███          ███   
    # ███████      ███     ███   ███  ███  ███   ███   ███████   ███  ███          ███   

    @toString: o buf ind="" arry=false visited=[] ->
        
        escape = k arry ->
            
            if kstr.find(k '\n') >= 1
            
                sp = [unpack(kstr.split(k '\n'))]
                es = sp∙map((s) -> escape(s arry))
                es∙unshift '...'
                es∙push '...'
                ⮐  es∙join('\n')
                
            if k == '' or k == '...' or scl∙has(k∙sub(1 1)) or scl∙has(k∙sub(k.len k.len)) or arry and kstr.find(k "  ") >= 1
                ⮐  '|' & k & '|'
            k
        
        switch type(o)
            
            "string" ➜ buf += escape(o arry)
            "table"
                if visited∙has o
                    buf += "<v>" 
                else            
                    visited∙push o
                    if o.len > 0 or type(o["len"]) == "function" and o∙len() > 0
                        l = o.len > 0 and o.len or o∙len()
                        buf += ind != '' and arry and '.' or ''
                        if ind != ''
                            buf += '\n' 
                        for v i in array.each o
                            buf += ind
                            noon.toString v buf ind&indstr true visited
                            if i < l ➜ buf += ("\n") 
                    else
                        buf += (arry and '.\n') or ((ind != '') and '\n' or '')
                        maxKey = 2
                        
                        keys = []
                        ks = dict.keys o
                        ks∙sort()
                        for k in ks
                            ek = escape k true
                            keys∙push [ek o[k]]
                            maxKey = max maxKey ek.len
                        maxKey = min maxKey 32
                        
                        for k i in keys∙each()
                            buf += ind
                            if type(k[2]) == "table"
                                buf += k[1]
                            else
                                buf += kstr.pad(maxKey k[1])
                                buf += ("  ") 
                            noon.toString k[2] buf ind&indstr false visited
                            if i < keys.len ➜ buf += "\n"
            ➜ 
                buf += tostring(o)
        buf
    
    @stringify: o -> $@toString(o strg())

    # ████████    ███████   ████████    ███████  ████████
    # ███   ███  ███   ███  ███   ███  ███       ███     
    # ████████   █████████  ███████    ███████   ███████ 
    # ███        ███   ███  ███   ███       ███  ███     
    # ███        ███   ███  ███   ███  ███████   ████████
    
    @parse: s ->
    
        ⮐  [] if empty s
        s = strg s
        lines = s∙lines()
        @parseLines lines
        
    @parseLines: lines ->
    
        reslt = []
        indnt = lines[1]∙indent()
        lastkey = ""
        while lines∙len() > 0
            line = lines∙shift()
            if line∙number() != nil and reslt is array
                reslt∙push line∙number()
            elif line∙bool() != nil and reslt is array
                reslt∙push line∙bool()
            else
                ind = line∙indent()
                if ind > indnt and ind < line∙len()
                    indlines = []
                    indlines∙push line∙slice(ind+1)
                    while lines∙len() > 0 and lines[1]∙indent() >= ind
                        indlines∙push lines∙shift()∙slice(ind+1)
                    if reslt is array
                        d = {}
                        for k in reslt
                            d[$k] = ""
                        lastkey = $reslt[reslt∙len()]
                        reslt = d

                    reslt[lastkey] = noon.parseLines(indlines)
                else    
                    
                    line∙trim()
                    ddi = line∙indexof "  "
                    lpi = line∙rfind "|"
                    fpi = line∙find  "|"
                    if ddi > 0 and ddi > lpi and (lpi > fpi or lpi < 1)
                        if reslt is array
                            reslt = {}
                        k = $line∙slice 1 ddi-1
                        v = line∙slice ddi+1
                        v = v∙ltrim()
                        if v∙number() != nil
                            v = v∙number()
                        elif v∙bool() != nil
                            v = v∙bool()
                        else
                            v = $v
                        reslt[k] = v
                    else if line∙num() > 0
                        if line[line∙num()] == "|"
                            line∙pop()
                        if line[1] == "|"
                            line∙shift()
                        if reslt is array
                            reslt∙push $line
                        else
                            lastkey = $line
        # for o p in pairs reslt
        #     write "reslt " o " " p
        reslt

⮐  noon

