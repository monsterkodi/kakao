###
0000000    000  00000000   000000000  00000000   00000000  00000000
000   000  000  000   000     000     000   000  000       000     
000   000  000  0000000       000     0000000    0000000   0000000 
000   000  000  000   000     000     000   000  000       000     
0000000    000  000   000     000     000   000  00000000  00000000
###

use ../../kxk ▪ kstr slash post noon
use ../../kxk ◆ nfs
use ../util   ◆ prjcts util
use           ◆ choices crumbs

import rgxs from './quicky.json' with { type: "json" }

function dirtree extends choices

    @: screen name features ->
        
        super screen name features
                        
        @state.syntax.setRgxs rgxs
        
        # ⏵⏷
        
    setRoot: path ○=>
        
        dir = slash.untilde path
        
        try
            items =○ nfs.list dir recursive:false
        catch err
            error 'list error' err
            ⮐ 

        # log g5("dirtree.setRoot") dir
        
        @currentRoot = dir
        
        weight = item ->

            p = slash.parse item.path

            w = 0
            w += 10000 if item.type == 'file'
            # w += 1000  if item.tilde.startsWith ' .'
            # w += 1     if slash.ext(item.tilde) in ['js' 'json']
            w += kstr.weight(p.file)
            w
        
        for item in items
            item.tilde = slash.relative item.path @currentRoot
            item.tilde = ((item.type == 'dir') ? '⏵ ' : '  ') + item.tilde

        items.sort (a b) -> weight(a) - weight(b)
                    
        select ?= items[1].path
               
        @frontRoundOffset = 1
        
        @set items 'tilde'
        
        selectIndex = 0
        @state.selectLine selectIndex
        @state.setMainCursor 0 selectIndex
        @state.setView [0 0]

export dirtree
