
use kxk.kxk
use ked

setFontWidth = fw=24 ->

    _G.fontWidth = fw
    _G.font  = love.graphics.setNewFont "fonts/Twilio.ttf" fontWidth*2
    fb1 = love.graphics.newFont "fonts/Helvetica.ttf"      fontWidth*2
    fb2 = love.graphics.newFont "fonts/Menlo.ttf"          fontWidth*2
    _G.font∙setFallbacks(fb1, fb2)

love.load = ->

    (width height) = love.window.getDesktopDimensions()
    
    love.window.setMode width/2 height {
        highdpi: true
        usedpiscale: false
        resizable: true
        }
        
    love.window.setPosition 0 0
    
    love.graphics.setDefaultFilter "nearest" "nearest"

    setFontWidth 24
    
    _G.count = 0
    _G.mouseClick = []
    
    #love.window.maximize()
    love.keyboard.setKeyRepeat true
    
    _G.ked = ked()
    
    nil

love.draw = ->       

    count += 1
    (_ _ w h) = love.window.getSafeArea()

    lg = love.graphics
    
    tth = lg.newText _G.font "Xg" 
    ttw = lg.newText _G.font "W" 
    
    (tw th) = ttw∙getDimensions() ; cw = tw
    (tw th) = tth∙getDimensions() ; ch = th
    
    cols = floor w/cw
    rows = floor h/ch
    
    ked∙draw cols rows cw ch
    
    # lg.setColor 0.2 0.2 0.2 
    # lg.print "#{cols} #{rows} #{w} #{h} #{cw} #{ch} #{count} #{love.timer.getFPS()} ◂" 6*cw 0
    
    # log "hasGlyphs", _G.font∙hasGlyphs("⮐➜▸∙◌○◇□✔✘●◆▪◼■△┬")
    
    nil
    
love.quit = ->

    ked∙quit()
    false
    
love.keypressed = key scancode isrepeat ->
    
    mods = ""
    switch key 
        "escape"    ➜ key = "esc"
        "backspace" ➜ key = "delete"
        "lshift" "rshift"
        "lctrl"  "rctrl"
        "lalt"   "ralt"
        "lgui"   "rgui"
            ⮐  
            
    lk = love.keyboard        
    
    if lk.isDown('lshift') or lk.isDown('rshift') ➜ mods &= "shift+"
    if lk.isDown('lctrl')  or lk.isDown('rctrl')  ➜ mods &= "ctrl+"
    if lk.isDown('lalt')   or lk.isDown('ralt')   ➜ mods &= "alt+"
    if lk.isDown('lgui')   or lk.isDown('rgui')   ➜ mods &= "cmd+"

    combo = mods & key
    char = switch key
        "return" ➜ "\n"
        "tab"    ➜ "\t"
        "space"  ➜ " "
        "up"
        "down"
        "right"
        "esc"
        "delete"
        "left"   ➜ ""
                 ➜ 
                    if mods.len == 0 
                        key 
                    elif mods == "shift+"
                        switch key
                            "1" ➜ "!"
                            "2" ➜ "@"
                            "3" ➜ "#"
                            "4" ➜ "$"
                            "5" ➜ "%"
                            "6" ➜ "^"
                            "7" ➜ "&"
                            "8" ➜ "*"
                            "9" ➜ "("
                            "0" ➜ ")"
                            "-" ➜ "_"
                            "=" ➜ "+"
                            "[" ➜ "{"
                            "]" ➜ "}"
                            "\\" ➜ "|"
                            ";" ➜ ":"
                            "'" ➜ '"'
                            "," ➜ "<"
                            "." ➜ ">"
                            "/" ➜ "?"
                            '`' ➜ "~"
                                ➜ string.upper key
                    else
                        ""
                        
    switch combo
        "cmd+-" ➜   setFontWidth max(14 fontWidth-1)
        "cmd+=" ➜   setFontWidth min(128 fontWidth+1)
        "cmd+0" ➜   setFontWidth()
                ➜ 
                    event = {"repeat":isrepeat combo:combo char:char}
                    # log "key", dict.str(event), ◌b, scancode
                    ked∙onKey combo event
    true
    
love.mousepressed = x y button istouch presses ->

    button = if button == 1 ➜ "left" ➜ "right"
    _G.mouseCell = [int(x/_G.screen.cw) int(y/_G.screen.ch)]
    
    count = 1
    if _G.mouseClick[button]
        click = _G.mouseClick[button]
        if abs(x-click.x) < 10 and abs(y-click.y) < 10 
            if love.timer.getTime() - click.time < 300
                count = click.count+1
    
    _G.mouseClick[button] = {
        x:      x
        y:      y
        count:  count
        time:   love.timer.getTime()}
        
    event = {x:x y:y type:"press" button:button count:mouseClick[button].count cell:mouseCell}
    # log "EVENT" noon(event)
    ked∙onMouse event

love.mousereleased = x y button istouch presses ->

    button = if button == 1 ➜ "left" ➜ "right"
    _G.mouseCell = [int(x/_G.screen.cw) int(y/_G.screen.ch)]
    event = {x:x y:y type:"release" button:button count:1 cell:mouseCell}
    ked∙onMouse event

love.mousemoved = x y ->

    button = ""
    _G.mouseCell = [int(x/_G.screen.cw) int(y/_G.screen.ch)]
    typ = "move"
    if love.mouse.isDown(1)
        button = "right"
        typ = "drag"
    event = {x:x y:y type:typ button:button cell:mouseCell}
    ked∙onMouse event
    
love.wheelmoved = x y ->

    dir = ''
    if
        y > 0 ➜ dir = 'up'
        y < 0 ➜ dir = 'down'
        x < 0 ➜ dir = 'left'
        x > 0 ➜ dir = 'right'
    
    event = {x:x y:y type:"wheel" cell:mouseCell dir:dir}
    log "WHEEL" noon(event)
    ked∙onMouse event
    
# love.keyreleased = key scancode ->
# 
#     log 'keyreleased ' key, " " scancode
