###
00000000  000  000      00000000  00000000    0000000    0000000
000       000  000      000       000   000  000   000  000     
000000    000  000      0000000   00000000   000   000  0000000 
000       000  000      000       000        000   000       000
000       000  0000000  00000000  000         0000000   0000000 

◆ on cursors change ➜ stores main cursor and view in session 
◆ on file loaded    ➜ restores main cursor and view from session
◆ on key event      ➜ provides file edits navigation via shortcuts
◆ on post insert    ➜ tracks insertion points for file edits navigation
###
class filepos

    @autoStart: true
    
    @fileposl: []
    @offset:   0
    
    @: state ->
    
        @state = state
        @name = 'filepos'
        
        # since this is a mode, it gets loaded late.
        # but the editor loads recent files immediately.
        # fake file loaded here to re-apply view and cursor positions of earlier session.
        # this shoudn't be a problem as long mode loading is fast enough.
        
        @fileLoaded ked_session∙get("editor▸file") 
        
        post∙on 'filepos.goBackward'   @goBackward
        post∙on 'filepos.goForward'    @goForward
        post∙on 'filepos.swapPrevious' @swapPrevious
        
        post∙emit 'redraw'
        
    #  ███████  ███   ███  ████████    ███████   ███████   ████████    ███████
    # ███       ███   ███  ███   ███  ███       ███   ███  ███   ███  ███     
    # ███       ███   ███  ███████    ███████   ███   ███  ███████    ███████ 
    # ███       ███   ███  ███   ███       ███  ███   ███  ███   ███       ███
    #  ███████   ███████   ███   ███  ███████    ███████   ███   ███  ███████ 

    cursorsSet: ->
        
        file = ked_session∙get "editor▸file"
        if file
        
            curview = @state∙mainCursor() + @state.s.view
            
            fposl = filepos.fileposl
            
            if empty fposl
                fposl∙push [file curview]
            else
                
                if filepos.offset > 0 and fposl.len > 1 and fposl[fposl.len-filepos.offset][1] == file
                    fposl[fposl.len-filepos.offset][1] = curview
                else    
                    if filepos.offset > 0 and fposl[fposl.len-filepos.offset][1] != file
                        filepos.offset = 0
                    # kutil.pullIf(fposl, (fp) -> fp[1] == file)
                    fposl∙push [file curview]
                
            # for fp in fposl
            #     log "○ #{b6 slash.file(fp[0])} #{fp[1][0]} #{fp[1][1]} #{fp[1][2]} #{fp[1][3]}"
                
            post∙emit 'status.filepos' fposl filepos.offset
            ked_session∙set "editor▸filepos▸#{file}" curview
            
    # ███       ███████    ███████   ███████    ████████  ███████  
    # ███      ███   ███  ███   ███  ███   ███  ███       ███   ███
    # ███      ███   ███  █████████  ███   ███  ███████   ███   ███
    # ███      ███   ███  ███   ███  ███   ███  ███       ███   ███
    # ███████   ███████   ███   ███  ███████    ████████  ███████  

    fileLoaded: file row col view ->
        
        if row
            # log "filepos.fileLoaded post goto.line #{row} #{col} #{view?[0]} #{view?[1]}"
            post∙emit 'goto.line' row col view
        else
            posview = ked_session∙get "editor▸filepos▸#{file}"
            if posview
                # log "filepos.fileLoaded apply session #{posview} #{file}"
                @state∙setCursors [posview∙slice(1 2)]
                @state∙setView posview∙slice(3)

    #  ███████  ███   ███   ███████   ████████ 
    # ███       ███ █ ███  ███   ███  ███   ███
    # ███████   █████████  █████████  ████████ 
    #      ███  ███   ███  ███   ███  ███      
    # ███████   ██     ██  ███   ███  ███      

    swapPrevious: ->
    
        ⮐  if filepos.fileposl.len < 2
        
        if filepos.offset
            filepos.offset = 0
        else
            lf = filepos.fileposl∙pop()
            pf = filepos.fileposl∙pop()
            filepos.fileposl∙push lf 
            filepos.fileposl∙push pf
        
        @emitOpen()
                    
    #  ███████    ███████ 
    # ███        ███   ███
    # ███  ████  ███   ███
    # ███   ███  ███   ███
    #  ███████    ███████ 

    goBackward: ->
    
        ⮐  if filepos.fileposl.len < 2
        ⮐  if filepos.offset >= filepos.fileposl.len-1
        
        filepos.offset += 1
        
        @emitOpen()
    
    goForward: ->
    
        ⮐  if filepos.fileposl.len < 2
        ⮐  if filepos.offset <= 0
        
        filepos.offset -= 1

        @emitOpen()

    # ████████  ██     ██  ███  █████████         ███████   ████████   ████████  ███   ███
    # ███       ███   ███  ███     ███           ███   ███  ███   ███  ███       ████  ███
    # ███████   █████████  ███     ███           ███   ███  ████████   ███████   ███ █ ███
    # ███       ███ █ ███  ███     ███           ███   ███  ███        ███       ███  ████
    # ████████  ███   ███  ███     ███            ███████   ███        ████████  ███   ███

    emitOpen: ->
    
        fp = filepos.fileposl[filepos.fileposl.len-filepos.offset-1]
        
        post∙emit 'status.filepos' filepos.fileposl filepos.offset
        post∙emit 'file.open' fp[0] fp[1][1] fp[1][0] [fp[1][2] fp[1][3]]
            
⮐  filepos
