###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    
###

use ◆ ttio gutter status cells state draw logfile scroll color util
use ../kxk ▪ karg kstr slash
use ../kxk/nfs

args = karg """
    ked [file]
        options                                   **
        version    log version                    = false
    """

function KED

    @: ->

        @t = new ttio
        
        @log = new logfile
        
        global.lf = args... => @log.write args.map((a) -> "#{a}").join(' ')
        
        @cells  = new cells @t
        @state  = new state  @cells
        @draw   = new draw   @cells
        @gutter = new gutter @cells @state
        @scroll = new scroll @cells @state
        @status = new status @cells @state
        
        @mouseHandlers = [@scroll]
        
        @t.on 'key'    @onKey
        @t.on 'paste'  @onPaste
        @t.on 'mouse'  @onMouse
        @t.on 'wheel'  @onWheel
        @t.on 'resize' @onResize
        @t.on 'focus'  -> 
        @t.on 'blur'   -> 
            
        if args.version ➜ log '0.0.1'; process.exit 0
                        
        if valid args.options
            @loadFile args.options[0]
        else
            @state.init ['']
            @t.setCursor 4 0
            @onResize @t.cols() @t.rows()
        
    @run: -> new KED()
    
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
        
    loadFile: p ○=>
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @status.file = slash.tilde  p
        else
            @status.file = slash.normalize p

        text =○ nfs.read slash.untilde(p)
        
        lines = text.split /\r?\n/
        
        @state.syntax.ext = slash.ext p
        @state.loadLines lines
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
        @redraw()
    
    reloadFile: =>
        
        @loadFile @status.file
        
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ○=>
        
        text = @state.s.lines.asMutable().join '\n'
        
        ○ nfs.write slash.untilde(@status.file) text
        
        @reloadFile()
        
    #  0000000  000   000  000000000  
    # 000       000   000     000     
    # 000       000   000     000     
    # 000       000   000     000     
    #  0000000   0000000      000     
    
    cut: =>
        
        @state.cut()
        @redraw()
        
    copy: =>
        
        @state.copy()
        
    paste: =>
        
        @state.paste()
        @redraw()
        
    undo: =>
        
        @state.undo()
        @redraw()
        
    redo: =>
        
        @state.redo()
        @redraw()
        
    # 000  000   000   0000000  00000000  00000000   000000000  
    # 000  0000  000  000       000       000   000     000     
    # 000  000 0 000  0000000   0000000   0000000       000     
    # 000  000  0000       000  000       000   000     000     
    # 000  000   000  0000000   00000000  000   000     000     
    
    insert: text =>
        
        @state.insert text
        @redraw()
        
    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    delete: type =>
        
        @state.delete type
        @redraw()
        
    #       000   0000000   000  000   000  
    #       000  000   000  000  0000  000  
    #       000  000   000  000  000 0 000  
    # 000   000  000   000  000  000  0000  
    #  0000000    0000000   000  000   000  
    
    joinLines: =>
        
        @state.joinLines()
        @redraw()
        
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  

    moveCursorAndSelect: dir =>
        
        @state.moveCursorAndSelect dir
        @redraw()
    
    moveCursor: dir steps =>
        
        @state.moveCursor dir steps
        @redraw()
                    
    setCursor: x y =>
        
        @state.setCursor x y
        @redraw()
        
    showCursorIfInView: =>
        
        show = util.isPosInsideRange @state.s.cursor @state.rangeForVisibleLines()
        if @state.s.cursor[0] < @state.s.view[0] ➜ show = false
        @t.showCursor show
        
    #  0000000   0000000  00000000    0000000   000      000      
    # 000       000       000   000  000   000  000      000      
    # 0000000   000       0000000    000   000  000      000      
    #      000  000       000   000  000   000  000      000      
    # 0000000    0000000  000   000   0000000   0000000  0000000  
    
    scrollView: dir steps =>
        
        @state.scrollView dir steps
        @redraw()
            
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event col row button mods count =>
        
        for handler in @mouseHandlers
            if handler.onMouse event col row button mods count
                @redraw()
                ⮐ 
        
        switch event
            
            'press'
                        
                if count > 1
                    
                    @state.deselect()
                    
                    x = col + @state.s.view[0] - @state.s.gutter
                    y = row + @state.s.view[1]
                    
                    if count == 2
                        if mods == 'alt'
                            @state.selectChunk x y
                        else
                            @state.selectWord x y
                    else
                        @state.selectLine y
                        
                    @dragStart = copy @state.s.selections[0]
                    
                    @redraw()
                    
                else
                    
                    x = col + @state.s.view[0] - @state.s.gutter
                    y = row + @state.s.view[1]
                    
                    @dragStart = [x y x]
                                    
                    @state.deselect() if mods != 'ctrl'
                    @state.setCursor(x y)
                    @redraw()
                    
            'drag'
            
                if @dragStart
                    x = col + @state.s.view[0] - @state.s.gutter
                    y = row + @state.s.view[1]
                    
                    start = [@dragStart[0] @dragStart[1]]
                    
                    if y < @dragStart[1] 
                        start = [@dragStart[2] @dragStart[1]]
                    
                    if @state.select start [x y]
                        @redraw()
                    
            'release'
            
                delete @dragStart
                                    
        
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: dir mods =>
        
        steps = switch mods
            
            'shift'          ➜ 4
            'shift+ctrl'     ➜ 8
            'alt'            ➜ 16
            'shift+alt'      ➜ 32
            'ctrl+alt'       ➜ 64
            'shift+ctrl+alt' ➜ 128
            ➜ 1
        
        if @dragStart
            
            x = @state.s.cursor[0]
            y = @state.s.cursor[1]
            
            switch dir
                'up'    ➜ y -= steps    
                'down'  ➜ y += steps    
                'left'  ➜ x -= 1    
                'right' ➜ x += 1    
                
            y = clamp 0 @state.s.lines.length-1 y
            x = clamp 0 @state.s.lines[y].length-1 x
            
            start = [@dragStart[0] @dragStart[1]]
            
            if y < @dragStart[1] 
                start = [@dragStart[2] @dragStart[1]]
            
            if @state.select start [x y]
                @redraw()
            
            ⮐ 
                
        switch dir
            'up'        
            'down'      
            'left'      
            'right'     ➜ ⮐ @scrollView dir steps
    
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key => 
        
        switch key
            
            'up'        
            'down'      
            'left'      
            'right'                 ➜ ⮐ @moveCursor key
            
            'ctrl+up'               ➜ ⮐ @moveCursor 'up'    4
            'ctrl+down'             ➜ ⮐ @moveCursor 'down'  4
            'ctrl+left'             ➜ ⮐ @moveCursor 'left'  4
            'ctrl+right'            ➜ ⮐ @moveCursor 'right' 4
                   
            'ctrl+alt+up'           ➜ ⮐ @moveCursor 'up'    8
            'ctrl+alt+down'         ➜ ⮐ @moveCursor 'down'  8
            'ctrl+alt+left'         ➜ ⮐ @moveCursor 'left'  8
            'ctrl+alt+right'        ➜ ⮐ @moveCursor 'right' 8

            'shift+ctrl+alt+up'     ➜ ⮐ @moveCursor 'up'    16
            'shift+ctrl+alt+down'   ➜ ⮐ @moveCursor 'down'  16
            'shift+ctrl+alt+left'   ➜ ⮐ @moveCursor 'left'  16
            'shift+ctrl+alt+right'  ➜ ⮐ @moveCursor 'right' 16
            
            'ctrl+a'            ➜ ⮐ @setCursor 0 @state.s.cursor[1]
            'ctrl+e'            ➜ ⮐ @setCursor @state.s.lines[@state.s.cursor[1]].length @state.s.cursor[1]
            'ctrl+h'            ➜ ⮐ @setCursor 0 0
            'ctrl+j'            ➜ ⮐ @setCursor @state.s.lines[@state.s.lines.length-1].length @state.s.lines.length-1
            'shift+ctrl+h'      ➜ ⮐ @moveCursorAndSelect 'bof'
            'shift+ctrl+j'      ➜ ⮐ @moveCursorAndSelect 'eof'
            
            'ctrl+k'            ➜ ⮐ @delete 'eol'
            'delete'            ➜ ⮐ @delete 'back'
            'cmd+delete'        ➜ ⮐ @delete 'back' 'cmd'
            
            'alt+q'         
            'ctrl+d'         
            'ctrl+q'            ➜ ⮐ @t.quit()
                        
            'alt+c'
            'cmd+c'
            'ctrl+c'            ➜ ⮐ @copy()        

            'alt+x'
            'cmd+x'
            'ctrl+x'            ➜ ⮐ @cut()     
            
            'cmd+z'             ➜ ⮐ @undo()
            'cmd+y'
            'shift+cmd+z'       ➜ ⮐ @redo()
            
            'alt+v'
            'cmd+v'
            'ctrl+v'            ➜ ⮐ @paste()
            
            'cmd+j'             ➜ ⮐ @joinLines()
            
            'shift+up'          ➜ ⮐ @moveCursorAndSelect 'up'
            'shift+down'        ➜ ⮐ @moveCursorAndSelect 'down'
            'shift+left'        ➜ ⮐ @moveCursorAndSelect 'left'
            'shift+right'       ➜ ⮐ @moveCursorAndSelect 'right'
            'shift+cmd+right'   ➜ ⮐ @moveCursorAndSelect 'eol'
            'shift+cmd+left'    ➜ ⮐ @moveCursorAndSelect 'bol'
            
            'alt+r'
            'ctrl+r'
            'cmd+r'             ➜ ⮐ @reloadFile()
            
            'ctrl+s'
            'cmd+s'             ➜ ⮐ @saveFile()
            
            'esc'               ➜ @state.deselect(); @redraw(); ⮐ 
            
        @insert key
        
    onPaste: text =>
        
        # lf "onPaste #{text.length} >>>#{text}<<<" 
        @insert text
        
    onResize: cols rows => @redraw()
    
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: =>
        
        start = process.hrtime()
        
        @t.store()                
        @t.hideCursor()
        @cells.init()
        @gutter.draw()
        @scroll.draw()
        @status.draw()
        @draw.state @state
        @cells.render()
        @showCursorIfInView() 
        @t.restore()
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
                        
export KED.run

