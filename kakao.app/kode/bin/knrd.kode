###
    000   000  000   000  00000000   0000000    
    000  000   0000  000  000   000  000   000  
    0000000    000 0 000  0000000    000   000  
    000  000   000  0000  000   000  000   000  
    000   000  000   000  000   000  0000000    

    transpiles kode, styl and pug files
###

import Kode     from './kode/kompile.js'
import slash    from '../lib/kxk/slash.js'
import kolor    from '../lib/kxk/kolor.js'
import dirlist  from '../lib/kxk/dirlist.js'
import { pug, stylus } from '../../bin/min.mjs'

import fs   from 'fs/promises'
import path from 'path'

kolor.globalize()

dirname = path.dirname import.meta.url[7..] # todo: fix this!

knrd = (files = [], opt = {}) ‚óã->
              
    opt.rerunWhenDirty ?= true
    opt.logVerbose ?= false
    
    ‚óè üî®
    kode = new Kode
    
    kodeDir = slash.resolve dirname + '/../../kode'
    pugDir  = slash.resolve dirname + '/../../pug'
    jsDir   = slash.resolve dirname + '/../../js'
    cssDir  = slash.resolve dirname + '/../../js/css'
    
    if empty files
        
        list  = await dirlist kodeDir
        list  = list.concat await dirlist pugDir
        list  = list.filter (item) -> item.type == 'file'
        files = list.map (item) -> item.path
        
    log 'üî® ' files.length
    transpiled = 0
        
    for file in files
        
        switch slash.ext(file) 
            
            'kode'
                        
                kodeFile = file
                jsFile   = slash.swapExt kodeFile.replace(kodeDir, jsDir), 'js'
                
                kodeText = await fs.readFile kodeFile, encoding:'utf8'
                origText = await fs.readFile jsFile,   encoding:'utf8'
                
                # ‚óè‚ñ∏ üî®
                compText = kode.compile kodeText
                # ‚óè‚ñ™ üî®

                if empty compText
                    log y5('‚úò '), r5(err), r4('transpiles to empty!')
                else
                    if origText != compText
                        transpiled++
                        log b5('‚ñ∂ '), g5 slash.tilde kodeFile
                        await slash.write(jsFile, compText)
                        log b5('‚úî '), g5 slash.tilde jsFile
                    else if opt.logVerbose
                        log g2('‚úî '), g3 slash.tilde kodeFile
                
            'styl'
            
                stylFile = file
                cssFile  = slash.swapExt stylFile.replace(pugDir, cssDir), 'css'
                
                stylText = await fs.readFile stylFile, encoding:'utf8'
                origText = await fs.readFile cssFile,  encoding:'utf8'

                compText = stylus stylText
                
                if empty compText
                    log y5('‚úò '), r5(err), r4('transpiles to empty!')
                else
                    if origText != compText
                        transpiled++
                        log c3('‚ñ∂ '), c5 slash.tilde stylFile
                        await slash.write(cssFile, compText)
                        log b5('‚úî '), g5 slash.tilde cssFile
                    else if opt.logVerbose
                        log g2('‚úî '), c3 slash.tilde stylFile
                null
                    
            'pug'
            
                srcFile = file
                tgtFile = slash.swapExt srcFile.replace(pugDir, jsDir), 'html'
                
                srcText = await fs.readFile srcFile, encoding:'utf8'
                tgtText = await fs.readFile tgtFile, encoding:'utf8'
                
                compText = pug srcText
                    
                if empty compText
                    log y5('‚úò '), r5(srcFile), r4('transpiles to empty!')
                else
                    if tgtText != compText
                        transpiled++
                        log m3('‚ñ∂ '), m4 slash.tilde srcFile
                        await slash.write tgtFile, compText
                        log b5('‚úî '), g5 slash.tilde tgtFile
                    else if opt.logVerbose
                        log g2('‚úî '), m3 slash.tilde srcFile
                null
                
    if opt.rerunWhenDirty and transpiled
        
        knrd files, rerunWhenDirty:false
        
    else
                
        process.exit 0

export knrd
