###
 0000000  00000000  000      00000000   0000000  000000000    
000       000       000      000       000          000       
0000000   0000000   000      0000000   000          000       
     000  000       000      000       000          000       
0000000   00000000  0000000  00000000   0000000     000       
###

use ../../kxk ◆ kstr
use ../util ◆ util

export
    
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    select: from to ->
        
        selections = []
        
        @setCursor to[0] to[1]
        
        if from[1] > to[1] or from[1] == to[1] and from[0] > to[0]
            [from to] = [to from]

        to[1]   = clamp 0 @s.lines.length-1 to[1]
        from[1] = clamp 0 @s.lines.length-1 from[1]
            
        to[0]   = clamp 0 @s.lines[to[1]].length to[0]
        from[0] = clamp 0 @s.lines[from[1]].length from[0]
        
        selections.push [from[0] from[1] to[0] to[1]]
        
        @set 'selections' selections
        
    # 000   000  000   0000000   000   000  000      000   0000000   000   000  000000000  
    # 000   000  000  000        000   000  000      000  000        000   000     000     
    # 000000000  000  000  0000  000000000  000      000  000  0000  000000000     000     
    # 000   000  000  000   000  000   000  000      000  000   000  000   000     000     
    # 000   000  000   0000000   000   000  0000000  000   0000000   000   000     000     
    
    highlightSelectionOrWordAtCursor: ->
        
        if valid @s.highlights
        
        @selectWord @s.cursor if empty @s.selections
            
        ⮐ @ if not @isSingleLineSelected()
        
        @highlightText @textForSelection()
        
    highlightText: text ->
        
        # lfc "highlight >#{text}<"
        lines = @s.lines.asMutable()
        spans = util.lineSpansForText lines text
        # lfc 'spans' spans
        @set 'highlights' spans
        
    selectNextHighlight: ->
        
    #  0000000  000   000  000   000  000   000  000   000  
    # 000       000   000  000   000  0000  000  000  000   
    # 000       000000000  000   000  000 0 000  0000000    
    # 000       000   000  000   000  000  0000  000  000   
    #  0000000  000   000   0000000   000   000  000   000  
    
    selectChunk: x y ->
        
        [x y] = x if x is arr and empty y
        
        ⮐ if @isInvalidLineIndex y
        
        line = @s.lines[y]
        
        [rs re] = kstr.rangeOfClosestChunk line x
        if rs >= 0 and re >= 0
            @select [rs y] [re+1 y]
        @

    # 000   000   0000000   00000000   0000000    
    # 000 0 000  000   000  000   000  000   000  
    # 000000000  000   000  0000000    000   000  
    # 000   000  000   000  000   000  000   000  
    # 00     00   0000000   000   000  0000000    
    
    selectWord: x y ->
        
        [x y] = x if x is arr and empty y
        
        if range = util.rangeOfClosestWordToPos @s.lines [x y]
            @select range[0..1] range[2..3]
        @
        
    # 000      000  000   000  00000000  
    # 000      000  0000  000  000       
    # 000      000  000 0 000  0000000   
    # 000      000  000  0000  000       
    # 0000000  000  000   000  00000000  
    
    selectLine: y ->
        
        y ?= @s.cursor[1]
        if 0 <= y < @s.lines.length
            @select [0 y] [@s.lines[y].length y]
        @
        
    # 000000000  00000000  000   000  000000000  
    #    000     000        000 000      000     
    #    000     0000000     00000       000     
    #    000     000        000 000      000     
    #    000     00000000  000   000     000     
    
    textForSelection: -> util.textForLinesRanges @s.lines.asMutable() @s.selections.asMutable()

    isSingleLineSelected: ->
        
        @s.selections.length == 1 and @s.selections[0][1] == @s.selections[0][3]
        
    isSelectedLine: y ->
        
        for selection in @s.selections
            if selection[3] == y and selection[2] == 0
                continue
            if selection[1] <= y <= selection[3]
                ⮐ true
        false
        
    isHighlightedLine: y ->

        for highlight in @s.highlights
            ⮐ true if highlight[1] == y
                
        false

    isFullySelectedLine: y ->
        
        for selection in @s.selections
            if selection[3] == y and selection[2] == 0
                continue
            if selection[1] <= y <= selection[3]
                ⮐ util.isFullLineRange @s.lines.asMutable() selection
        false
        
    # 0000000    00000000   0000000  00000000  000      00000000   0000000  000000000  
    # 000   000  000       000       000       000      000       000          000     
    # 000   000  0000000   0000000   0000000   000      0000000   000          000     
    # 000   000  000            000  000       000      000       000          000     
    # 0000000    00000000  0000000   00000000  0000000  00000000   0000000     000     
    
    deselect: ->
        
        if valid @s.selections
            @set 'selections' []

        if valid @s.highlights
            @set 'highlights' []
            
            