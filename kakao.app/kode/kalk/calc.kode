###
 0000000   0000000   000       0000000
000       000   000  000      000     
000       000000000  000      000     
000       000   000  000      000     
 0000000  000   000  0000000   0000000
###

use ../kxk ▪ scooter kstr post
use ◆ text 

class Calc
    
    @activeKey: txt key ->
        
        
        clean = empty txt
        cOnst = text.endsWithConstant   txt
        value = text.endsWithValue      txt
        float = text.endsWithFloat      txt
        nuber = text.endsWithNumber     txt
        unfin = text.endsWithUnfinished txt
        open  = text.endsWithOpen       txt
        deg2rad = txt[-1] == symbol.deg2rad
        rad2deg = txt[-1] == symbol.rad2deg
        dot     = txt[-1] == symbol.dot
        
        # log 'activeKey' key, clean, unfin, dot
        
        switch key
            
            symbol.func, symbol.numbers     ➜ ⮐ true
            
            'π' 'ϕ' symbol.euler
            '1''2''3''4''5''6''7''8''9''0'  ➜ ⮐ not cOnst and not deg2rad and not dot
            
            'c' symbol.backspace            ➜ ⮐ not clean
            '='                             ➜ ⮐ not clean and not unfin
            
            'sin' 'cos' 'tan' 'atan' 'deg' 'rad' 'log' symbol.sqrt, symbol.exp

                ⮐ false if unfin
                ⮐ true
                
            symbol.pow        ➜ ⮐ not unfin and not dot and not clean
                
            symbol.rad2deg    ➜ ⮐ not unfin and not dot and not rad2deg
            symbol.deg2rad    ➜ ⮐ not unfin and not dot and not deg2rad
            symbol.oneoverx
            '∡' '°'           ➜ ⮐ not unfin and not clean and txt[-1] != '°' #or txt[-1] == ')'            
            '+' '-'           ➜ ⮐ not text.endsWith txt, ['+' '-' '.' '/' '*']
            '/' '*'           ➜ ⮐ not clean and not text.endsWith txt, ['+' '-' '.' '/' '*']
            '.'               ➜ ⮐ text.endsWithNumber(txt) and not text.endsWithFloat(txt)
            '('               ➜ ⮐ if not text.endsWithUnfinished(txt) and not text.endsWithConstant(txt)
            ')'               ➜ ⮐ not text.endsWithUnfinished(txt) and text.balance(txt) > 0
            ➜
                if key in text.unfinished
                    ⮐ not empty txt and not text.endsWithUnfinished(txt)
                    
        false

    @calc: expr ->
        
        ⮐ '' if empty expr
        
        expr = text.close expr
        expr = trim expr, ' \n'
        
        val = scooter expr
                
        post?.emit 'sheet' text:expr, val:val
        
        val
                
    @textKey: txt key ->
        
        ⮐ txt if not @activeKey txt, key
             
        clean = empty txt
        cOnst = text.endsWithConstant txt
        value = text.endsWithValue txt
        float = text.endsWithFloat txt
        nuber = text.endsWithNumber txt
        
        switch key
                        
            'sin' 'cos' 'tan' 'atan' symbol.sqrt, 'deg' 'rad' 'log'

                if not empty(txt) and text.endsWithValue(txt) 
                    txt = @calc key + '(' + txt
                else if not text.endsWith(txt, ['.'])
                    txt += key + '('
                    
            symbol.exp        ➜ if clean or text.endsWithOp(txt) ➜ txt += key+'^' else if float or cOnst or nuber txt = @calc 'exp(' + txt + ')'
            '°'               ➜ txt += key if text.endsWithNumber(txt)
            '='               ➜ txt = @calc txt
            symbol.oneoverx   ➜ txt = @calc '1/(' + txt + ')'
            '∡'               ➜ txt = @calc '∡(' + txt + ')'
            '+' '-'           ➜ txt += key if not text.endsWith txt, ['+' '-' '.']
            '.'               ➜ txt += key if text.endsWithNumber(txt) and not text.endsWithFloat(txt)
            'π', symbol.euler ➜ txt += key if not text.endsWithConstant(txt)
            '('               ➜ txt += key if not text.endsWithUnfinished(txt) and not text.endsWithConstant(txt)
            ')'               ➜ txt += key if not text.endsWithUnfinished(txt) and text.balance(txt) > 0
            ➜
                if key in text.unfinished
                    if not empty txt
                        if not text.endsWithUnfinished(txt)
                            txt += key
                else if not text.endsWithConstant(txt)
                    txt = text.removeZeroInfinity(txt) + key
                    
        # log 'txtKey' txt, key
        txt
        
export Calc
