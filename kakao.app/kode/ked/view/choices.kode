###
 0000000  000   000   0000000   000   0000000  00000000   0000000
000       000   000  000   000  000  000       000       000
000       000000000  000   000  000  000       0000000   0000000
000       000   000  000   000  000  000       000            000
 0000000  000   000   0000000   000   0000000  00000000  0000000
###

use ../../kxk ▪ kstr kseg slash krzl
use ..        ◆ editor theme

function choices extends editor

    @: screen name features=[] ->

        super screen name ['scrllr'].concat(features)
        
        @items = []
        @fuzzied = @items
        @filterText = ''
        
    set: @items @key ->
        
        @items ?= []
        @fuzzied = @items
        @filterText = ''
        
        lines = @key ? @items.map(@extract) : @items
        
        @state.loadLines lines

    numChoices:  -> @items.length
    numFiltered: -> @fuzzied.length

    current:    -> @fuzzied[@state.mainCursor()[1]]
    
    hasNext:    -> @state.mainCursor()[1] < @numFiltered()-1
    hasPrev:    -> @state.mainCursor()[1] > 0
    selectNext: -> @state.selectNextLine() ; @frontCursor()
    selectPrev: -> @state.selectPrevLine() ; @frontCursor()
    
    frontCursor: -> 
        
        @state.setMainCursor 0 @state.mainCursor()[1]
    
    extract: item => @key and item is obj ? item[@key] : kseg.str(item)        
        
    weight: item text =>

        itemText = @extract item
        p = slash.parse itemText
        
        matchOrLevenshtein = t -> 
            idx = t.indexOf text
            if idx < 0
                idx = t.length + kstr.levensthein(t text)
            idx

        w  = @items.indexOf(item)               # try to keep order of original items
        w += 10 * matchOrLevenshtein(p.name)    # high focus on file name
        w += 5  * matchOrLevenshtein(p.dir)     # lesser focus on dir
        w += valid p.ext ? (0.1 * matchOrLevenshtein(p.ext)) : 4 # low weight for extensions
                                                                 # has the side-effect of moving directories down
        w

    filter: text =>
        
        # lf 'choices.filter' text @items

        ⮐ if empty @items

        ⮐ if text == @filterText
        
        ⮐ @set(@items @key) if empty text
            
        @filterText = text
            
        fuzz = new krzl values:@items extract:@extract
        
        @fuzzied = fuzz.filter text

        @fuzzied.sort (a b) => @weight(a text) - @weight(b text)
        
        lines = @fuzzied.map @extract

        lines = [''] if empty lines
        
        # lf 'choices.filter lines' lines

        @state.loadLines lines
        
    onKey: key event =>
        
        super key event
        
export choices
