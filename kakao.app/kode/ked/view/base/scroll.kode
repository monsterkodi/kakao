###
     ███████   ███████  ████████    ███████   ███      ███      
    ███       ███       ███   ███  ███   ███  ███      ███      
    ███████   ███       ███████    ███   ███  ███      ███      
         ███  ███       ███   ███  ███   ███  ███      ███      
    ███████    ███████  ███   ███   ███████   ███████  ███████  

    scrolls a view
    used by any multiline editor
###

use ../../../kxk ▪ post
use ../../theme  ◆ theme
use ../../util   ◆ squares
use              ◆ view

{pow} = Math

function scroll extends view

    @: screen @state @side='left' -> 
    
        super screen @state.owner() + '_scroll'
        
        @pointerType = 'pointer'
        
        @setColor 'bg'       theme.gutter.bg
        @setColor 'dot'      theme.scroll.dot
        @setColor 'knob'     theme.scroll.bg
        @setColor 'hover',
            dot:  theme.scroll.doth
            knob: theme.scroll.knob
            
        @handle = @side == 'right' ? '▐' : '▌' 
            
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        [col row] = @eventPos event
        
        super event
        
        switch event.type
            
            'press'
            
                if @hover
                    @doDrag = true
                    post.emit 'pointer''grabbing' 
                    ⮐  @scrollToPixel event.pixel
                    
            'drag'
            
                if @doDrag
                    @hover = true
                    post.emit 'pointer''grab' 
                    ⮐  @scrollToPixel event.pixel
                    
                @hover = false
                
            'release'
            
                if @doDrag
                    post.emit 'pointer''pointer' if @hover
                    delete @doDrag 
                    ⮐  true
        @hover
        
    isActive: ->
        
        @state.s.lines.length > @cells.rows
        
    #  0000000   0000000  00000000    0000000   000      000      000000000   0000000   
    # 000       000       000   000  000   000  000      000         000     000   000  
    # 0000000   000       0000000    000   000  000      000         000     000   000  
    #      000  000       000   000  000   000  000      000         000     000   000  
    # 0000000    0000000  000   000   0000000   0000000  0000000     000      0000000   
    
    scrollToPixel: pixel =>
    
        csz = @screen.t.cellsz
        ⮐  if empty csz
        view = @state.s.view.asMutable()
        
        pixelsPerRow = clamp 0 csz[1] csz[1] * @cells.rows / @state.s.lines.length
        
        view[1] = int (pixel[1] - @cells.y * @cells.screen.t.cellsz[1]) / pixelsPerRow
        
        maxY = @state.s.lines.length - @cells.rows
        
        view[1] = min maxY view[1] if maxY > 0
        view[1] = max 0 view[1]
        
        ⮐  true if view eql @state.s.view
        
        @state.setView view 
        
        redraw:true
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: =>
        
        rows = @cells.rows
        lnum = @state.s.lines.length
        
        kh = int floor(pow((rows) 2) / lnum)
        kp = int floor((rows-kh-1) * @state.s.view[1] / (lnum-rows))
        nc = int floor((rows-1)    * @state.s.view[1] / (lnum-rows))
        ns = kp
        ne = kp+kh
        
        for row in 0...rows

            fg = @color.bg

            if       
                lnum < rows     ➜
                row == nc       ➜ fg = @hover ? @color.hover.dot  : @color.dot
                ns <= row <= ne ➜ fg = @hover ? @color.hover.knob : @color.knob
            
            @cells.set 0 row @handle fg @color.bg

export scroll
