#  ███████  ███       ███████   ███████
# ███       ███      ███       ███     
# ███       ███      ███████   ███████ 
# ███       ███           ███       ███
#  ███████  ███████  ███████   ███████ 

use pars

type NodeIt = proc(node:Node):Node

traverse = ◇Node n ◇NodeIt iter ➜ Node -> 

    ⮐  if n == nil
    
    template trav(arg:Node) = 
        arg = traverse arg iter

    template trvl(arg:seq[Node]) = 
        for i e in arg
            arg.splice i 1 @[traverse(e iter)]
    
    n = n
    switch n.kind
        ●literal
            n = iter n
        ●block
            trvl n.expressions
        ●string
            trvl n.string_stripols
        ●stripol
            trvl n.stripol_xprssns
        ●operation
            trav n.operand_left
            trav n.operand_right
        ●preOp
        ●postOp
            trav n.operand
        ●call
            trav n.callee
            trvl n.call_args
        ●for
            trav n.for_body 
            trav n.for_range
        ●if
            trvl n.cond_thens
            trav n.else_branch
        ●condThen
            trav n.condition
            trav n.then_branch
        ●switch
            trav n.switch_value
            trvl n.switch_cases
            trav n.switch_default
        ●switchCase
            trvl n.case_when
            trav n.case_then
        ●propertyAccess
            trav n.owner
        ●arrayAccess
            trav n.array_owner
            trav n.array_index
        ●return
            trav n.return_value
        ●discard
            trav n.discard_value
        ●while
            trav n.while_cond
            trav n.while_body
        ●range
            trav n.range_start
            trav n.range_end  
        ●member
            trav n.member_value
        ●let
            trav n.let_expr
        ●list
        ●curly
        ●squarely
            trvl n.list_values
        ●func
            trav n.func_body
        ➜ 
            # log "clss.traverse -- unhandled #{n.kind}"
            discard
    n
    
methodify = ◇Node clss ➜ seq[Node] ->
    
    isMethod = ◇Node it ➜bool -> it.kind == ●member and it.member_value.kind == ●func
    
    (funcs members) = pullIf(clss.class_body.expressions isMethod)

    strugt     = clss.kind == ●struct
    exporting  = false
    className  = clss.class_name.token.str
    if className[^1] == '*'
        className = className[0..^2]
        exporting = true
    
    thisify = ◇Node n ➜ Node ->
    
        if n.token.tok == ◂name
            if n.token.str[0] == '@' 
                if n.token.str.len > 1
                    owner    = nod ●literal tkn(◂name "this")
                    property = nod ●literal tkn(◂name n.token.str[1..^1])
                    ⮐  nod ●propertyAccess  tkn(◂dot  "." n.token.line n.token.col) owner property
                else
                    n.token.str = "this"
        n

    constructor = ◇Node fn ➜Node ->
    
        fn.operand_left.token.str = "init"
        fn.operand_right.func_signature.sig_type = nod(●type    tkn(◂name className))
        if fn.operand_right.func_body
            line = fn.operand_right.func_body.expressions[^1].token.line
            fn.operand_right.func_body.expressions.add nod(●literal tkn(◂name "this" line+1))
        else
            fn.operand_right.func_body = nod(●literal tkn(◂name "this"))
        fn
        
    superize = ◇Node fn ->
    
        if fn.func_body and fn.func_body.kind == ●block
            for i e in fn.func_body.expressions
                if e.kind == ●call and e.token.str == "super"
                    e.call_args.unshift Node(kind:●call token:tkn(◂name) callee:nod(●literal tkn(◂name clss.class_parent.token.str)) call_args:[nod(●literal tkn(◂name "this"))])
                    initcall = Node(kind:●call token:tkn(◂name) callee:nod(●literal tkn(◂name "init")) call_args:e.call_args)
                    fn.func_body.expressions[i] = nod(●discard tkn(◂discard) nod(●preOp tkn(◂name "procCall ") initcall))
    
    funkify = ◇Node it ➜ Node -> 
    
        token = tkn(◂assign it.token.line it.token.col)
        funcn = it.member_value
                
        valType  = if strugt ➜ ◂var_type ➜ ◂val_type
        arg_type = nod ●type    tkn(valType className)
        arg_name = nod ●literal tkn(◂name "this")
        this_arg = nod ●arg     tkn(valType) arg_type arg_name
        if funcn.func_signature
            funcn.func_signature.sig_args.list_values.unshift this_arg
        else
            sig_args = nod ●list tkn(◂square_open) @[this_arg]
            funcn.func_signature = nod ●signature token sig_args nil
        
        if funcn.token.tok == ◂method
            if not clss.class_parent
                funcn.func_mod = nod ●literal tkn(◂mod "{.base.}")
            
        funcn.func_body = traverse funcn.func_body thisify
        
        superize funcn
        
        fn = nod ●operation token it.member_key funcn
        if it.member_key.token.str == "@" ➜ fn = constructor fn
        if exporting
            if it.member_key.token.str[^1] != '*'
                it.member_key.token.str &= "*"
        fn
        
    publicify = ◇Node it ➜ Node ->
    
        if exporting
            switch it.kind 
                ●member
                    if it.member_key.token.str[^1] != '*' 
                        it.member_key.token.str &= "*"
                ●switch
                    if it.switch_value.kind == ●member
                        if it.switch_value.member_key.token.str[^1] != '*'
                            it.switch_value.member_key.token.str &= "*"
                    for switchCase in it.switch_cases
                        if switchCase.case_then.kind == ●block
                            for thenExpr in switchCase.case_then.expressions
                                if thenExpr.kind == ●member
                                    if thenExpr.member_key.token.str[^1] != '*'
                                        thenExpr.member_key.token.str &= "*"
                        elif switchCase.case_then.kind == ●member
                            thenExpr = switchCase.case_then
                            if thenExpr.member_key.token.str[^1] != '*'
                                thenExpr.member_key.token.str &= "*"
                ➜ discard
        it

    clss.class_body.expressions = members.map publicify 
    methods = funcs.map funkify
    
    methods

classify* = ◇Node body ➜Node ->

    if body == nil or body.kind != ●block or body.expressions.len == 0
        ⮐  body 
        
    for i in countdown(body.expressions.high, 0)
        e = body.expressions[i]
        if e.kind in {●class ●struct}
            methods = methodify e
            body.expressions.insert methods i+1
    body
    