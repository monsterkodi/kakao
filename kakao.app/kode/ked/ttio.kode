
use ../kxk ◆ events

function TTIO extends events

    @: ->
        
        if process.stdin.isTTY ➜ process.stdin.setRawMode true

        @write '\x1b[?1000h' # mouse events
        @write '\x1b[?1001h' # highlight tracking
        @write '\x1b[?1003h' # mouse move events
        @write '\x1b[?1004h' # focus
        @write '\x1b[?1006h' # mouse SGR mode
        @write '\x1b[>4;2m'  # modify other keys
        
        process.stdout.on 'resize' @onResize
        process.stdin.on  'data'   @onData
        
    write: str => process.stdout.write str
    
    clear: =>
        @write '\x1b[2J' # clear screen
        @write '\x1b[H'  # cursor home
        
    cols: => process.stdout.columns
    rows: => process.stdout.rows
    
    moveCursor: dir => 
        
        switch dir
            'up'    ➜ ⮐ @write '\x1b[A'
            'down'  ➜ ⮐ @write '\x1b[B'
            'left'  ➜ ⮐ @write '\x1b[D'
            'right' ➜ ⮐ @write '\x1b[C'
        
    onResize: => @emit 'resize' @cols() @rows()
        
    onData: data =>
        
        if data[0] == 0x1b
            seq = data[1..].toString 'utf8'
            
            if seq.startsWith '[<'
                [code col row] = seq[2..-2].split(';').map (s) -> parseInt s
                if seq.endsWith 'M'
                    switch code
                        0  ➜ ⮐ @emit 'mouse' 'press' col row 'left' 
                        2  ➜ ⮐ @emit 'mouse' 'press' col row 'right'
                        32 ➜ ⮐ @emit 'mouse' 'drag'  col row 'left'  
                        34 ➜ ⮐ @emit 'mouse' 'drag'  col row 'right' 
                        35 ➜ ⮐ @emit 'mouse' 'move'  col row ''
                        64 ➜ ⮐ @emit 'wheel' 'up'   
                        65 ➜ ⮐ @emit 'wheel' 'down' 
                        66 ➜ ⮐ @emit 'wheel' 'left' 
                        67 ➜ ⮐ @emit 'wheel' 'right'
                    log 'mouse press?' seq
                    ⮐ 
                else if seq.endsWith 'm'
                    switch code
                        0  ➜ ⮐ @emit 'mouse' 'release' col row 'left'
                        2  ➜ ⮐ @emit 'mouse' 'release' col row 'right'
                    log 'mouse release?' seq
                    ⮐ 
            else if seq.startsWith '['
                switch seq[1]
                    'O' ➜ ⮐ @emit 'blur'
                    'I' ➜ ⮐ @emit 'focus'
                    'A' ➜ ⮐ @emit 'key' 'up'    
                    'B' ➜ ⮐ @emit 'key' 'down'  
                    'D' ➜ ⮐ @emit 'key' 'left'  
                    'C' ➜ ⮐ @emit 'key' 'right' 
                log 'DATA' data, seq
                ⮐ 
            else if data.length == 1
                ⮐ emit 'key' 'esc'  
            else
                log 'seq?' seq, data
        else
            switch data[0]
                0x01 ➜ ⮐ @emit 'key' 'ctrl+a'
                0x03 ➜ ⮐ @emit 'key' 'ctrl+c'
                0x05 ➜ ⮐ @emit 'key' 'ctrl+e'
                0x11 ➜ ⮐ @emit 'key' 'ctrl+q'
                0x08 ➜ ⮐ @emit 'key' 'ctrl+h'
                0x0b ➜ ⮐ @emit 'key' 'ctrl+k' 
                0x0d ➜ ⮐ @emit 'key' 'return' 
                0x7f ➜ ⮐ @emit 'key' 'delete' 
                0x20 ➜ ⮐ @emit 'key' 'space'
                0x09 ➜ ⮐ @emit 'key' 'tab'
                
            key = data.toString 'utf8'
                
            if key and data[0] >= 0x21
                @emit 'key' key
            else
                log 'key>' key, data, data.length, data[0]
                
export TTIO
