
use ../rndr
    
template t(a:string, b:string) = testCmp(a, render(a, true), b, instantiationInfo())

▸ class

    ▸ simple
    
        t "class A"  "type A = ref object"
        
    ▸ members
    
        t "class ABC\n a:int\n b:int\n c:int"            , "type ABC = ref object\n a: int\n b: int\n c: int"
        
        t   """
            class Tknzr
                tokens      : seq[Token]
                openStack   : seq[tok]
                token       : Token
                inStripol   : bool
                delimiter   : string
                segi        : int
                segs        : seq[string]
                line        : int
            """ """
            type Tknzr = ref object
                tokens: seq[Token]
                openStack: seq[tok]
                token: Token
                inStripol: bool
                delimiter: string
                segi: int
                segs: seq[string]
                line: int"""
                
    ▸ methods
    
        t   """
            class A
                m : int
                fun: -> 
                    m = 1
                inc: ◇int a1 ➜int ->
                    a1 + 1
            """ """
            type A = ref object
                m: int
            proc fun(this : A) = 
                    var m = 1
            proc inc(this : A, a1 : int) : int = 
                    (a1 + 1)"""

    ▸ this vars
    
        t   """
            class A
                m : int
                fun: -> 
                    @m = 1
            """ """
            type A = ref object
                m: int
            proc fun(this : A) = 
                    this.m = 1"""
        
        t   """
            class A
                m : int
                sqr: -> 
                    @m = @m * @m
                inc: ◇int a1 ➜int ->
                    @sqr() + @inc(@m)
            """ """
            type A = ref object
                m: int
            proc sqr(this : A) = 
                    this.m = (this.m * this.m)
            proc inc(this : A, a1 : int) : int = 
                    (this.sqr() + this.inc(this.m))"""
                    
        t   """
            class A*
                m : int
                n : int
                o : int
                loop: ->
                    if @m < @n.len
                        ⮐  @o[@m]
                    for i in @m
                        switch @m
                            @m ➜ @m
                            @n ➜ @n
                               ➜ @o
                    if @m ➜ @n ➜ @o
                    if @m
                        @n
                    else
                        @o
            """ """
            type A* = ref object
                m: int
                n: int
                o: int
            proc loop(this : A) = 
                    if (this.m < this.n.len): 
                        return this.o[this.m]
                    for i in this.m: 
                        case this.m:
                            of this.m: this.m
                            of this.n: this.n
                            else: this.o
                    if this.m: this.n else: this.o
                    if this.m: 
                        this.n
                    else: 
                        this.o"""
                                
        