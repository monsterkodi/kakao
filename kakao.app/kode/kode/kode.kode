###
000   000   0000000   0000000    00000000
000  000   000   000  000   000  000
0000000    000   000  000   000  0000000
000  000   000   000  000   000  000
000   000   0000000   0000000    00000000
###

use ../kxk ◆ fs slash karg
use ◆ lexer print parser scoper stripol returner operator renderer
use vm

class Kode

    @: (@args) ->
        
        @args ?= {}
        @args.header ?= true
        @version  = '0.2.0'

        @literals = ['bool''num''regex''single''double''triple']
        @atoms    = @literals.concat ['var']

        @lexer    = new lexer    @
        @parser   = new parser   @
        @scoper   = new scoper   @
        @stripol  = new stripol  @
        @returner = new returner @
        @operator = new operator @
        @renderer = new renderer @

    # 00000000  000   000   0000000   000
    # 000       000   000  000   000  000
    # 0000000    000 000   000000000  000
    # 000          000     000   000  000
    # 00000000      0      000   000  0000000

    eval: (text, file, glob) ->

        ⮐ if empty text

        sandbox = vm.createContext()
        if glob then sandbox[k] = v for k,v of glob

        sandbox.__filename = file ? 'eval'
        sandbox.__dirname  = slash.dir sandbox.__filename
        sandbox.console    = console
        sandbox.process    = process
        sandbox.global     = global

        try
            js = @compile text, file
            vm.runInContext js, sandbox
        catch err
            error err
            throw err
        
    ###
     0000000   0000000   00     00  00000000   000  000      00000000
    000       000   000  000   000  000   000  000  000      000
    000       000   000  000000000  00000000   000  000      0000000
    000       000   000  000 0 000  000        000  000      000
     0000000   0000000   000   000  000        000  0000000  00000000
     
    converts a string of kode into a string of javascript
    ###

    @compile: (text, opt={}) -> (new Kode opt).compile text
    
    compile: (text, file) ->

        return '' if empty trim text

        @renderer.render @ast(text), file
        
    #  0000000    0000000  000000000  
    # 000   000  000          000     
    # 000000000  0000000      000     
    # 000   000       000     000     
    # 000   000  0000000      000     
    
    # converts a string of kode into an abstract syntax tree
    
    ast: (text) ->
        
        tokens = @lexer.tokenize text
        blocks = @lexer.blockify tokens

        ast = @parser.parse  blocks # convert blocked token tree to abstract syntax tree
        ast = @stripol.collect  ast # handle string interpolation content
        ast = @scoper.collect   ast # collect variables in scopes
        ast = @returner.collect ast # insert return statements for last expressions in blocks
        ast = @operator.collect ast # sort operation chains by precedence

    astr: (text, scopes) -> print.astr @ast(text), scopes
    
    #  0000000  000      000
    # 000       000      000
    # 000       000      000
    # 000       000      000
    #  0000000  0000000  000

    cli: ○->

        if @args.compile
            log @compile @args.compile
            return
            
        if @args.eval
            log @eval @args.eval, 'eval' global
            return
            
        for file in @args.files

            file = slash.path file
            log gray file if @args.verbose

            text =○ fs.read file

            if empty text then error Y4 r2 "can't read #{R3 y5 file}"; continue

            if
                @args.outdir
                                js  = @compile text, file
                                out = slash.swapExt slash.path(@args.outdir, slash.file file), 'js'
                                log out if @args.verbose
                                if not ○ fs.write out, js then error R2 y3 "can't write #{R3 y6 out}"
                @args.js    ➜   log @compile text, file
                @args.run   ➜   log @eval text, file, global
                            ➜   log @compile text, file
                
export Kode

◆main    
    args = karg """
        kode
            files       **
            eval        evaluate a string and print the result
            compile     transpile a string and print the result
            outdir      transpile files into output directory
            run         execute files                               = true
            js          print transpiled js code                    = false
            header      prepend output with version header          = false -H
            verbose     log more                                    = false
            debug       debug output                                = false
        """
        
    # log 'args' args if args.verbose
    kode = new Kode args
    kode.cli()
    
