###
000000000  00000000  000   000  000000000
   000     000        000 000      000   
   000     0000000     00000       000   
   000     000        000 000      000   
   000     00000000  000   000     000   
###

use ../../../kxk ▪ kstr kutil kseg 
use ../../../kxk ◆ salter pepe
use              ◆ belt

function text

    @linesForText: text -> 
        
        kstr.lines text.replace(/\x1b/g '�')
        
    @joinLines: lines join='\n'->
        
        if lines is str
            lines = kstr.lines lines
        lines.join join
        
    @seglsForText: text ->

        kseg.segls text.replace(/\x1b/g '�')
        
    @seglsForLineRange: lines rng ->
        
        ⮐ '' if empty lines or empty rng
        
        l = []
        
        for y in rng[1]..rng[3]
            continue if @isInvalidLineIndex lines y
            if
                y == rng[1]
                    if 
                        y == rng[3] ➜ l.push lines[y][rng[0]...rng[2]]
                                    ➜ l.push lines[y][rng[0]..]
                y == rng[3] ➜ l.push lines[y][0...rng[2]]
                            ➜ l.push lines[y]
                            
            l.push '\n' if y < rng[3]
        
        l
        
    @segsForLineSpan: lines span ->
        
        l = []
        ⮐ l if empty lines or empty span
        y = span[1]
        ⮐ l if @isInvalidLineIndex lines y
        lines[y][span[0]...span[2]]
        
    @segsForPositions: lines posl ->
        
        l = []
        ⮐ l if empty lines or empty posl
        for pos in posl
            ⮐ l if @isInvalidLineIndex lines pos[1]
            segi = kseg.segiAtWidth lines[pos[1]] pos[0]
            l.push lines[pos[1]][segi]
        l

    @textForLineRange: lines rng ->
         
        ⮐ '' if empty lines or empty rng
         
        l = []
         
        for y in rng[1]..rng[3]
            continue if @isInvalidLineIndex lines y
            if
                y == rng[1]
                    if 
                        y == rng[3] ➜ l.push lines[y][rng[0]...rng[2]]
                                    ➜ l.push lines[y][rng[0]..]
                y == rng[3] ➜ l.push lines[y][0...rng[2]]
                            ➜ l.push lines[y]
         
        s = kseg.str l
        s
        
    @textForLineRanges: lines rngs ->
        
        ⮐ '' if empty lines
        
        text = ''
        for rng in rngs
            text += @textForLineRange lines rng
            text += '\n'
        text[0...-1]
                
    @lineSpansForText: lines text ->
        
        spans = []
        
        for line,y in lines
            line = kseg.str line
            x2 = 0
            while true
                x1 = line.indexOf text x2
                break if x1 < 0
                x2 = x1+text.length
                spans.push [x1 y x2]
        
        spans
        
    @textFromBolToPos: lines pos -> lines[pos[1]][0...pos[0]]
    @textFromPosToEol: lines pos -> lines[pos[1]][pos[0]..]
    
    @isOnlyWhitespace: text -> /^\s+$/.test kseg.str(text)
    
    # 000  000   000  0000000    00000000  000   000  000000000  
    # 000  0000  000  000   000  000       0000  000     000     
    # 000  000 0 000  000   000  0000000   000 0 000     000     
    # 000  000  0000  000   000  000       000  0000     000     
    # 000  000   000  0000000    00000000  000   000     000     
    
    @numIndent: segs -> kseg.numIndent segs
        
    @splitLineIndent: str -> kseg.splitAtIndent str
        
    @numIndentOfLines: lines ->
        
        for line in lines
            continue if empty trim line
            ⮐ @numIndent line
        0
        
    @lineIndentAtPos: lines pos -> 

        @numIndent lines[pos[1]]
        
    @indentLines: lines num=4 ->
        
        lines.map (l) -> lpad(num).split('').concat l
        
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    @seglRangeAtPos: segls pos ->

        [0 pos[1] segls[pos[1]].length pos[1]]
        
    @lineRangeAtPos: lines pos ->

        [0 pos[1] kseg.width(lines[pos[1]]) pos[1]]

    @lineRangesForPositions: lines posl append->
        
        rngs = @lineIndicesForPositions(posl).map (y) -> lines[y].length ? [0 y lines[y].length y] : [0 y 0 y+1]
        if valid rngs and append
            rngs[-1][2]  = 0 
            rngs[-1][3] += 1
        rngs        
                    
    @numFullLinesInRange: lines rng ->
        
        d = rng[3] - rng[1]
        
        if d == 0 
            ⮐ rng[0] == 0 and rng[2] == lines[rng[1]].length ? 1 : 0
        
        n = 0
        n += 1   if rng[0] == 0 
        n += d-2 if d > 1
        n += 1   if rng[2] == lines[rng[3]].length
        n
        
    @numLinesInRange: rng -> rng[3] - rng[1] + 1
    
    @isEmptyLineAtPos: lines pos -> lines[pos[1]].length <= 0
        
    @lineRangesInRange: lines rng ->
        
        rngs = []
        for ln in 0...@numLinesInRange(rng)
            rngs.push @lineRangeAtPos(lines [0 rng[1]+ln])
        rngs
        
    @seglsForRange: lines rng ->

        nl = @numLinesInRange rng
        
        if nl == 1
            bos = kseg.segiAtWidth lines[rng[1]] rng[0]
            eos = kseg.segiAtWidth lines[rng[1]] rng[2]
            ⮐ [lines[rng[1]][bos...eos]]
        
        firstLineIndex = min rng[1] lines.length-1
        lastLineIndex  = min rng[3] lines.length-1

        segi = kseg.segiAtWidth lines[firstLineIndex] rng[0]
        lns = [lines[firstLineIndex][segi..]]
        lns = lns.concat lines[firstLineIndex+1...lastLineIndex] if nl > 2
        segi = kseg.indexAtWidth lines[lastLineIndex] rng[2]
        lns = lns.concat [lines[lastLineIndex][0...segi]]
                
    @indexOfLongestLine: lines ->
        
        maxIndex = 0
        maxLength = 0
        for line,index in lines
            w = kseg.width line
            if w > maxLength
                maxLength = w
                maxIndex  = index
        maxIndex

    @widthOfLines: lines -> 
    
        kseg.width lines[@indexOfLongestLine(lines)]
        
    @widthOfLinesIncludingColorBubbles: lines ->
    
        maxWidth = 0
        for line in lines
            w = kseg.width line
            if line.indexOf('#') >= 0
                w += 4
            if w > maxWidth
                maxWidth = w 
        maxWidth

    #  0000000  00000000   000      000  000000000  
    # 000       000   000  000      000     000     
    # 0000000   00000000   000      000     000     
    #      000  000        000      000     000     
    # 0000000   000        0000000  000     000   
    
    @beforeAndAfterForPos: lines pos ->
        
        line = lines[pos[1]]
        before = line[0...pos[0]]
        after  = line[pos[0]..]
        [before after]
    
    @joinLineColumns: lineCols ->
        ▴ lineCols[i].length == lineCols[i+1].length for i in 0...lineCols.length-1
        numLines = lineCols[0].length
        numCols  = lineCols.length
        lines = []
        for lidx in 0...numLines
            line = ''
            for cidx in 0...numCols
                line += lineCols[cidx][lidx]
            lines.push line
        lines
    
    @splitTextAtCols: text cols -> 
        
        spans = []
        for col,idx in cols
            prv = idx > 0 ? cols[idx-1] : 0
            spans.push text[prv...col]
        spans.push text[col..]
        spans
    
    @splitLinesAtCols: lines cols ->

        cls = []
        for i in 0..cols.length
            cls.push []
        
        for line in lines 
            spans = @splitTextAtCols line cols
            for span,idx in spans
                cls[idx].push span
        cls
    
    @splitLineRange: lines rng includeEmpty=true -> # split multi-line-range into list of single-line-ranges
        
        nl = @numLinesInRange rng 
        ⮐ [rng] if nl == 1
        
        split = []
        
        split.push [rng[0] rng[1] kseg.width(lines[rng[1]]) rng[1]]
        
        if nl > 2
            for i in 1..nl-2
                split.push [0 rng[1]+i kseg.width(lines[rng[1]+i]) rng[1]+i]
        
        split.push [0 rng[3] rng[2] rng[3]] if includeEmpty or rng[2] > 0

        split
                            
    @splitLineRanges: lines rngs includeEmpty=true -> # split list of multi-line-ranges into list of single-line-ranges
        
        split = []        
        for rng in rngs
            split = split.concat @splitLineRange(lines rng includeEmpty)
        split
        
    @isLinesPosInside:  lines pos -> pos[1] < lines.length and 0 <= pos[0] <= kseg.width(lines[pos[1]])
    @isLinesPosOutside: lines pos -> not @isLinesPosInside lines pos 
    
    @isValidLineIndex:   lines li -> 0 <= li < lines.length
    @isInvalidLineIndex: lines li -> not @isValidLineIndex lines li
    
    @isMultiLineRange: lines rng -> rng[1] != rng[3]
        
    @isFullLineRange: lines rng -> (0 <= rng[1] <= rng[3] < lines.length) and (rng[0] == 0) and (rng[2] >= lines[rng[3]].length or rng[2] == 0 and rng[1] < rng[3])
    
    @isSpanLineRange: lines rng -> (0 <= rng[1] == rng[3] < lines.length) and (rng[0] > 0 or rng[2] < lines[rng[1]].length)
        
    @rangeOfLine: lines y -> [0 y kseg.width(lines[y]) y]
    
    #  0000000  000   000  000   000  000   000  000   000  
    # 000       000   000  000   000  0000  000  000  000   
    # 000       000000000  000   000  000 0 000  0000000    
    # 000       000   000  000   000  000  0000  000  000   
    #  0000000  000   000   0000000   000   000  000   000  
    
    @rangeOfClosestChunkToPos: lines pos ->
        
        [x y] = pos
        
        ⮐ if @isInvalidLineIndex lines y
         
        if r = kstr.rangeOfClosestChunk lines[y] x
            if 0 <= r[0] < r[1]
                ⮐ [r[0] y r[1] y]
                
    @rangeOfClosestChunkLeftToPos: lines pos ->
        
        [x y] = pos
        
        ⮐ if @isInvalidLineIndex lines y
        
        if r = kstr.rangeOfClosestChunk lines[y][0...x] x
            if 0 <= r[0] < r[1]
                ⮐ [r[0] y r[1] y]

    @rangeOfClosestChunkRightToPos: lines pos ->
        
        [x y] = pos
        
        ⮐ if @isInvalidLineIndex lines y
        
        if r = kstr.rangeOfClosestChunk lines[y][x..] x
            if 0 <= r[0] < r[1]
                ⮐ [r[0] y r[1] y]
                
    # 000   000   0000000   00000000   0000000    
    # 000 0 000  000   000  000   000  000   000  
    # 000000000  000   000  0000000    000   000  
    # 000   000  000   000  000   000  000   000  
    # 00     00   0000000   000   000  0000000    
    
    @wordAtPos: lines pos ->
        
        if rng = @rangeOfClosestWordToPos lines pos
            ⮐ kseg.str @segsForLineSpan(lines rng)
        ''
        
    @chunkBeforePos: lines pos ->
        
        before = lines[pos[1]][0...pos[0]]
        if tcc = kseg.tailCountChunk before
            ⮐ kseg.str before[before.length-tcc..]
        ''    
        
    @chunkAfterPos: lines pos ->
        
        after = lines[pos[1]][pos[0]..]
        if hcc = kseg.headCountChunk after
            ⮐ kseg.str after[0...hcc]
        ''    
    
    @rangeOfClosestWordToPos: lines pos ->
        
        [x y] = pos
        ⮐ if @isInvalidLineIndex lines y
         
        if r = kseg.spanForClosestWordAtColumn lines[y] x
            if 0 <= r[0] < r[1]
                ⮐ [r[0] y r[1] y]
                
    @rangeOfWhitespaceLeftToPos: lines pos ->
        
        [x y] = pos
        
        y = clamp 0 lines.length-1 y
        x = clamp 0 lines[y].length x
        
        ⮐ [x y x y] if x <= 0
        
        segi = kseg.indexAtWidth lines[y] x
        left = lines[y][0...segi]
        
        if tc = kseg.tailCount left ' '
            ⮐ [segi-tc y segi y]
            
        [x y x y]

    @rangeOfWordOrWhitespaceLeftToPos: lines pos ->
        
        [x y] = pos
        
        ⮐ if x <= 0 or @isInvalidLineIndex lines y
        
        segi = kseg.indexAtWidth lines[y] x
        left = lines[y][0...segi]
        
        if tc = kseg.tailCount left ' '
            ⮐ [segi-tc y segi y]
            
        if tc = kseg.tailCountWord left
            ⮐ [segi-tc y segi y]
        
        [segi-1 y segi y]

    @rangeOfWordOrWhitespaceRightToPos: lines pos ->
        
        [x y] = pos
        
        ⮐ if x < 0 or @isInvalidLineIndex lines y
        
        if r = kstr.rangeOfClosestWord lines[y][x..] 0
            if 0 == r[0] < r[1]
                ⮐ [x y r[1]+x y]
            if r[0] > 0 
                ⮐ [x y r[0]+x y]
            
        [x y lines[y].length y]   
        
    @lineChar: line x -> line[x] if 0 <= x < line.length
        
    @categoryForChar: char -> 
        
        if 
            empty char      ➜ ⮐ 'empty'
            /\s+/.test char ➜ ⮐ 'ws'
            /\w+/.test char ➜ ⮐ 'word'
            
        'punct'
        
    @jumpDelta: line px dx jump ->
        
        if dx > 0
            ci = px
            if nc = cat = @categoryForChar @lineChar(line ci)
                ⮐ dx if cat not in jump
                while true
                    ci += dx
                    nc = @categoryForChar @lineChar(line ci)
                    break if nc != cat
                    break if ci <= 0
                    ⮐ 1 if nc == 'empty'
            ci - px
        else
            ci = px - 1
            ⮐ 0 if ci < 0
            if ci >= line.length and 'empty' in jump ➜ ⮐ line.length - ci - 1
            cat = @categoryForChar @lineChar(line ci)
            ⮐ dx if cat not in jump
            while 0 <= ci < line.length and @categoryForChar(@lineChar(line ci)) == cat
                ci += dx
            min dx ci - px + 1

    @numCharsFromPosToWordOrPunctInDirection: lines pos dir opt ->
        
        dx = dir == 'left' ? -1 : 1
        
        if opt?.jump ➜ ⮐ @jumpDelta(lines[pos[1]] pos[0] dx opt.jump)
            
        ⮐ 0 if pos[0] + dx < 0
        dx
        
    # ███   ███  ███   ███  ███████     ███████   ███       ███████   ███   ███   ███████  ████████  ███████  
    # ███   ███  ████  ███  ███   ███  ███   ███  ███      ███   ███  ████  ███  ███       ███       ███   ███
    # ███   ███  ███ █ ███  ███████    █████████  ███      █████████  ███ █ ███  ███       ███████   ███   ███
    # ███   ███  ███  ████  ███   ███  ███   ███  ███      ███   ███  ███  ████  ███       ███       ███   ███
    #  ███████   ███   ███  ███████    ███   ███  ███████  ███   ███  ███   ███   ███████  ████████  ███████  

    @isUnbalancedPosition: lines pos char ->
    
        revs =
            ']': '[' 
            '}': '{' 
            ')': '('
            '"': '"'
            "'": "'"

        p = pepe kseg.str(lines[pos[1]])
        start = p.unbalanced?[1..].map (s) -> s.start
        valid start and revs[char] in start
        
    #  0000000  000000000  00000000   000  000   000   0000000   
    # 000          000     000   000  000  0000  000  000        
    # 0000000      000     0000000    000  000 0 000  000  0000  
    #      000     000     000   000  000  000  0000  000   000  
    # 0000000      000     000   000  000  000   000   0000000   
    
    @isRangeInString: lines rng -> @rangeOfStringSurroundingRange(lines rng)?

    @rangeOfStringSurroundingRange: lines rng ->

        if ir = @rangeOfInnerStringSurroundingRange lines rng
            @rangeGrownBy ir 1

    @rangeOfInnerStringSurroundingRange: lines rng ->
        
        ⮐ if @isInvalidLineIndex lines rng[1]

        rgs = @rangesOfStringsInText lines[rng[1]] rng[1] 
        rgs = @rangesShrunkenBy rgs 1
        for r in rgs
            ⮐ r if @rangeContainsRange r rng
            
    @rangesOfStringsInText: text li=0 -> # todo: handle #{}
        
        rngs = []
        ss = -1
        cc = null
        for i in 0...text.length
            c = text[i]
            if not cc and c in "'\""
                cc = c
                ss = i
            else if c == cc
                if (text[i-1] != '\\') or (i>2 and text[i-2] == '\\')
                    rngs.push [ss li i+1 li]
                    cc = null
                    ss = -1
        rngs
        
    #  0000000   000   000  000000000   0000000  000  0000000    00000000      0000000  000000000  00000000   
    # 000   000  000   000     000     000       000  000   000  000          000          000     000   000  
    # 000   000  000   000     000     0000000   000  000   000  0000000      0000000      000     0000000    
    # 000   000  000   000     000          000  000  000   000  000               000     000     000   000  
    #  0000000    0000000      000     0000000   000  0000000    00000000     0000000      000     000   000  
    
    @positionsAndRangesOutsideStrings: lines rngs posl ->
        
        found = []
        
        for rng in rngs
            if not belt.isRangeInString(lines rng)
                found.push rng
                
        for pos in posl
            if not belt.isRangeInString(lines belt.rangeForPos(pos))
                found.push pos
        found
        
    # 00000000    0000000   000  00000000    0000000         0000000  000   000  00000000   00000000   0000000     0000000   
    # 000   000  000   000  000  000   000  000             000       000   000  000   000  000   000  000   000  000        
    # 00000000   000000000  000  0000000    0000000         0000000   000   000  0000000    0000000    000   000  000  0000  
    # 000        000   000  000  000   000       000             000  000   000  000   000  000   000  000   000  000   000  
    # 000        000   000  000  000   000  0000000         0000000    0000000   000   000  000   000  0000000     0000000   
    
    @rangesOfPairsSurroundingPositions: lines pairs posl ->
        
        rngs = []
        for pos in posl
            for pair in pairs
                if @chunkBeforePos(lines pos).endsWith(pair[0]) and @chunkAfterPos(lines pos).startsWith(pair[1])
                    rngs.push [pos[0] - pair[0].length pos[1] pos[0] + pair[1].length pos[1]]
        rngs
        
    @stringDelimiterSpansForPositions: lines posl ->
        
        spans = []
        for pos in posl
        
            if srng = @rangeOfStringSurroundingRange lines [pos[0] pos[1] pos[0] pos[1]]
                spans.push [srng[0] srng[1] srng[0]+1]
                spans.push [srng[2]-1 srng[3] srng[2]]
            else if lines[pos[1]][pos[0]] in "\"'"
                if srng = @rangeOfStringSurroundingRange lines [pos[0]+1 pos[1] pos[0]+1 pos[1]]
                    spans.push [srng[0] srng[1] srng[0]+1]
                    spans.push [srng[2]-1 srng[3] srng[2]]
        spans
        
    #  ███████   ████████   ████████  ███   ███         ███████  ███       ███████    ███████  ████████
    # ███   ███  ███   ███  ███       ████  ███        ███       ███      ███   ███  ███       ███     
    # ███   ███  ████████   ███████   ███ █ ███        ███       ███      ███   ███  ███████   ███████ 
    # ███   ███  ███        ███       ███  ████        ███       ███      ███   ███       ███  ███     
    #  ███████   ███        ████████  ███   ███         ███████  ███████   ███████   ███████   ████████

    @openCloseSpansForPositions: lines posl ->

        spans = []
        for pos in posl
            if sps = @openCloseSpansForPosition lines pos
                spans = spans.concat sps
        spans
        
    @openCloseSpansForPosition: lines pos ->
                
        open =
            '[': ']'
            '{': '}'
            '(': ')'
                   
        opns = '[{(' #Object.keys(open).join ''
        clos = ']})' #Object.values(open).join ''
        # revs = kutil.fromPairs kutil.zip(clos opns)
        revs =
            ']': '['
            '}': '{'
            ')': '('
        
        maxLookups = 1000 # careful, increasing this drops performance significantly!
        
        bp = [pos[0] pos[1]]
        
        if lines[bp[1]][bp[0]] not in opns
        
            closeEncounters = ''
            openEncounters = ''
            
            stack = []
            
            cnt = 0
            while true # find last open bracket before

                bp[0] -= 1
                if bp[0] >= 0
                    prev = lines[bp[1]][bp[0]]
                    if prev in opns
                        if stack.length
                            if open[prev] == last(stack)
                                openEncounters += prev
                                stack.pop()
                                continue
                            else
                                ⮐  # stack mismatch
                        lastOpen = prev
                        break
                    else if prev in clos
                        stack.push prev
                        closeEncounters += prev
                else
                    bp[1] -= 1
                    break if bp[1] < 0
                    bp[0] = lines[bp[1]].length
    
                break if lastOpen?
                break if bp[1] < 0
                break if cnt++ > maxLookups # maximum lookups exceeded            
        else
            lastOpen = lines[bp[1]][bp[0]]
            
        stack = []
        ap    = [max(bp[0]+1 pos[0]) pos[1]]
        cnt   = 0
        
        while ap[1] < lines.length # find first close bracket after
            
            next = lines[ap[1]][ap[0]]
            
            if next in clos
                if stack.length
                    if open[last(stack)] == next
                        stack.pop()
                    else
                        ⮐  # stack mismatch
                else
                    firstClose = next
                    break
            else if next in opns
                stack.push next

            ap[0] += 1
            if ap[0] >= lines[ap[1]].length
                ap[0] = 0
                ap[1] += 1
            
            break if cnt++ > maxLookups # maximum lookups exceeded   

        if not lastOpen? or not firstClose?
            if lines[pos[1]][pos[0]-1] in clos and revs[lines[pos[1]][pos[0]-1]] in openEncounters
                ⮐  @openCloseSpansForPosition lines [pos[0]-1 pos[1]]
            ⮐
        
        if open[lastOpen] == firstClose
            ⮐  [[bp[0] bp[1] bp[0]+1] [ap[0] ap[1] ap[0]+1]]
            
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000  
    # 000       000   000  000   000  000   000  000       0000  000     000     
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000     
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     
    
    @isCommentLine: line ->
    
        trimmed = kseg.trim(line)
        trimmed[0] == "#"
        
    ###
     0000000   0000000   00     00  00000000   000      00000000  000000000  000   0000000   000   000  
    000       000   000  000   000  000   000  000      000          000     000  000   000  0000  000  
    000       000   000  000000000  00000000   000      0000000      000     000  000   000  000 0 000  
    000       000   000  000 0 000  000        000      000          000     000  000   000  000  0000  
     0000000   0000000   000   000  000        0000000  00000000     000     000   0000000   000   000  
    
    list of strings -> list of strings
    
    removes trailing crappy punctuation
    inserts shorter prefixes if word contains punctuation
    ###
    
    @prepareWordsForCompletion: turd words ->
        
        filtered = []
        
        for w in words
        
            if w.startsWith turd # include anything that starts with turd
                continue if w.startsWith '..' # .. if it is not the start of a relative path
                continue if w.startsWith './' #  ▴ this prevents relative use paths to clutter 
                filtered.push w               #  ▴ the completion when turd is a dot.
                continue                        
                
            for subw in kseg.words w          # split chunk into words and 
                if subw.word.startsWith turd  # add any that starts with turd 
                    filtered.push subw.word    
                else if turd.length == 1 and turd == w[subw.index-1] # add word if it is prefixed
                    filtered.push turd[-1] + subw.word               # with turd 
           
        words = kutil.uniq filtered
        
        ⮐  [] if empty words
        
        segls = []
        
        push = s ->
            
            ⮐  if kseg.str(s) == turd # don't include what we are trying to complete
            
            ws = kseg.words s
            ws = ws.filter (w) -> w.index+w.segl.length > turd.length
            
            if valid ws[0] 
                if ws[0].index == 0 and turd != ws[0].word != s and ws[0].word.startsWith(turd)
                    segls.push ws[0].segl # add the first word of longer completion 
            if kseg.headCountTurd(s[turd.length..]) # if completion starts with turd, 
                segls.push s[0..turd.length+1]      # add the first character
                
            segls.push s
        
        for segl in kseg.segls words
            #
            tc = kseg.tailCountTurd segl
            
            if tc == 0 or tc == 1 and segl[0] == segl[-1]
                push segl
            else
                end = kseg.str segl[segl.length-tc..]
                if end in '])}' or end[-1] in ')]}' and end[-2] not in ','
                    push segl
                else
                    beforeTurd = segl[0...segl.length-tc]
                    if valid beforeTurd
                        push segl[0...segl.length-tc]
                    
        strs = segls.map kseg.str
        strs.sort()
        kutil.uniq strs
        
    #  0000000    0000000   0000000  000  000  000   000  00000000   0000000   0000000    00000000  00000000   
    # 000   000  000       000       000  000  000   000  000       000   000  000   000  000       000   000  
    # 000000000  0000000   000       000  000  000000000  0000000   000000000  000   000  0000000   0000000    
    # 000   000       000  000       000  000  000   000  000       000   000  000   000  000       000   000  
    # 000   000  0000000    0000000  000  000  000   000  00000000  000   000  0000000    00000000  000   000  
    
    @insertAsciiHeaderForPositionsAndRanges: lines posl ranges ->
        
        if empty ranges
            ranges = posl.map (p) => @rangeOfClosestWordToPos(lines p)
        
        text = @joinLines @textForLineRanges(lines ranges) ' '
        
        indt = lpad @lineIndentAtPos(lines posl[0])
        
        salt = salter(text prepend:indt+'# ') + '\n'
                
        [lines posl] = @insertTextAtPositions lines salt [[0 posl[0][1]]]
        [lines posl []]

export text
