###
    ███  ██     ██  ██     ██  ███   ███  █████████   ███████   ███████    ███      ████████
    ███  ███   ███  ███   ███  ███   ███     ███     ███   ███  ███   ███  ███      ███     
    ███  █████████  █████████  ███   ███     ███     █████████  ███████    ███      ███████ 
    ███  ███ █ ███  ███ █ ███  ███   ███     ███     ███   ███  ███   ███  ███      ███     
    ███  ███   ███  ███   ███   ███████      ███     ███   ███  ███████    ███████  ████████
###

class immutable

    @: tbl ->
        
        if tbl.class == immutable
            ⮐  tbl
        
        d = {}
        if tbl is array
        
            for v i in tbl∙each()
                if type(v) == "table" and v.class != immutable
                    d[i] = immutable(v)
                else
                    d[i] = v
                    
        elif type(tbl) == "table"
        
            if tbl.len > 0
                for i v in tbl
                    if type(v) == "table" and v.class != immutable
                        d[i] = immutable(v)
                    else
                        d[i] = v
            else
                for k v of tbl
                    if type(v) != "function" and string.sub(k 1 2) != "__" and k != "class"
                        if type(v) == "table" and v.class != immutable
                            d[k] = immutable(v)
                        else
                            d[k] = v
                    
        rawset @ "__data" d
            
    $: -> noon @__data
    
    __index:    k    -> @__data[k]
    __newindex: k v  -> error("Cannot modify immutable. trying to set #{k} #{v}")

    each: -> array.each @__data

    slice: first last ->
    
        s = []
        ⮐  s if first > @__data.len
        if last == nil ➜ last = @__data.len
        else last = min @__data.len last
        ⮐  s if last < 1 or last < first
        for i in first...last+1
            s∙push @__data[i]
        s

    len: -> @__data.len

    # mut: ->
    #     
    #     mutable = {}
    #     for k v of @__data
    #         if type(v) == "table" 
    #             mutable[k] = v∙mut()
    #         else
    #             mutable[k] = v
    #     mutable
        
    arr: deep=true ->    
    
        mutable = []
        for k v of @__data
            if type(v) == "table" and deep
                mutable[k] = v∙arr()
            else
                mutable[k] = v
        mutable
        
    mod: ->

        modifiable = {}
        for k v of @__data
            modifiable[k] = v
        modifiable

    set: k v ->
    
        newdata = @mod()
        if type(k) == "table"
            for k v of tbl
                newdata[k] = v
        else
            newdata[k] = v
        # write "SET #{k} #{v}"
        # write "IMM #{dict.str(newdata)}"
        immutable newdata

⮐  immutable
