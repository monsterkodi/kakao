#    ████████  ███   ███  ███   ███  █████████  ████████   ████████  ████████  
#    ███       ███   ███  ████  ███     ███     ███   ███  ███       ███       
#    ██████    ███   ███  ███ █ ███     ███     ███████    ███████   ███████   
#    ███       ███   ███  ███  ████     ███     ███   ███  ███       ███       
#    ███        ███████   ███   ███     ███     ███   ███  ████████  ████████  

use ../../../kxk    ▪ post slash
use ../../../kxk    ◆ nfs
use ../../theme     ◆ color theme icons
use ../../edit/tool ◆ belt
use ../menu         ◆ choices 

###
     ███████  ███   ███  ███   ███  █████████   ███████   ███   ███
    ███        ███ ███   ████  ███     ███     ███   ███   ███ ███ 
    ███████     █████    ███ █ ███     ███     █████████    █████  
         ███     ███     ███  ████     ███     ███   ███   ███ ███ 
    ███████      ███     ███   ███     ███     ███   ███  ███   ███
###

SYMBOL = 
    clss:          '■'  # '■' 
    unbound:       '->' # '▸'
    bound:         '=>' # '▸'
    async_unbound: '○→' # '○'
    async_bound:   '●→' # '●' 
        
function funSyntax

    @: @tree ->
    
        @color =
            class:          theme.funtree.class
            async:          theme.funtree.async
            bound:          theme.funtree.bound
            bound_async:    theme.funtree.bound_async
            func:           theme.funtree.func            
            func_async:     theme.funtree.func_async
            test0:          theme.funtree.test0
            test1:          theme.funtree.test1
            test2:          theme.funtree.test2
            test3:          theme.funtree.test3
        
    clear: =>

    setLines: lines => log 'setLines'
    setSegls: segls =>
        
    #  ███████   ███████   ███       ███████   ████████ 
    # ███       ███   ███  ███      ███   ███  ███   ███
    # ███       ███   ███  ███      ███   ███  ███████  
    # ███       ███   ███  ███      ███   ███  ███   ███
    #  ███████   ███████   ███████   ███████   ███   ███

    getClass: x y => ''
    getColor: x y =>
        
        item = @tree.items[y]
        name = item.name
        char = name[x]
        if char == ' ' ➜ ⮐  [0 0 0]

        if 
            item.clss       ➜ clr = @color.class
            item.test       ➜ clr = @color['test' + int(belt.numIndent(item.name)/2)] 
            item.async      ➜ clr = item.bound ? @color.bound_async : @color.func_async
            item.bound      ➜ clr = @color.bound
                            ➜ clr = @color.func
        if 
            item.static     ➜ clr = color.brighten clr 0.2
            char == '@' and empty name[x+1]
                              clr = @color.class
        if 
            char == '▸'            ➜ clr = color.darken clr 0.5
            char == '@'            ➜ clr = color.darken clr (clr == @color.class ? 0.75 : 0.5)
            char == SYMBOL.clss    ➜ clr = color.darken clr 0.2
            char in SYMBOL.bound   and item.bound ➜ clr = color.darken clr 0.5
            char in SYMBOL.unbound                ➜ clr = color.darken clr 0.7
        
        clr
        
    getChar: x y char => char

###    
    ████████  ███   ███  ███   ███  █████████  ████████   ████████  ████████
    ███       ███   ███  ████  ███     ███     ███   ███  ███       ███     
    ██████    ███   ███  ███ █ ███     ███     ███████    ███████   ███████ 
    ███       ███   ███  ███  ████     ███     ███   ███  ███       ███     
    ███        ███████   ███   ███     ███     ███   ███  ████████  ████████
###

function funtree extends choices

    @: screen name features ->
        
        super screen name features
        
        @state.syntax = new funSyntax @
        
        post.on 'file.loaded'  @clear
        post.on 'file.indexed' @onFileIndexed
        
    #  ███████   ███   ███        ███  ███   ███  ███████    ████████  ███   ███
    # ███   ███  ████  ███        ███  ████  ███  ███   ███  ███        ███ ███ 
    # ███   ███  ███ █ ███        ███  ███ █ ███  ███   ███  ███████     █████  
    # ███   ███  ███  ████        ███  ███  ████  ███   ███  ███        ███ ███ 
    #  ███████   ███   ███        ███  ███   ███  ███████    ████████  ███   ███

    onFileIndexed: path info =>
    
        ⮐  if path != ked_session.get 'editor▸file'
        ⮐  if empty info.classes and empty info.funcs
    
        clssl = clone info.classes
        funcs = clone info.funcs
        
        for clss in clssl
            clss.file ?= path
            clss.name = ' ' + SYMBOL.clss + ' ' + clss.name
            
        for func in funcs
            if func.test
                func.name = belt.reindent 4 2 func.name
            else
                if func.async
                    if func.bound
                        symbol = SYMBOL.async_bound
                    else
                        symbol = SYMBOL.async_unbound
                else
                    if func.bound
                        symbol = SYMBOL.bound
                    else
                        symbol = SYMBOL.unbound
                        
                name = func.name
                name = '@' + name if func.static
                indt = func.class ? '   ' : ''
                func.name = indt + symbol + ' ' + name
        
        items = clssl.concat funcs
        items.sort (a b) -> a.line - b.line
        
        @set items 'name'
        post.emit 'redraw'
        
    #  0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000          000     000  000   000  0000  000  
    # 000000000  000          000     000  000   000  000 0 000  
    # 000   000  000          000     000  000   000  000  0000  
    # 000   000   0000000     000     000   0000000   000   000  
    
    emitAction: action choice event  ->
        
        switch action
        
            'right'
            
                post.emit 'goto.line' choice.line-1 'ind'
                ⮐  
                
            'click'
            'return'
            
                post.emit 'goto.line' choice.line-1 'ind'
                post.emit 'focus' 'editor'
                ⮐  
                
            'drag'
            
                post.emit 'goto.line' choice.line-1 'ind'
                ⮐  
                 
        super action choice event
        
export funtree
