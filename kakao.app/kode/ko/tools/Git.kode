###
 0000000   000  000000000
000        000     000   
000  0000  000     000   
000   000  000     000   
 0000000   000     000   
###

use ../../kxk/slash
use ../../kxk/post

function Git

    @: ->
        @gitDirs = []
        
        post.on 'projectIndexed' @onProjectIndexed
        post.on 'fileChanged'    @onFileChanged
        
    onProjectIndexed: (prjPath) =>
        
        kakao('fs.git' prjPath).then (gitDir) =>
            if valid gitDir and gitDir not in @gitDirs
                @gitDirs.push slash.path gitDir, '.git'
                
    onFileChanged: (file) =>
        
        for gitDir in @gitDirs
            if file.startsWith gitDir
                if slash.dir(file).endsWith '.git/refs/heads'
                    if slash.name(file) in ['master' 'main']
                        # log 'git ref changed:' file
                        Git.status(gitDir).then (status) ->
                            log 'emit gitStatus' gitDir, status
                            post.emit 'gitStatus' gitDir, status
                        return
        
    #  0000000  000000000   0000000   000000000  000   000   0000000  
    # 000          000     000   000     000     000   000  000       
    # 0000000      000     000000000     000     000   000  0000000   
    #      000     000     000   000     000     000   000       000  
    # 0000000      000     000   000     000      0000000   0000000   
    
    @status: (file) ○->
        
        gitDir =○ kakao 'fs.git' file
        
        status =○ kakao 'app.sh' '/usr/bin/git' 'status' '--porcelain' gitDir
        
        # log 'Git.status' gitDir, status
        
        if status.startsWith 'fatal:' then return {}
        
        lines = status.split '\n'
    
        info = 
            gitDir:  gitDir
            changed: []
            deleted: []
            added:   []
            files:   {}
            
        dirSet = new Set
        
        while line = lines.shift()
            rel    = line.slice 3
            file   = slash.path gitDir, line.slice 3
            while (rel = slash.dir rel) != ''
                dirSet.add rel
                
            header = line.slice 0,2
            switch header
                ' D' ➜ info.deleted.push file
                ' M' ➜ info.changed.push file
                '??' ➜ info.added  .push file
                
        info.dirs = Array.from(dirSet).map (d) -> slash.path gitDir, d
        
        for key in ['changed' 'added' 'deleted']
            for file in info[key]
                info.files[file] = key
        
        # log 'Git.status info' info
        
        info

    # 0000000    000  00000000  00000000  
    # 000   000  000  000       000       
    # 000   000  000  000000    000000    
    # 000   000  000  000       000       
    # 0000000    000  000       000       
    
    @diff: (file) ○->
        
        # log 'Git.diff' file
        
        diff = ○ kakao 'app.sh' '/usr/bin/git' '--no-pager' 'diff' '--no-color' '-U0' file
        
        # log 'Git.diff' diff
        
        info  = file:file, changes:[]
        lines = diff.split '\n'
    
        while line = lines.shift()
    
            if line.startsWith '@@'
                [x, before, after] = line.split ' '
                afterSplit = after.split ','
    
                numOld = parseInt(before.split(',')[1] ? 1)
                numNew = parseInt(afterSplit[1] ? 1)
                change = line: parseInt(afterSplit[0])
    
                oldLines = []
                for i in [0...numOld]
                    oldLines.push lines.shift().slice 1
                lines.shift() while first(lines)[0] == '\\'
    
                newLines = []
                for i in [0...numNew]
                    newLines.push lines.shift().slice 1
                lines.shift() while first(lines)[0] == '\\'
    
                change.old = oldLines if oldLines.length
                change.new = newLines if newLines.length
    
                if numOld and numNew
                    change.mod = []
                    for i in [0...Math.min numOld, numNew]
                        change.mod.push old:change.old[i], new:change.new[i]
    
                if numOld > numNew
                    change.del = []
                    for i in [numNew...numOld]
                        change.del.push old:change.old[i]
    
                else if numNew > numOld
                    change.add = []
                    for i in [numOld...numNew]
                        change.add.push new:change.new[i]
    
                info.changes.push change
    
        # log 'Git.diff' info
        info

export Git
