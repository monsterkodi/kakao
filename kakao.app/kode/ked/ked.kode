###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    


    bun --watch js/ked/ked.js kode/ked/kde.kode
###

use ../kxk        ▪ karg kstr kseg slash post
use ../kxk        ◆ nfs
use ./util        ◆ logfile prjcts session help julia frecent watcher
use ./view/base   ◆ view
use ./view/menu   ◆ quicky fsbrow menu finder searcher context
use ./view/status ◆ status 
use ./view/screen ◆ screen ttio
use ./view/funcol ◆ funcol 
use ./view/editor ◆ fileeditor
use ./edit/tool   ◆ belt
use ./edit        ◆ mode

global.int = parseInt # this should go into kode instead

function KED

    @: ->

        @version = '0.5.0'
        @args = karg """
            
            ked [file]
                options                      **
                new        start with empty buffer          = false
                fresh      don't load previous session      = false
                timeout    session save timeout in ms       = 1000
                version    log version                      = false
                
            """ preHelp:help.header() version:@version
        
        process.on 'uncaughtException' @quit
            
        @session = new session @args
        @logfile = new logfile @session.name
        
        global.ked_session = @session
        
        @session.on 'loaded' @onSessionLoaded
        
        @viewSizes = funcol:[20 0]
                    
        @t = new ttio
        
        @julia   = new julia
        
        @screen  = new screen @t
        
        @menu     = new menu       @screen        
        @quicky   = new quicky     @screen 
        @fsbrow   = new fsbrow     @screen 
        @editor   = new fileeditor @screen 'editor'
        @funcol   = new funcol     @screen 'funcol'  ['scroll' 'knob']
        @finder   = new finder     @screen @editor.state
        @searcher = new searcher   @screen @editor.state
        @status   = new status     @screen @editor.state
        @context  = new context    @screen
        
        log w2("┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #{b8 @session.name} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")

        @editor.state.hasFocus = true
        
        post.on 'redraw'        @redraw
        post.on 'window.focus'  @redraw
        post.on 'window.blur'   @redraw
        post.on 'view.size'     @onViewSize
        post.on 'view.resize'   @onViewResize
        post.on 'quicky'        @onQuicky
        post.on 'file.new'      @newFile
        post.on 'file.open'     @openFile
        post.on 'quit'          @quit
        post.on 'fs.change'     @onFileChange
        
        @contextHandlers = [                                                  @editor         @funcol ]
        @mouseHandlers   = [ @context @finder @searcher @quicky @fsbrow @menu @editor @status @funcol ]
        @wheelHandlers   = [          @finder @searcher @quicky @fsbrow @menu @editor         @funcol ]
        @keyHandlers     = [ @context @finder @searcher @quicky @fsbrow @menu @editor         @funcol ]
        
        @t.on 'key'    @onKey
        @t.on 'mouse'  @onMouse
        @t.on 'wheel'  @onWheel
        @t.on 'resize' @onResize
        @t.on 'paste'  @onPaste
                                    
        if valid @args.options
            @loadFile @args.options[0]
        else if @args.fresh
            @menu.show true
        else if @args.new
            @newFile()
            
    onSessionLoaded: =>
    
        ⮐  if @args.fresh
        ⮐  if @args.new
        
        if empty @currentFile
            
            if file = ked_session.get "editor▸file"
                @loadFile file
            else
                @menu.show true
                            
    # 00000000   000   000  000   000  
    # 000   000  000   000  0000  000  
    # 0000000    000   000  000 0 000  
    # 000   000  000   000  000  0000  
    # 000   000   0000000   000   000  
    
    @run: -> new KED()

    # 000       0000000   000   000   0000000   000   000  000000000  
    # 000      000   000   000 000   000   000  000   000     000     
    # 000      000000000    00000    000   000  000   000     000     
    # 000      000   000     000     000   000  000   000     000     
    # 0000000  000   000     000      0000000    0000000      000     
    
    layout: ->
        
        w = @t.cols()
        h = @t.rows()
        fcw = @viewSizes.funcol[0]
        
        @funcol.layout  0    0  fcw    h
        @status.layout  fcw  0  w-fcw  1
        @editor.layout  fcw  1  w-fcw  h-1
    
    quit: msg ○=>
        
        clearImmediate @redrawId
        
        @quitting = true
        
        ○ @session.save()
        
        log w2("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #{b8 @session.name} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛")

        if msg?
            error msg.stack if msg.stack
            error "#{y5 msg}" #noon(msg) 
        
        @t?.quit()
        
        @logfile.close ->
            
            process.stderr.write "#{r4 msg.stack}\n" if msg?.stack
            process.stderr.write "#{y5 msg}" if msg?
            process.exit msg? ? 1 : 0
            
    # 000   000  00000000  000   000  
    # 0000  000  000       000 0 000  
    # 000 0 000  0000000   000000000  
    # 000  0000  000       000   000  
    # 000   000  00000000  00     00  
    
    newFile: =>
        
        delete @currentFile

        @status.setFile ''
    
        @editor.state.syntax.ext = 'txt'
        @editor.state.loadLines ['']
        @t.setCursor 0 0
        @t.setTitle 'kėd'
        
        @editor.mapscr?.reload()

        @redraw()
            
    # ████████  ███  ███      ████████   ███████  ███   ███   ███████   ███   ███   ███████   ████████
    # ███       ███  ███      ███       ███       ███   ███  ███   ███  ████  ███  ███        ███     
    # ██████    ███  ███      ███████   ███       █████████  █████████  ███ █ ███  ███  ████  ███████ 
    # ███       ███  ███      ███       ███       ███   ███  ███   ███  ███  ████  ███   ███  ███     
    # ███       ███  ███████  ████████   ███████  ███   ███  ███   ███  ███   ███   ███████   ████████

    onFileChange: event =>
    
        if event.path == @currentFile
            # log "ked.onFileChange #{event.change} #{@currentFile}" 
            switch event.change
                'delete' ➜ @newFile() # todo: load current text into new file
                'rename' ➜ @reloadFile()
        
    # ████████   ████████  ███       ███████    ███████   ███████  
    # ███   ███  ███       ███      ███   ███  ███   ███  ███   ███
    # ███████    ███████   ███      ███   ███  █████████  ███   ███
    # ███   ███  ███       ███      ███   ███  ███   ███  ███   ███
    # ███   ███  ████████  ███████   ███████   ███   ███  ███████  

    reloadFile: => 
        
        if valid @currentFile
            @loadFile @currentFile
        else
            @newFile()
        
    # ███       ███████    ███████   ███████          ████████  ███  ███      ████████
    # ███      ███   ███  ███   ███  ███   ███        ███       ███  ███      ███     
    # ███      ███   ███  █████████  ███   ███        ██████    ███  ███      ███████ 
    # ███      ███   ███  ███   ███  ███   ███        ███       ███  ███      ███     
    # ███████   ███████   ███   ███  ███████          ███       ███  ███████  ████████

    loadFile: p row col view ○=>
    
        log "loadFile #{p} #{row} #{col} #{noon view}"
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @currentFile = slash.absolute p
        else
            @currentFile = slash.path process.cwd() p

        @currentFile =○ nfs.resolveSymlink @currentFile
        
        @status.setFile slash.tilde(@currentFile)
        
        global.ked_editor_file = @currentFile

        text =○ nfs.readText @currentFile
        
        if text == undefined
            text = '○ binary ○'
        
        segls = belt.seglsForText text
        
        @editor.state.syntax.ext = slash.ext @currentFile
        @editor.state.loadSegls segls
        
        @status.time = process.hrtime(start)[1]
        
        @editor.mapscr?.reload()
        
        ked_session.set "editor▸file" @currentFile
        
        mode.fileLoaded @editor.state @currentFile row col view
        
        post.emit 'file.loaded' @currentFile
        
        @redraw()
        
        prjcts.index  @currentFile
        watcher.watch @currentFile
        
        @t.setTitle slash.name(@status.file)
        
        @saveSessionFile @currentFile 'loaded'        
        @
        
    #  0000000   00000000   00000000  000   000  
    # 000   000  000   000  000       0000  000  
    # 000   000  00000000   0000000   000 0 000  
    # 000   000  000        000       000  0000  
    #  0000000   000        00000000  000   000  
    
    openFile: path row col view =>
        
        @loadFile path row col view
        @editor.grabFocus()
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ○=>
        
        text = kseg.str @editor.state.s.lines
        
        if valid @currentFile
            ○ nfs.write @currentFile text
            @editor.state.clearHistory() # lazy way to 'undirty' :> no undo after save :(
            @redraw()
            @saveSessionFile @currentFile 'saved'
            
    saveAs: => log 'saveAs'

    saveSessionFile: file type ->
        
        frecent.fileAction file type
                
        @session.set 'files▸recent' frecent.store('file')
    
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    onPaste: text => 
    
        @editor.state.insert text
        @redraw()
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>

        if event.type == 'wheel'

            for handler in @wheelHandlers
                if ret = handler.onWheel event
                    if ret.redraw == true
                        @redraw()
                    ⮐ 
            ⮐ 

        redraw = false
        
        for handler in @mouseHandlers
        
            if ret = handler.onMouse event
                event.handled = true
                if ret.redraw == true
                    redraw = true
                break if event.type != 'move' or handler.name in view.popups

        if event.button == 'right'
            
            for handler in @contextHandlers
                if ret = handler.onContext event
                    if ret.redraw == true
                        redraw = true
                    break

        @redraw() if redraw
                
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
            
        switch key
            
            'alt+q' 'ctrl+q' 'cmd+esc'   ➜ ⮐  @quit()
            'alt+r' 'ctrl+r' 'cmd+r'     ➜ ⮐  @reloadFile()
            'ctrl+s' 'cmd+s'             ➜ ⮐  @saveFile()
            'shift+cmd+s' 'shift+ctrl+s' ➜ ⮐  @saveAs()
            'cmd+n' 'ctrl+n'             ➜ ⮐  @newFile()
            'alt+.' 'alt+m'              ➜ ⮐  @menu.show()
            'cmd+p' 'ctrl+p'             ➜ ⮐  @quicky.showProjectFiles @currentFile
            'cmd+f' 'ctrl+f'             ➜ ⮐  @finder.show()
            'shift+cmd+f' 'shift+ctrl+f' ➜ ⮐  @searcher.show()
            'cmd+o' 'ctrl+o'                  
            'cmd+.' 'ctrl+.'             ➜ ⮐  @fsbrow.gotoDir slash.dir(@currentFile)
            
        for handler in @keyHandlers
            # log "#{handler.name}"
            # ●▸ on key
            break if result = handler.onKey key event
            # ●▪ on key
                
        @redraw() if result?.redraw != false
        
    #  0000000   000   000  000   0000000  000   000  000   000  
    # 000   000  000   000  000  000       000  000    000 000   
    # 000 00 00  000   000  000  000       0000000      00000    
    # 000 0000   000   000  000  000       000  000      000     
    #  00000 00   0000000   000   0000000  000   000     000     
    
    onQuicky: path ○=>
        
        if slash.isAbsolute path
            file = path
        else
            file = slash.absolute path slash.dir(@currentFile)
        
        if slash.samePath file @currentFile
            @redraw()
            ⮐ 
            
        exists =○ nfs.fileExists file
        if exists
            ○ @loadFile file
                                
    #  0000000  000  0000000  00000000  
    # 000       000     000   000       
    # 0000000   000    000    0000000   
    #      000  000   000     000       
    # 0000000   000  0000000  00000000  
    
    onViewSize: name pos => 
        
        [x y] = pos
    
        @viewSizes[name] = [min(x @screen.cols-1) min(y @screen.rows-1)]
        @redraw()
        # @editor.mapscr?.onResize()
        
    onViewResize: name side delta =>
        
        idx = (side == 'right') ? 0 : 1
        @viewSizes[name][idx] += delta
        @viewSizes[name][idx] = max 0 @viewSizes[name][idx]
        @redraw()
        
    onResize: cols rows size => 
        
        @redraw()
        @editor.mapscr?.onResize()
    
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: =>    
        
        ⮐  if @quitting

        clearImmediate @redrawId
        @redrawId = setImmediate @draw
                                      
    draw: =>
            
        ⮐  if @quitting
        
        # ● draw
        
        start = process.hrtime()
        
        @status.gutter = @editor.state.gutterWidth()
        
        @screen.init()
        
        @layout()
        
        if @menu.greet.hidden()
            @editor.draw()
            @status.draw()
            @funcol.draw()
            
        @menu.draw()
        @quicky.draw()
        @fsbrow.draw()
        @finder.draw()
        @searcher.draw()
        @context.draw()
        
        # ●▸ render
        @screen.render()
        # ●▪ render
        
        @status.time = process.hrtime(start)[1]
        
export KED.run

◆main

    KED.run()

