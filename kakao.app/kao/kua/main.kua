
main = (...) ->

    use std
    use ./kxk/kxk
    
    # inspect = kxk.inspect
    # slash   = kxk.slash
    
    local optparser = std.optparse """
    0.1.0
    Usage: kao [Options ...] [Files ...]
    
    Options:
      -t, --test         run tests
      -d, --debug        run with debugging output
      -n, --dryrun,      run without execution
      -o, --outdir=dir   output directory
      -v, --verbose      a combined short and long option
      -V, --version      display version information, then exit
      -h, --help         display this help, then exit
    """
    
    slice = tbl first last ->
        sliced = {}
        for i in first..last
            sliced[sliced.len + 1] = tbl[i]
        ⮐  sliced
    
    argv = slice(process.argv 2 process.argv.len)
    
    (arg opts) = optparser:parse(argv)
    
    files = opts.unrecognised
    if opts.verbose
        print('opts',       inspect(opts))
        print('meta',       inspect(getmetatable(opts)))
        print("debug",      opts.debug)
        print("verbose",    opts.verbose)
        print('dryrun',     opts.dryrun)
        print('outdir',     opts.outdir)
        print('files',      files.len)
        print('files',      inspect(files))
    
    # print(slash.cwd())
    print("▸", kxk.exec("ls ~", print))
    
    load = file ->
        cmd = "cat " .. file
        kxk.exec(cmd, print)
    
    if files.len > 0
        print("files", inspect(files))
        if opts.test
            for index file in pairs(files)
                print('▸', file)
                load(file)
     
    verb = msg ->
        if opts.verbose ➜ print(msg)

⮐  require('./init')(main, ...)
    