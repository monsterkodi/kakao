###
 0000000  000000000   0000000   000000000  00000000  
000          000     000   000     000     000       
0000000      000     000000000     000     0000000   
     000     000     000   000     000     000       
0000000      000     000   000     000     00000000  
###

use ../kxk ◆ immutable kstr
use ◆ color syntax

function state

    @: @cells -> 
        
        @syntax = new syntax
    
        @init ['']
    
    init: lines ext ->
        
        @s = immutable
            lines:       lines
            selections:  []
            cursor:      [0 0]
            view:        [0 0]
            gutter:      @calcGutter(lines.length)

        @syntax.setLines lines ext
            
        @setCursor 0 0
        
    calcGutter: numLines =>
        
        2 + Math.ceil(Math.log10(numLines))
            
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
    
    setCursor: x y =>
        
        y = clamp 0 @s.lines.length-1 y
        x = max 0 x
                        
        @s = @s.set 'cursor' [x y]
        
        view = @s.view.asMutable()
        
        if y >= view[1] + @cells.t.rows() - 1
            view[1] = y - @cells.t.rows() + 2
        else if y < view[1]
            view[1] = y

        view[0] = max 0 x - @cells.t.cols() + @s.gutter + 1
            
        @s = @s.set 'view' view
            
        @cells.t.setCursor x+@s.gutter y-@s.view[1]
        
    moveCursor: dir steps=1 merge=true =>
        
        c = @s.cursor.asMutable() 
        
        switch dir
            'left'  ➜ c[0] -= 1
            'right' ➜ c[0] += 1
            'up'    ➜ c[1] -= steps
            'down'  ➜ c[1] += steps 
            'eol'   ➜ c[0] = @s.lines[c[1]].length
            'bol'   ➜ c[0] = 0
        
        if merge
            @s = @s.set 'selections' @mergeSelections(@s.selections.asMutable())
        
        @setCursor c[0] c[1]
        
    moveCursorAndSelect: dir =>
        
        selections = @s.selections.asMutable()
        selection = [@s.cursor[0] @s.cursor[1] @s.cursor[0] @s.cursor[1]]
        selections.push selection 
        
        @moveCursor dir 1 false
        
        switch dir
            'left'  ➜ selection[0] = selection[0]-1
            'right' ➜ selection[2] = selection[2]+1
            'up'    ➜ selection[1] = max 0 selection[1]-1
            'down'  ➜ selection[3] = min @s.lines.length-1 selection[3]+1
            'eol'   ➜ selection[2] = Infinity
            'bol'   ➜ selection[0] = 0
            
        selection[0] = clamp 0 @s.lines[selection[1]].length selection[0]
        selection[2] = clamp 0 @s.lines[selection[3]].length selection[2]
        
        # @s = @s.set 'selections' selections
        @s = @s.set 'selections' @mergeSelections(selections)
                    
        true
        
    # 00     00  00000000  00000000    0000000   00000000  
    # 000   000  000       000   000  000        000       
    # 000000000  0000000   0000000    000  0000  0000000   
    # 000 0 000  000       000   000  000   000  000       
    # 000   000  00000000  000   000   0000000   00000000  
    
    mergeSelections: sels ->
        
        ⮐ [] if empty sels
        
        sels = sels.map (a) -> if a[1] > a[3] ➜ [a[2] a[3] a[0] a[1]] else a
        sels = sels.map (a) -> if a[1] == a[3] and a[0] > a[2] ➜ [a[2] a[1] a[0] a[3]] else a
        sels.sort (a b) -> if a[1] == b[1] ➜ a[0] - b[0] else a[1] - b[1]
        sels = sels.filter (a) -> a[0] != a[2] or a[1] != a[3]
        
        mrgd = []
        for s,i in sels
            lastmrgd = valid mrgd ? mrgd[mrgd.length-1] : []
            if empty mrgd or s[1] > lastmrgd[3] or s[1] == lastmrgd[3] and s[0] > lastmrgd[2]
                mrgd.push s
            else if s[3] > lastmrgd[3] or s[3] == lastmrgd[3] and s[2] > lastmrgd[2]
                lastmrgd[2] = s[2] 
                lastmrgd[3] = s[3]

        # lf.write noon mrgd
        mrgd
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    select: from to =>
        
        selections = []
        
        @setCursor to[0] to[1]
        
        if from[1] > to[1]
            [from to] = [to from]
        else if from[1] == to[1] and from[0] > to[0]
            [from to] = [to from]

        to[0] = clamp 0 @s.lines[to[1]].length to[0]
        from[0] = clamp 0 @s.lines[from[1]].length from[0]
                
        selections.push [from[0] from[1] to[0] to[1]]
        
        @s = @s.set 'selections' selections
        
        true
        
    selectChunk: x y =>
        
        line = @s.lines[y]
        
        [rs re] = kstr.rangeOfClosestChunk line x
        if rs >= 0 and re >= 0
            @select [rs y] [re+1 y]

    selectWord: x y =>
        
        line = @s.lines[y]
        
        [rs re] = kstr.rangeOfClosestWord line x
        if rs >= 0 and re >= 0
            @select [rs y] [re+1 y]
            
    isSelectedLine: y =>
        
        for selection in @s.selections
            if selection[3] == y and selection[2] == 0
                continue
            if selection[1] <= y <= selection[3]
                ⮐ true
        false
            
    selectLine: y =>
        
        @select [0 y] [@s.lines[y].length y]
        
    deselect: =>
        
        if valid @s.selections
            @s = @s.set 'selections' []
            ⮐ true
                            
export state
