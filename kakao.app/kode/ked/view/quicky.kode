###
 0000000   000   000  000   0000000  000   000  000   000
000   000  000   000  000  000       000  000    000 000
000 00 00  000   000  000  000       0000000      00000
000 0000   000   000  000  000       000  000      000
 00000 00   0000000   000   0000000  000   000     000
###

use ../../kxk ▪ kstr slash post noon
use ../../kxk ◆ nfs
use ../util ◆ prjcts walker util
use ..      ◆ editor theme
use         ◆ cells crumbs inputchoice

import rgxs from './quicky.json' with { type: "json" }

int = parseInt

function quicky extends inputchoice

    @: @screen ->

        super @screen 'quicky' ['mapview']

        @crumbs = new crumbs  @screen 'quicky_crumbs'

        @choices.state.syntax.setRgxs rgxs

        post.on 'quicky.dir' @gotoDir

    # 000       0000000   000   000   0000000   000   000  000000000  
    # 000      000   000   000 000   000   000  000   000     000     
    # 000      000000000    00000    000   000  000   000     000     
    # 000      000   000     000     000   000  000   000     000     
    # 0000000  000   000     000      0000000    0000000      000     
    
    layout: =>
        
        scx = int @screen.cols/2
        scy = int @screen.rows/2
        
        ih = @inputIsActive() ? 2 : 0
        iz = max 0 ih - 1
        
        hs = int @screen.rows/2
        y  = int scy - hs/2 - ih
        
        cr = @crumbs.visible() ? 1 : 0
        cs = @crumbs.visible() ? hs : min(hs @choices.numFiltered())

        w  = min min(@screen.cols 42) max(32 int(@screen.cols/2))
        x  = int scx-w/2
        
        h  = cs + ih + cr + 2
        
        @input.layout    x+2   y+1        w-4  iz
        @crumbs.layout   x+2   y+1+ih     w-4  cr
        @choices.layout  x+2   y+1+ih+cr  w-3  cs
        @cells.layout    x     y          w    h

    # 000000000   0000000    0000000    0000000   000      00000000  
    #    000     000   000  000        000        000      000       
    #    000     000   000  000  0000  000  0000  000      0000000   
    #    000     000   000  000   000  000   000  000      000       
    #    000      0000000    0000000    0000000   0000000  00000000  
    
    toggle: currentFile -> if @hidden() then @show(currentFile) else @hide()
    
    hideMap: -> @choices.mapscr.hide()

    #  0000000  000   000   0000000   000   000  
    # 000       000   000  000   000  000 0 000  
    # 0000000   000000000  000   000  000000000  
    #      000  000   000  000   000  000   000  
    # 0000000   000   000   0000000   00     00  
    
    show: @currentFile ->

        # lf 'quicky.show' @currentFile

        items = prjcts.files @currentFile
        @currentDir = slash.dir @currentFile
        items = items.map (i) => slash.relative i @currentDir
        
        @crumbs.hide()

        ccol = int(@screen.cols/2) - 5

        maxind = 0
        indents = []
        for item in items
            indent = slash.dir(item).length
            indent += 1 if indent
            maxind = max maxind indent
            indents.push indent

        items = items.map (i n) => rpad ccol lpad(maxind-indents[n])+i

        weight = item ->

            p = slash.parse item

            w = 0
            w += item.split('/').length * 256
            w += kstr.weight p.name
            w

        items.sort (a b) -> weight(a) - weight(b)

        @input.set '' # previously opened file?
        @choices.set items
        @choices.state.selectLine 0
        @choices.state.setMainCursor @choices.state.s.lines[0].length 0
        @choices.state.setView [0 0]
        
        super()
        
    #  0000000    0000000   000000000   0000000   0000000    000  00000000   
    # 000        000   000     000     000   000  000   000  000  000   000  
    # 000  0000  000   000     000     000   000  000   000  000  0000000    
    # 000   000  000   000     000     000   000  000   000  000  000   000  
    #  0000000    0000000      000      0000000   0000000    000  000   000  
    
    gotoDir: dir select ○=>
        
        dir = process.cwd() if empty dir

        # lf 'quicky.gotoDir' dir
        
        dir = slash.untilde dir
        
        try
            items =○ nfs.list dir recursive:false
        catch err
            lf 'list error' err
            ⮐ 

        @currentDir = dir
        @crumbs.show @currentDir
        
        for item in items
            item.tilde = slash.relative item.path @currentDir
            item.tilde = ((item.type == 'dir') ? ' ' : '  ') + item.tilde
            
        parent = slash.dir @currentDir
        if valid parent
            items.push
                type: 'dir'
                file: slash.name(parent)
                path: parent
                tilde: ' ..'

        weight = item ->

            p = slash.parse item.path

            w = 0
            ⮐ w if item.tilde == ' ..'
            w += 10000 if item.type == 'file'
            w += 1000  if item.tilde.startsWith ' .'
            w += 1     if slash.ext(item.tilde) in ['js' 'json']
            w += kstr.weight(p.file)
            w

        items.sort (a b) -> weight(a) - weight(b)

        @input.set ''

        selectIndex = valid parent and items.length > 1 ? 1 : 0        
        
        if select
            for item,idx in items
                if slash.samePath item.path select
                    selectIndex = idx
                    break
                    
        @preview items[selectIndex].path
        
        @choices.set items 'tilde'
        @choices.state.selectLine selectIndex
        @choices.state.setMainCursor @choices.state.s.lines[selectIndex].length selectIndex
        @choices.state.setView [0 0]
        
        @layout()
        @choices.grabFocus()
        
    # 00000000  000  000      00000000   0000000   00000000   0000000    000  00000000   
    # 000       000  000      000       000   000  000   000  000   000  000  000   000  
    # 000000    000  000      0000000   000   000  0000000    000   000  000  0000000    
    # 000       000  000      000       000   000  000   000  000   000  000  000   000  
    # 000       000  0000000  00000000   0000000   000   000  0000000    000  000   000  
    
    gotoDirOrOpenFile: path ○=>
        
        isDir =○ nfs.dirExists path
        
        if isDir
            ○ @gotoDir path
        else
            isFile =○ nfs.fileExists path
            if isFile
                @openFileInEditor path
                            
    openFileInEditor: file =>
        
        @hide()
        post.emit 'quicky' file
        redraw:false
        
    #  0000000   00000000   00000000   000      000   000  
    # 000   000  000   000  000   000  000       000 000   
    # 000000000  00000000   00000000   000        00000    
    # 000   000  000        000        000         000     
    # 000   000  000        000        0000000     000     
    
    applyChoice: ->
        
        switch @input.current()
            
            '/'  ➜ ⮐ @gotoDir '/'
            '~'  ➜ ⮐ @gotoDir '~'
            '.'  ➜ ⮐ @gotoDir @currentDir
            '..' ➜ ⮐ @gotoDir slash.dir(@currentDir)
            
        current = @choices.current()
        
        if empty current and valid @input.current()
            @gotoDirOrOpenFile @input.current()
            ⮐ redraw:true
        
        if current?.path
            @gotoDirOrOpenFile current.path
            ⮐ redraw:true
    
        @returnToEditor()
                     
    returnToEditor: ->

        @hide()

        if @choices.numFiltered()
            post.emit 'quicky' @currentChoice()

        redraw:true
            
    # 0000000    00000000    0000000   000   000
    # 000   000  000   000  000   000  000 0 000
    # 000   000  0000000    000000000  000000000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000  00     00

    draw: ->

        ⮐ if @hidden()
         
        @layout()
        @drawFrame()
        @crumbs.draw()
        @drawChoices()

    #  0000000  00000000  000      00000000   0000000  000000000
    # 000       000       000      000       000          000
    # 0000000   0000000   000      0000000   000          000
    #      000  000       000      000       000          000
    # 0000000   00000000  0000000  00000000   0000000     000

    moveSelection: dir ->
        
        @hideMap()

        super dir
        
        if @choices.current().path
            @preview @choices.current().path
            
    # 00000000   00000000   00000000  000   000  000  00000000  000   000  
    # 000   000  000   000  000       000   000  000  000       000 0 000  
    # 00000000   0000000    0000000    000 000   000  0000000   000000000  
    # 000        000   000  000          000     000  000       000   000  
    # 000        000   000  00000000      0      000  00000000  00     00  
    
    preview: file ○->
        
        if slash.ext(file) in walker.sourceFileExtensions

            text =○ nfs.read file
            lines = util.linesForText text
            @choices.mapscr.show()
            @choices.mapscr.setSyntaxLines slash.ext(file) lines 
        else
            @hideMap()
        
    #  0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000          000     000  000   000  0000  000  
    # 000000000  000          000     000  000   000  000 0 000  
    # 000   000  000          000     000  000   000  000  0000  
    # 000   000   0000000     000     000   0000000   000   000  
    
    onChoiceAction: choice action =>
            
        switch action
            
            'right' 
                
                if choice.path
                    if choice.tilde == ' ..'
                        ⮐ @moveSelection 'down'
                    if choice.type == 'file'
                        ⮐ post.emit 'quicky' choice.path
                    else
                        @hideMap()
                        ⮐ @gotoDirOrOpenFile choice.link ? choice.path
                        
            'left' 'delete'
                
                if choice.path
                    upDir = slash.dir @currentDir
                    @hideMap()
                    ⮐ @gotoDir upDir @currentDir
            'space'            
                
                if choice.path and choice.type == 'file'
                    ⮐ post.emit 'quicky' choice.path

export quicky
