###
    ███   ███  ███  ████████  ███   ███ 
    ███   ███  ███  ███       ███ █ ███ 
     ███ ███   ███  ███████   █████████ 
       ███     ███  ███       ███   ███ 
        █      ███  ████████  ██     ██ 

    keeps track of
        - screen cells
        - visibility
        - theme colors
        - view features
        - mouse enter and leave
        - current popup
###

use ../../../kxk ▪ events post
use   ../screen  ◆ cells 

function view extends events

    @popups: ['quicky' 'browse' 'context' 'menu' 'macro' 'searcher' 'finder' 'differ']
    @currentPopup: null

    @: @screen @name features ->
        
        @cells = new cells @screen
        @color = {}
        @feats = {}
        @feats[f] = true for f in features
        @isVisible = true
        @focusable = false
                        
    setColor: key color => @color[key] = color
        
    # 000   000  000   0000000  000  0000000    000  000      000  000000000  000   000  
    # 000   000  000  000       000  000   000  000  000      000     000      000 000   
    #  000 000   000  0000000   000  0000000    000  000      000     000       00000    
    #    000     000       000  000  000   000  000  000      000     000        000     
    #     0      000  0000000   000  0000000    000  0000000  000     000        000     
  
    show: -> 
    
        @isVisible = true
        
        if @name in view.popups
            if view.currentPopup and view.currentPopup != @
                view.currentPopup.hide()
            view.currentPopup = @
            post.emit 'popup.show' @name
        
        @arrange()
        redraw:true
        
    hide: ->
    
        @isVisible = false 
        
        if @name in view.popups
            if @ == view.currentPopup
                view.currentPopup = null
                post.emit 'popup.hide' @name
        
        redraw:true
        
    arrange: ->    
    hidden:  -> not @visible()
    visible: -> @isVisible
    toggle:  -> if @hidden() then @show() else @hide()
         
    collapsed: -> @cells.rows <= 0 or @cells.cols <= 0
    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event => @handleHover event
    onWheel: event => log "view.onWheel #{@name}"
    
    onMouseLeave: => post.emit 'redraw'
    onMouseEnter: => 
        
        if @focusable and @grabFocus is func
            @grabFocus()
        
        if @pointerType 
            post.emit 'pointer' @pointerType
            post.emit 'redraw'
        
    handleHover: event =>
        
        inside = not event.handled and @cells.isInsideEvent event
        if @hover and not inside
            @hover = false
            @onMouseLeave()
        else if inside and not @hover
            @hover = true
            @onMouseEnter()
        @hover
    
    onKey: key event => log "view.onKey #{@name}"
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    layout: x y w h -> @cells.layout x y w h 
    
    draw: => 
        
export view
