###
    0000000    000   000  000  000      0000000      
    000   000  000   000  000  000      000   000    
    0000000    000   000  000  000      000   000    
    000   000  000   000  000  000      000   000    
    0000000     0000000   000  0000000  0000000      
###

CMD = "zig c++" # is awesome!

SRC = "main.cpp app.mm bundle.mm win.mm view.mm route.mm watch.mm"

OUT = "../Contents/MacOS/kakao"

LIB = "-framework WebKit -framework Cocoa"
FLG = "-arch arm64 -Os -Wno-nullability-completeness"

import fs       from "fs"
import process  from "process"
import childp   from "child_process"
import slash    from '../lib/kxk/slash.js'
import path     from 'path'
# import path     from '../lib/kxk/path.js'
# log path

export ->
    
    #try
    #    fs.unlinkSync __dirname + '../../log.txt' # remove the log file
    #catch e
    #    null
    
    # the actual build command. 
    # could be a one-liner in a shell script but that would be too simple :)
        
    cmd = "#{CMD} -I . #{SRC} #{LIB} #{FLG} -o #{OUT}"
    
    log 'cmd' cmd
    
    dirname = path.dirname import.meta.url[7..]
    
    log 'dirname' dirname
    
    opt = cwd:slash.resolve dirname + '/../../src' # build inside the kokoa.app/src folder
    
    #log 'childp.exec' childp
    #
    #childp.exec cmd, opt, (err, stdout, stderr) -> 
    #
    #    if err 
    #        error 'ERROR' err
    #        process.exit 2
    #        
    #    log stdout if valid stdout
    #    log 'app built'
    
    args = cmd.split ' '
    cmd = args.shift()
    out = args.pop()
    out = slash.resolve opt.cwd + '/' + out
    args.push out
    log 'cmd' cmd, 'args' args, 'opt' opt
    cp = childp.spawn cmd, args, opt
    
    cp.stdout.on 'data', (data) -> log "#{data}\n" 
    cp.stderr.on 'data', (data) -> log "#{data}\n" 
    cp.on 'close', (code) -> log 'exit' code
    
    
    