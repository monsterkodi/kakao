###
 0000000   0000000   000       0000000
000       000   000  000      000     
000       000000000  000      000     
000       000   000  000      000     
 0000000  000   000  0000000   0000000
###

use ../kxk ▪ scooter kstr post
use ◆ text 

class Calc

    @calc: expr ->
        
        ⮐ '' if empty expr
        
        expr = text.close expr
        expr = trim expr, ' \n'
        
        val = scooter expr
                
        post?.emit 'sheet' text:expr, val:val
        
        val
                
    @textKey: txt key ->
        
        switch key
            
            'sin' 'cos' 'tan' 'atan' symbol.sqrt, 'deg' 'rad' symbol.exp, 'log'

                if not empty(txt) and text.endsWithValue(txt) 
                    txt = @calc key + '(' + txt
                else if not text.endsWith(txt, ['.'])
                    txt += key + '('
                    
            '°'               ➜ txt += key if text.endsWithNumber(txt)
            '='               ➜ txt = @calc txt
            symbol.oneoverx   ➜ txt = @calc '1/(' + txt + ')'
            '∡'               ➜ txt = @calc '∡(' + txt + ')'
            '+' '-'           ➜ txt += key if not text.endsWith txt, ['+' '-' '.']
            '.'               ➜ txt += key if text.endsWithNumber(txt) and not text.endsWithFloat(txt)
            'π', symbol.euler ➜ txt += key if not text.endsWithConstant(txt)
            '('               ➜ txt += key if not text.endsWithUnfinished(txt) and not text.endsWithConstant(txt)
            ')'               ➜ txt += key if not text.endsWithUnfinished(txt) and text.balance(txt) > 0
            ➜
                if key in text.unfinished
                    if not empty txt
                        if not text.endsWithUnfinished(txt)
                            txt += key
                else if not text.endsWithConstant(txt)
                    txt = text.removeZeroInfinity(txt) + key
                    
        # log 'txtKey' txt, key
        txt

export Calc
