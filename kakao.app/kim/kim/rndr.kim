# ████████   ███   ███  ███████    ████████ 
# ███   ███  ████  ███  ███   ███  ███   ███
# ███████    ███ █ ███  ███   ███  ███████  
# ███   ███  ███  ████  ███   ███  ███   ███
# ███   ███  ███   ███  ███████    ███   ███

use pars vars clss
export pars

class Rndr
    
    code            : string
    s               : string
    annotateVarArg  : bool

    $: ➜string ->
        s = ""
        s &= "▸"
        s &= @code
        s &= "◂"
        s
    
    add: ◇string text -> @s &= text
    spc:              -> @s &= " "
    tok: ◇Node n      -> @s &= n.token.str
    rnd: ◇Node n      ->
    rnd: ◇seq[Node] nodes ->
        for i n in nodes
            @rnd n
            if i<nodes.len-1
                @add ", "
                                
    ▸block: ◇Node n -> 
    
        idt ◇ string
        if n.token.tok == ◂indent
            idt = n.token.str
            @add "\n" & idt
            
        for i exp in n.expressions
            @rnd exp
            if i < n.expressions.len-1
                if n.expressions[i+1].token.line > exp.token.line
                    @add "\n" & idt
                else
                    @add " "

    sigBody: ◇Node n ->
    
        @annotateVarArg = true
        @rnd n.func_signature
        @annotateVarArg = false
        
        if n.func_mod
            @add " "
            @tok n.func_mod
            
        if n.func_body
            @add " ="
            @add " "
            @rnd n.func_body

    ▸func: ◇Node n -> 
        
        if n.token.tok == ◂method
            @add "method "
        else
            @add "proc "
            
        @sigBody n
    
    ▸proc: ◇Node n -> 
    
        f = n.operand_right
        
        if f.token.tok == ◂method
            @add "method "
        else
            @add "proc "
        
        if n.operand_left.token.str[0] == '$'
            @add "`$`" & n.operand_left.token.str[1..^1]
        else
            @rnd n.operand_left
        
        @sigBody f
        
    ▸operation: ◇Node n -> 
    
        if n == nil or n.operand_left == nil or n.operand_right == nil
            log &"DAFUK? {n} {n.token}"
            ⮐  
    
        if n.token.tok == ◂assign 
            if n.operand_right.token.tok in {◂func ◂method}
                @▸proc n
                ⮐  
    
        outerbr = n.token.tok notin {◂assign ◂ampersand}
        bracket = n.token.tok == ◂assign and n.operand_left.kind == ●list
        @add("(") if bracket or outerbr
        @rnd n.operand_left
        @add(")") if bracket
        @spc()
        switch n.token.tok
            ◂and ➜ @add 'and'
            ◂or  ➜ @add 'or'
                 ➜ @tok n
        @spc()
        bracket = n.token.tok == ◂assign and n.operand_right.kind == ●list
        @add("(") if bracket
        @rnd n.operand_right
        @add(")") if bracket or outerbr
        
    ▸let: ◇Node n -> 
    
        @tok n
        @add " "
        @rnd n.let_expr
    
    ▸preOp: ◇Node n -> 
    
        if n.token.tok == ◂not
            @add "not "
        else
            @tok n
            
        @rnd n.operand
        
    ▸postOp: ◇Node n -> 
    
        @rnd n.operand
        @tok n
        
    ▸propertyAccess: ◇Node n -> 
    
        @rnd n.owner
        @tok n
        @rnd n.property
    
    ▸arrayAccess: ◇Node n -> 
    
        @rnd n.array_owner
        @add "["
        @rnd n.array_index
        @add "]"
        
    ▸signature: ◇Node n ->
    
        @add "("
        @annotateVarArg = true
        @rnd n.sig_args
        @annotateVarArg = false
        @add ")"
        if n.sig_type
            @add " : "
            @rnd n.sig_type
                
    ▸var: ◇Node n ->
    
        if n.var_name.kind == ●list
            @add "("
        @rnd n.var_name
        if n.var_name.kind == ●list
            @add ")"
        if n.var_type
            @add " : "
            @rnd n.var_type
        if n.var_value
            @add " = "
            @rnd n.var_value
    
    ▸arg: ◇Node n ->
    
        @rnd n.arg_name
        if n.arg_type
            @add " : "
            if n.token.tok == ◂var_type and @annotateVarArg
                @add "var "
            @rnd n.arg_type
        if n.arg_value
            @add " = "
            @rnd n.arg_value
    
    ▸string: ◇Node n -> 
    
        delimiter = n.token.str
        
        if delimiter == "'" and n.string_content.token.str.len > 1
            delimiter = "\""
        
        if n.string_stripols.len > 0
            @add "&"
        elif n.string_prefix
            @tok n.string_prefix
            
        @add delimiter
        
        sct = n.string_content.token.str
    
        mill = high(int)
        if delimiter == "\"\"\""
            lines = n.string_content.token.str.split "\n"
            if lines.len > 1
                ill = indentLen lines[1..^1]
                mill = min mill ill
                    
            for stripol in n.string_stripols
                if stripol.stripol_content
                    lines = stripol.stripol_content.token.str.split "\n"
                    if lines.len > 1
                        ill = indentLen lines[1..^1]
                        mill = min mill ill
            
        demill = ◇Node n -> 
            if mill == 0
                @tok n
            else
                lines = n.token.str.split "\n"
                for i in 1...lines.len
                    lines[i] = lines[i][mill..^1]
                @add lines.join("\n")
            
        demill n.string_content
        for stripol in n.string_stripols
            @add "{"
            @rnd stripol.stripol_xprssns
            @add "}"
            if stripol.stripol_content != nil
                demill stripol.stripol_content
        
        @add delimiter
        
    ▸use: ◇Node n -> 
    
        split = n.use_module.token.str.split " "
        while split.len > 1
            @add &"import {split[0]}\n" 
            split = split.shift
        
        @add "import "
        @add split[0]
        if n.use_kind != nil and n.use_kind.token.str == '▪'
            @add "/["
            @rnd n.use_items
            @add "]"
        
    ▸comment: ◇Node n -> 
    
        if n.token.str == "###"
            @add "#["
        else
            @tok n
            
        @tok n.comment_content
        
        if n.token.str == "###"
            @add "]#"
        
    ▸call: ◇Node n ->
    
        if n.callee.token.str == "log"
            @add "echo"
        elif n.callee.token.str[0] == '@'
            @add n.callee.token.str[1..^1]
            @add "().init"
        else
            @rnd n.callee
            
        if n.callee.token.str != "export"
            @add "("
        else
            @add " "
            
        @rnd n.call_args
        
        if n.callee.token.str != "export"
            @add ")"
            
    ▸if: ◇Node n ->
    
        idt = ' '.repeat n.token.col
        line = n.token.line
        
        @tok n
        @add " "
        
        for i condThen in n.cond_thens
            if i > 0
                if condThen.token.line > line
                    @add "\n" & idt & "elif "
                else
                    @add " elif "
            @rnd condThen.condition
            @add ": "
            @rnd condThen.then_branch
            
        if n.else_branch   
            if n.else_branch.token.line > line
                @add "\n" & idt & "else: "
            else
                @add " else: "
            @rnd n.else_branch
            
    ▸for: ◇Node n ->
    
        @add "for "
        if n.for_value.kind == ●list
            for i,v in n.for_value.list_values
                @rnd v
                if i < n.for_value.list_values.len-1
                    @add ", "
        else
            @rnd n.for_value
        @add " in "
        @rnd n.for_range
        @add ": "
        @rnd n.for_body
        
    ▸while: ◇Node n ->
    
       @add "while "
       @rnd n.while_cond
       @add ": "
       @rnd n.while_body
        
    ▸list: ◇Node n ->
    
        for i,item in n.list_values
            @rnd item
            if i < n.list_values.len-1
                @add ", "
    
    ▸curly: ◇Node n ->
    
        @add "{"
        for i,item in n.list_values
            @rnd item
            if i < n.list_values.len-1
                @add ", "
        @add "}"
    
    ▸squarely: ◇Node n ->
    
        @add "@["
        for i item in n.list_values
            @rnd item
            if i < n.list_values.len-1
                @add ", "
        @add "]"
        
    ▸range: ◇Node n -> 
    
        @rnd n.range_start
        if n.token.str == "..."
            @add "..<"
        else
            @tok n
        @rnd n.range_end
            
    ▸return: ◇Node n ->
    
        @add "return"
        if n.return_value
            @spc()
            @rnd n.return_value
    
    ▸discard: ◇Node n ->
    
        @add "discard"
        if n.discard_value
            @spc()
            @rnd n.discard_value
    
    ▸quote: ◇Node n ->
    
        @add "quote do: "
        @rnd n.quote_body
         
    ▸switch: ◇Node n ->
    
        idt = ' '.repeat n.token.col
        
        @add "case "
        @rnd(n.switch_value)
        @add ":"
        
        cdt = ' '.repeat n.switch_cases[0].token.col
        
        for i caseNode in n.switch_cases
            @add "\n" & cdt
            @add "of "
            for j,whenNode in caseNode.case_when
                if j > 0
                    @add ", "
                @rnd(whenNode)
            @add ": "
            @rnd(caseNode.case_then)
        
        if n.switch_default
            @add "\n" & cdt
            @add "else: "
            @rnd(n.switch_default)
            
    ▸enum: ◇Node n ->
    
        @add "type "
        @rnd n.enum_name
        @add " = enum"
        @rnd n.enum_body
        
    ▸class: ◇Node n ->
    
        @add "type "
        @rnd n.class_name
        @add " = ref object of "
        if n.class_parent
            @tok n.class_parent
        else
            @add "RootObj"
        @rnd n.class_body

    ▸struct: ◇Node n ->
    
        @add "type "
        @rnd n.class_name
        @add " = object"
        if n.class_parent
            @add " of "
            @tok n.class_parent
        @rnd n.class_body
    
    ▸member: ◇Node n ->
    
        @rnd n.member_key
        @add ": "
        @rnd n.member_value
    
    ▸testCase: ◇Node n ->
    
        @add "check "
        @rnd n.test_value
        @add " == "
        @rnd n.test_expected
    
    ▸testSuite: ◇Node n ->
    
        if n.kind == ●testSuite
            @add "suite"
        else
            @add "test"
        @add " \"" 
        @add n.token.str[4..^1] 
        @add "\": "
        @rnd n.test_block
    
    rnd: ◇Node n ->
    
        ⮐  if n == nil
        
        switch n.kind
        
            ●block          ➜ @▸block          n
            ●if             ➜ @▸if             n
            ●switch         ➜ @▸switch         n
            ●func           ➜ @▸func           n
            ●signature      ➜ @▸signature      n
            ●call           ➜ @▸call           n
            ●operation      ➜ @▸operation      n
            ●postOp         ➜ @▸postOp         n
            ●preOp          ➜ @▸preOp          n
            ●for            ➜ @▸for            n
            ●while          ➜ @▸while          n
            ●list           ➜ @▸list           n
            ●curly          ➜ @▸curly          n
            ●squarely       ➜ @▸squarely       n
            ●range          ➜ @▸range          n
            ●string         ➜ @▸string         n
            ●comment        ➜ @▸comment        n
            ●use            ➜ @▸use            n
            ●propertyAccess ➜ @▸propertyAccess n
            ●arrayAccess    ➜ @▸arrayAccess    n
            ●var            ➜ @▸var            n
            ●arg            ➜ @▸arg            n
            ●let            ➜ @▸let            n
            ●return         ➜ @▸return         n
            ●discard        ➜ @▸discard        n
            ●enum           ➜ @▸enum           n
            ●class          ➜ @▸class          n
            ●struct         ➜ @▸struct         n
            ●quote          ➜ @▸quote          n
            ●member         ➜ @▸member         n
            ●testCase       ➜ @▸testCase       n
            ●testSuite 
            ●testSection    ➜ @▸testSuite      n
            ●literal 
            ●keyword 
            ●type           
            ●typeDef 
            ●import 
            ●proc 
            ●macro 
            ●template 
            ●converter      ➜ @tok             n
                            ➜ 
                              log "unhandled #{n} #{n.kind}"
                              @tok n

render* = ◇string code autovar=true ➜string ->

    # profileStart "ast"
    root = ast code
    
    ⮐  "" if not root
    
    root = classify root
    
    # profileStop "ast"
    if autovar
        # profileStart "vars"
        root = variables root
        # profileStop "vars"
    r = Rndr code:code
    # profileStart "rnd"
    r.rnd root
    # profileStop "rnd"
    r.s
    
file* = ◇string file ➜string ->

    profileScope file

    fileOut = file.swapLastPathComponentAndExt "kim" "nim"
    kimCode = file.readFile()
    nimCode = render kimCode 
    if nimCode
        fileOut.writeFile nimCode
        fileOut
    else
        ""
    
files* = ◇seq[string] files ➜seq[string] ->

    transpiled ◇ seq[string]
    for f in files
        nimFile = file f
        if nimFile
            transpiled.add nimFile
    transpiled
        
                            