###
000   000  000  000   000  0000000     0000000   000   000
000 0 000  000  0000  000  000   000  000   000  000 0 000
000000000  000  000 0 000  000   000  000   000  000000000
000   000  000  000  0000  000   000  000   000  000   000
00     00  000  000   000  0000000     0000000   00     00
###

use ../../kakao
use ../../kxk      ▪ win stash post prefs store stopEvent
use                ◆ Kore Split Info Tabs Menu Navigate FileHandler Terminal Viewer
use ../tools       ◆ FileWatch Projects Indexer Git fps scheme
use ../editor      ◆ Editor Syntax FileEditor
use ../commands    ◆ Macro
use ../commandline ◆ CommandLine

# 000   000  000  000   000  0000000     0000000   000   000  
# 000 0 000  000  0000  000  000   000  000   000  000 0 000  
# 000000000  000  000 0 000  000   000  000   000  000000000  
# 000   000  000  000  0000  000   000  000   000  000   000  
# 00     00  000  000   000  0000000     0000000   00     00  

function Window extends win.Delegate

    onWindowAboutToShow:    (win)           -> #log "onWindowAboutToShow #{win.id}"
    onWindowAnimationTick:  (win, tickInfo) -> #log 'onWindowAnimationTick' win.id
    onWindowResize:         (win, event)    -> #log 'onWindowResize'        win.id
    onWindowFocus:          (win)           -> #log 'onWindowFocus'         win.id
    onWindowBlur:           (win)           -> #log 'onWindowBlur'          win.id
    onWindowKeyDown:        (win, keyInfo)  -> #log 'onWindowKeyDown'       win.id, keyInfo
    onWindowKeyUp:          (win, keyInfo)  -> #log 'onWindowKeyUp'         win.id, keyInfo
    onWindowMenuTemplate:   (win, template) -> kakao.menuTemplate = Menu template
    
    @: ->
        
        @menuIcon = kakao.bundle.img 'menu_ko.png'
        @menuNoon = kakao.bundle.res 'menu_ko.noon'
        
        post.on 'menuAction' @onMenuAction
        post.on 'stash' -> window.editor.saveFilePosition()
        
        window.aboutImage = kakao.bundle.img 'about_ko.png'
        
    onWindowCreated: (win) => 
        
        @id = win.id
        a = 1+2
                    
        new FileHandler
        new FileWatch
        new Git
        
        @tabs        = window.tabs        = new Tabs window.titlebar.elem
        @navigate    = window.navigate    = new Navigate()
        @split       = window.split       = new Split()
        @terminal    = window.terminal    = new Terminal 'terminal'
        @editor      = window.editor      = new FileEditor 'editor'
        @commandline = window.commandline = new CommandLine 'commandline-editor'
        @info        = window.info        = new Info @editor
        @fps         = window.fps         = new fps()
        @indexer     = window.indexer     = new Indexer()
        @viewer      = window.viewer      = new Viewer 'editor'
        
        window.textEditor = window.focusEditor = @editor
        window.setLastFocus @editor.name

        @editor.on 'changed' (changeInfo) ->
            return if changeInfo.foreign
            if changeInfo.changes.length
                if changeInfo.deletes == 1
                    window.navigate.delFilePos file: window.editor.currentFile, pos: [0 changeInfo.changes[0].oldIndex]
                else
                    window.navigate.addFilePos file: window.editor.currentFile, pos: window.editor.cursorPos()

        post.on 'prefsLoaded' => scheme.set prefs.get 'scheme' 'dark'
        post.on 'stashLoaded' => 

            @editor.setFontSize window.stash.get 'fontSize' 19
            @editor.centerText  window.stash.get('centerText'), 0
            
            post.emit 'loadFile' kore.get 'editor|file'
    
        window.split.resized()
        window.info.reload()
        
        @editor.focus()

    onMoved: (bounds) => window.stash.set 'bounds' bounds
                
    # 00     00  00000000  000   000  000   000      0000000    0000000  000000000  000   0000000   000   000
    # 000   000  000       0000  000  000   000     000   000  000          000     000  000   000  0000  000
    # 000000000  0000000   000 0 000  000   000     000000000  000          000     000  000   000  000 0 000
    # 000 0 000  000       000  0000  000   000     000   000  000          000     000  000   000  000  0000
    # 000   000  00000000  000   000   0000000      000   000   0000000     000     000   0000000   000   000
    
    onMenuAction: (name, trail) =>
        
        # log 'ko.Window.onMenuAction' name, trail
        
        if action = Editor.actionWithName name
            
            # log 'editor.actionWithName' name, action
            
            if action.key? and window.focusEditor[action.key] is func
                window.focusEditor[action.key] name:name, trail:trail
                return 
    
        if 'unhandled' != window.commandline.handleMenuAction name, trail
            # log 'commandline handled action' name, trail
            return 
            
        switch name
    
            'Undo'                  ➜ return window.focusEditor.do.undo()
            'Redo'                  ➜ return window.focusEditor.do.redo()
            'Cut'                   ➜ return window.focusEditor.cut()
            'Copy'                  ➜ return window.focusEditor.copy()
            'Paste'                 ➜ return window.focusEditor.paste()
            'New Tab'               ➜ return post.emit 'newEmptyTab'
            'New Window'            ➜ return kakao 'window.new' 'ko.html' @editor.currentFile
            'Arrange Windows'       ➜ return log "ko.window #{name} unimplemented!" #return post.toMain 'arrangeWindows'
            'Toggle Scheme'         ➜ return scheme.toggle()
            'Toggle Center Text'    ➜ return toggleCenterText()
            'Toggle Tab Pinned'     ➜ return toggleTabPinned()
            'Toggle Tab Extensions' ➜ return tabs.toggleExtension()
            'Increase'              ➜ return changeFontSize +1
            'Decrease'              ➜ return changeFontSize -1
            'Reset'                 ➜ return resetFontSize()
            'Navigate Backward'     ➜ return @navigate.backward()
            'Navigate Forward'      ➜ return @navigate.forward()
            'Maximize Editor'       ➜ return @split.maximizeEditor()
            'Activate Next Tab'     ➜ return window.tabs.navigate 'right'
            'Activate Previous Tab' ➜ return window.tabs.navigate 'left'
            'Move Tab Left'         ➜ return window.tabs.move 'left'
            'Move Tab Right'        ➜ return window.tabs.move 'right'
            'Open...'               ➜ return post.emit 'openFile'
            'Open In New Window...' ➜ return post.emit 'openFile' newWindow: true
            'Save'                  ➜ return post.emit 'saveFile'
            'Save All'              ➜ return post.emit 'saveAll'
            'Save As ...'           ➜ return post.emit 'saveFileAs'
            'Revert'                ➜ return post.emit 'reloadFile' kore.get 'editor|file'
            'Close Tab'             ➜ return post.emit 'closeTab'
            'Close Other Tabs'      ➜ return post.emit 'closeOtherTabs'
            'Close Other Windows'   ➜ return post.toWins 'closeWindow'
            'Small Browser'         ➜ return window.commandline.startCommand 'browse'
            'Preferences'           ➜ return post.emit 'loadFile' prefs.store.file
    
        log 'onMenuAction unhandled' name, trail
            
# 00000000    0000000    0000000  000000000
# 000   000  000   000  000          000
# 00000000   000   000  0000000      000
# 000        000   000       000     000
# 000         0000000   0000000      000
 
post.on 'singleCursorAtPos' (pos, opt) -> # browser double click and newTabWithFile :l:c
    window.editor.singleCursorAtPos pos, opt 
    window.editor.scroll.cursorToTop()
    
post.on 'focusEditor'  -> window.split.focus 'editor'
post.on 'cloneFile'    -> post.toMain 'newWindowWithFile' window.editor.currentFile
post.on 'closeWindow'  -> post.emit 'menuAction' 'Close'
post.on 'clearStash'   -> clearStash()
post.on 'editorFocus' (editor) ->
    window.setLastFocus window.editor.name
    window.focusEditor = window.editor
    window.textEditor = window.editor if window.editor.name != 'commandline-editor'
 
# 00000000  0000000    000  000000000   0000000   00000000
# 000       000   000  000     000     000   000  000   000
# 0000000   000   000  000     000     000   000  0000000
# 000       000   000  000     000     000   000  000   000
# 00000000  0000000    000     000      0000000   000   000
 
window.editorWithName = (n) ->
 
    switch n
        'command' 
        'commandline' ➜ window.commandline
        'terminal'    ➜ window.terminal
        'editor'      ➜ window.editor
                      ➜ window.editor
  
 # 00000000   00000000   0000000  000  0000000  00000000  
 # 000   000  000       000       000     000   000       
 # 0000000    0000000   0000000   000    000    0000000   
 # 000   000  000            000  000   000     000       
 # 000   000  00000000  0000000   000  0000000  00000000  
 
window.onresize = ->

    window.split.resized()
    window.win?.onMoved window.win.getBounds()
    if window.stash.get 'centerText' false
        window.editor.centerText true, 200

post.on 'split' (s) ->

    window.filebrowser?.resized()
    window.terminal?.resized()
    window.commandline.resized()
    window.editor.resized()

#  0000000  00000000  000   000  000000000  00000000  00000000       000000000  00000000  000   000  000000000
# 000       000       0000  000     000     000       000   000         000     000        000 000      000
# 000       0000000   000 0 000     000     0000000   0000000           000     0000000     00000       000
# 000       000       000  0000     000     000       000   000         000     000        000 000      000
#  0000000  00000000  000   000     000     00000000  000   000         000     00000000  000   000     000

toggleCenterText = ->

    if window.stash.get "invisibles|#{window.editor.currentFile}" false
        window.editor.toggleInvisibles()
        restoreInvisibles = true

    if not window.stash.get 'centerText' false
        window.stash.set 'centerText' true
        window.editor.centerText true
    else
        window.stash.set 'centerText' false
        window.editor.centerText false

    if restoreInvisibles
        window.editor.toggleInvisibles()
        
# 00000000   0000000   000   000  000000000      0000000  000  0000000  00000000
# 000       000   000  0000  000     000        000       000     000   000
# 000000    000   000  000 0 000     000        0000000   000    000    0000000
# 000       000   000  000  0000     000             000  000   000     000
# 000        0000000   000   000     000        0000000   000  0000000  00000000

setFontSize = (s) ->

    s = prefs.get('editorFontSize' 19) if not s is num
    s = clamp 8 100 s

    window.stash.set "fontSize" s
    window.editor.setFontSize s
    if window.editor.currentFile?
        post.emit 'loadFile' window.editor.currentFile, reload:true

changeFontSize = (d) ->

    if  window.editor.size.fontSize >= 20 ➜ f = 2
        window.editor.size.fontSize >= 30 ➜ f = 4
        window.editor.size.fontSize >= 50 ➜ f = 10
                                   ➜ f = 1
                                   
    setFontSize window.editor.size.fontSize + f*d

resetFontSize = ->

    defaultFontSize = prefs.get 'editorFontSize' 19
    window.stash.set 'fontSize' defaultFontSize
    setFontSize defaultFontSize

addToShelf = ->

    return if window.lastFocus == 'shelf'
    fb = window.filebrowser
    if window.lastFocus.startsWith fb.name
        path = fb.columnWithName(window.lastFocus).activePath()
    else
        path = window.editor.currentFile
    post.emit 'addToShelf' path

# 0000000   0000000    0000000   00     00
#    000   000   000  000   000  000   000
#   000    000   000  000   000  000000000
#  000     000   000  000   000  000 0 000
# 0000000   0000000    0000000   000   000

resetZoom = ->

    webframe.setZoomFactor 1
    window.editor.resized()

changeZoom = (d) ->
    
    z = webframe.getZoomFactor()
    z *= 1+d/20
    z = clamp 0.36 5.23 z
    webframe.setZoomFactor z
    window.editor.resized()

# 00000000   0000000    0000000  000   000   0000000
# 000       000   000  000       000   000  000
# 000000    000   000  000       000   000  0000000
# 000       000   000  000       000   000       000
# 000        0000000    0000000   0000000   0000000
 
window.onblur  = (event) -> post.emit 'winFocus' false
window.onfocus = (event) ->
    post.emit 'winFocus' true
    if document.activeElement.className == 'body'
        if window.split.editorVisible()
            window.split.focus 'editor'
        else
            window.split.focus 'commandline-editor'
 
window.setLastFocus = (name) -> window.lastFocus = name

kakao.preInit = ○->
    
    ○ Syntax.init()
    ○ Editor.init()
    ○ CommandLine.init()
    
kakao.init -> new win new Window
