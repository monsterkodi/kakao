###
 0000000   0000000   00     00  00000000   000      00000000  000000000  00000000
000       000   000  000   000  000   000  000      000          000     000     
000       000   000  000000000  00000000   000      0000000      000     0000000 
000       000   000  000 0 000  000        000      000          000     000     
 0000000   0000000   000   000  000        0000000  00000000     000     00000000
###

use ../../kxk ▪ kseg kutil
use ../util   ◆ theme util

function complete

    @: @editor ->
        
        @name = @editor.name + '_complete'
        
        @choices = new choices_class @editor.cells.screen "#{@name}_choices" ['scrllr']
        @choices.focusable = false
        @choices.rounded   = false
        
        @choices.scroll.handle = '▐'
        @choices.scroll.color.bg   = theme.editor_complete_choices
        @choices.scroll.color.knob = theme.editor_complete_choices_scroll
        @choices.scroll.color.dot  = theme.editor_complete_choices_scroll
        
        @visible = false
        
    hide:   -> @visible = false
    hidden: -> not @visible
        
    onEditorLayout: =>
        
        ⮐ if @hidden()
        
        # log "complete.onEditorLayout #{@name}"
        
    handleKey: key event ->
        
        ⮐ 'unhandled' if @hidden() or empty @words
        
        switch key
            'tab'
            'right'
            'return' ➜ ⮐ @apply()
            'up'
            'down' 
                if @words.length > 1
                    ⮐ @moveSelection key
            'esc'
                ⮐ @hide()
        
        'unhandled'
    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        ⮐ if @hidden()
        
        @choices.onMouse event

    onWheel: event => 
        
        ⮐ if @hidden()
        
        @choices.onWheel event
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    moveSelection: dir ->
        
        @choices.moveSelection dir
        
    #  0000000   00000000   00000000   000      000   000  
    # 000   000  000   000  000   000  000       000 000   
    # 000000000  00000000   00000000   000        00000    
    # 000   000  000        000        000         000     
    # 000   000  000        000        0000000     000     
    
    apply: ->
        
        @editor.state.insert @choices.current()[@turd.length..]
        @hide()
        
    # 000   000   0000000   00000000   0000000    
    # 000 0 000  000   000  000   000  000   000  
    # 000000000  000   000  0000000    000   000  
    # 000   000  000   000  000   000  000   000  
    # 00     00   0000000   000   000  0000000    
    
    word: @turd ->
        
        if empty @turd
            @visible = false
            ⮐ 
                
        @words = kseg.chunks(@editor.state.allLines()).map (chunk) -> kseg.str chunk.segl
        @words = kutil.uniq @words
        @words = @words.filter (w) => w.startsWith(@turd) and w != @turd
        @words = util.cleanWordsForCompletion @words
        @words.sort()
        
        if empty @words
            # log "#{@name} ▸#{@turd}◂ no completion" 
            @visible = false
            ⮐ 
        
        # log "#{@name} ▸#{@turd}◂" @words
        
        @visible = true
        
        mc = @editor.state.mainCursor()
        
        head = @words[0]
        
        cx = mc[0] - @editor.state.s.view[0]
        cy = mc[1] - @editor.state.s.view[1]
        
        for ch,ci in head[@turd.length..]
            @editor.cells.set cx+ci cy ch '#fff' theme.selection
        
        ⮐ if @words.length <= 1
        
        mlw = util.widthOfLines @words
        
        h = min 8 @words.length
        x  = @editor.cells.x+cx-@turd.length
        y  = @editor.cells.y+cy+1
        
        @choices.layout x y mlw+1 h
        @choices.set @words
        @choices.selectFirst()
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: ->
        
        ⮐ if @hidden() or empty @words

        mc = @editor.state.mainCursor()

        cx = mc[0] - @editor.state.s.view[0]
        cy = mc[1] - @editor.state.s.view[1]
        
        word = @choices.current()
        
        if empty word
            word = @words[0]
        
        for ch,ci in word[@turd.length..]
            bg = theme[@editor.name + '_selection'] ? theme.editor_selection
            @editor.cells.set cx+ci cy ch '#fff' bg
        
        ⮐ if @words.length <= 1
        
        x = cx+@editor.cells.x-@turd.length
        y = cy+@editor.cells.y+2
        w = @choices.cells.cols+1
        h = @choices.cells.rows
        
        fx = cx-@turd.length
        fy = cy+1

        @editor.cells.draw_frame fx-1 fy fx+w fy+h+1 fg:theme.editor_complete_choices bg:'#000'
        
        @choices.layout x y w h
        @choices.draw()

export complete
