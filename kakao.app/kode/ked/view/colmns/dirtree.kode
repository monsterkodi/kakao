###
0000000    000  00000000   000000000  00000000   00000000  00000000
000   000  000  000   000     000     000   000  000       000     
000   000  000  0000000       000     0000000    0000000   0000000 
000   000  000  000   000     000     000   000  000       000     
0000000    000  000   000     000     000   000  00000000  00000000
###

use ../../../kxk ▪ kutil kseg kstr slash post noon
use ../../../kxk ◆ nfs
use ../../util   ◆ prjcts 
use ../../theme  ◆ theme icons
use ../base      ◆ crumbs
use ../menu      ◆ choices 

import rgxs from '../menu/quicky.json' with { type: "json" }

function dirtree extends choices

    @: screen name features ->
        
        super screen name features
                        
        @state.syntax.setRgxs rgxs
        
        post.on 'session.merge' @onSessionMerge
        
        @frontRoundOffset = 0
                
    # 00000000    0000000    0000000   000000000  
    # 000   000  000   000  000   000     000     
    # 0000000    000   000  000   000     000     
    # 000   000  000   000  000   000     000     
    # 000   000   0000000    0000000      000     
    
    setRoot: path opt ○=>
        
        opt ?= {}
        
        dir = slash.untilde path
        
        items =○ @dirItems dir 'dirtree.setRoot'
        
        @currentRoot = dir
                
        ⮐ if empty items
        
        for item in items
            item.tilde = ' ' + @symbolName(item)

        items.sort (a b) => @weight(a) - @weight(b)
                    
        @set items
        
        @restoreSessionState()
        
        post.emit 'redraw' if opt.redraw
        
    # 00000000   00000000   0000000  000000000   0000000   00000000   00000000  
    # 000   000  000       000          000     000   000  000   000  000       
    # 0000000    0000000   0000000      000     000   000  0000000    0000000   
    # 000   000  000            000     000     000   000  000   000  000       
    # 000   000  00000000  0000000      000      0000000   000   000  00000000  
        
    restoreSessionState: ->
        
        state = ked_session.get @name {}

        ⮐ if empty state.open
        
        for key,value of state.open
            
            if key.startsWith @currentRoot
                @openDir @itemForPath(key) redraw:true
        
    #  0000000  000000000   0000000   000000000  00000000  
    # 000          000     000   000     000     000       
    # 0000000      000     000000000     000     0000000   
    #      000     000     000   000     000     000       
    # 0000000      000     000   000     000     00000000  
    
    onSessionMerge: recent => @setState recent[@name]    
        
    setState: state =>
        
        ⮐ if empty state
        ⮐ if not state is obj
        
        # log "dirtree.setState" state
        
        ked_session.set @name state
                    
    #  0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000          000     000  000   000  0000  000  
    # 000000000  000          000     000  000   000  000 0 000  
    # 000   000  000          000     000  000   000  000  0000  
    # 000   000   0000000     000     000   0000000   000   000  
    
    emitAction: action arg event  ->
        
        c = arg
        
        if action == 'hover'
                    
            @grabFocus()
            if valid event.mods and c.type == 'file'
                post.emit 'quicky' c.path
            ⮐ 
            
        # log "dirTree.emitAction #{action}" c
                
        switch c.type
            
            'dir' 
                
                switch action
                    
                    'click'
                    'space'
                        
                        if action == 'click' and event.mods ➜ ⮐  post.emit 'dircol.root' c.path
                        
                        if not c.open ➜ @openDir(c redraw:true) 
                        else @closeDir c
                        ⮐ 
                        
                    'right'
                    
                        if not c.open ➜ @openDir(c redraw:true)
                        else @selectNextKeepOffset()
                        ⮐ 

                    'left'
                    
                        if c.open ➜ @closeDir(c redraw:true)
                        else @selectPrevKeepOffset()
                        ⮐ 
                        
                    'delete'
                    'esc'
                    
                        @selectOpenSiblingAboveOrParent() if not c.open
                        @closeDir(c redraw:true) if c.open
                        ⮐ 
                        
                    'doubleclick'
                    'return' ➜ ⮐  post.emit 'dircol.root' c.path
                
            'file'

                switch action
                    
                    'left'   ➜ ⮐  @selectPrevKeepOffset()
                    'right'  ➜ ⮐  @selectNextKeepOffset()                             
                    
                    'delete'
                    'esc'    ➜ ⮐  @selectParent()
                    
                    'space'  ➜ ⮐  post.emit 'quicky' c.path
                    
                    'click'
                    'return' ➜ ⮐  post.emit 'file.open' c.path
        
        super action arg event
        
    #  0000000   00000000   00000000  000   000  0000000    000  00000000   
    # 000   000  000   000  000       0000  000  000   000  000  000   000  
    # 000   000  00000000   0000000   000 0 000  000   000  000  0000000    
    # 000   000  000        000       000  0000  000   000  000  000   000  
    #  0000000   000        00000000  000   000  0000000    000  000   000  
    
    openDir: dirItem opt ○->
        
        ⮐ if empty dirItem
        ⮐ if dirItem.open
        
        opt ?= {}
        
        dirItem.open = true
        
        items =○ @dirItems dirItem.path 'dirtree.openDir'
        
        dirItem.tilde = dirItem.tilde.replace icons.dir_close icons.dir_open 
            
        depth = (dirItem.depth ? 0) + 1
        
        state = ked_session.get @name {}
        
        for item in items
            item.depth = depth
            item.tilde = lpad(1+depth*2) + @symbolName(item)
            if item.type == 'dir' and state.open?[item.path]
                @openDir item redraw:true
        
        items.sort (a b) => @weight(a) - @weight(b)
        
        index = @items.indexOf dirItem
        
        kutil.insert @items index+1 items
        
        @set @items index
        
        ked_session.set "#{@name}▸open▸#{dirItem.path}" '✔'
        
        post.emit 'redraw' if opt.redraw
        
    #  0000000  000       0000000    0000000  00000000  0000000    000  00000000   
    # 000       000      000   000  000       000       000   000  000  000   000  
    # 000       000      000   000  0000000   0000000   000   000  000  0000000    
    # 000       000      000   000       000  000       000   000  000  000   000  
    #  0000000  0000000   0000000   0000000   00000000  0000000    000  000   000  
    
    closeDir: dirItem opt ->
        
        ⮐ if empty dirItem
        
        opt ?= {}
        
        dirItem.open = false
        
        dirItem.tilde = dirItem.tilde.replace icons.dir_open icons.dir_close
        
        index = @items.indexOf dirItem
        
        numChildren = 0
        while @items[index+numChildren+1].path.startsWith dirItem.path
            numChildren += 1
        
        kutil.replace @items index+1 numChildren []
        
        @set @items index
        
        ked_session.del "#{@name}▸open▸#{dirItem.path}"
        
        post.emit 'redraw' if opt.redraw
                
    # 000  000000000  00000000  00     00   0000000  
    # 000     000     000       000   000  000       
    # 000     000     0000000   000000000  0000000   
    # 000     000     000       000 0 000       000  
    # 000     000     00000000  000   000  0000000   
    
    dirItems: dir info ○=>
        
        try
            items =○ nfs.list dir recursive:false
        catch err
            error "list error -- #{info}" err
            ⮐ 

    #  0000000  00000000  000000000  
    # 000       000          000     
    # 0000000   0000000      000     
    #      000  000          000     
    # 0000000   00000000     000     
    
    set: items index=0-> 
        
        oldTop = @state.s.view[1]
        super items 'tilde'
        @state.setView [0 oldTop]
        @state.selectLine index
        @state.setMainCursor 0 index
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    selectPrevKeepOffset: ->
        
        @selectPrev()
        post.emit 'quicky' @current().path if @current().type == 'file'
        @state.setView [0 @state.s.view[1]-1]

    selectNextKeepOffset: ->
    
        if @current().type == 'file' and ked_session.get('editor▸file') != @current().path
            post.emit 'quicky' @current().path
            ⮐  
        
        @selectNext()
        post.emit 'quicky' @current().path if @current().type == 'file'
        @state.setView [0 @state.s.view[1]+1]
        
    selectOpenSiblingAboveOrParent: ->
    
        index = @fuzzied.indexOf @current()
        index -= 1
        while index > 0 and @fuzzied[index].depth >= @current().depth and not @fuzzied[index].open
            index -= 1
        @state.selectLine index
        @state.setMainCursor 0 index
        
    selectParent: ->
    
        index = @fuzzied.indexOf @current()
        index -= 1
        while index > 0 and @fuzzied[index].depth >= @current().depth
            index -= 1
        @state.selectLine index
        @state.setMainCursor 0 index
        
    drawSelections: ->
        
        current = @color.current
        
        @color.current = @hasFocus() ? current : theme.dirtree_current_blur
        
        if li = @indexOfOpenFile()
            # bg = theme.dirtree_open_file
            bg = theme.gutter
            y  = li-@state.s.view[1]
            if y < @cells.rows and li < @state.s.lines.length
                xs = kseg.headCount(@state.s.lines[li] ' ')
                @cells.set xs-1-@state.s.view[0] y '' bg @color.bg
                for x in xs...@cells.cols
                    @cells.set_bg x-@state.s.view[0] y bg
                # @cells.set x-@state.s.view[0] y '' bg @color.bg
        
        super()
                
        @color.current = current
        
    indexOfOpenFile: ->
        
        ⮐ if not global.ked_editor_file?
        
        for item,idx in @fuzzied
            ⮐ idx if item.path == ked_editor_file
            
    itemForPath: p ->
        
        for item,idx in @items
            ⮐ item if slash.samePath item.path p

    itemIndexForPath: p ->
        
        for item,idx in @items
            ⮐ idx if slash.samePath item.path p
            
    # 000   000  00000000  000   0000000   000   000  000000000  
    # 000 0 000  000       000  000        000   000     000     
    # 000000000  0000000   000  000  0000  000000000     000     
    # 000   000  000       000  000   000  000   000     000     
    # 00     00  00000000  000   0000000   000   000     000     
    
    weight: item ->

        p = slash.parse item.path

        w = 0
        w += 10000 if item.type == 'file'
        w += kstr.weight(p.file)
        w

    #  0000000  000   000  00     00  0000000     0000000   000      
    # 000        000 000   000   000  000   000  000   000  000      
    # 0000000     00000    000000000  0000000    000   000  000      
    #      000     000     000 0 000  000   000  000   000  000      
    # 0000000      000     000   000  0000000     0000000   0000000  
    
    symbol: item ->
                          
        switch item.type
            'file' 
                ⮐ icons[slash.ext(item.path)] ? icons.file
            'dir'
                ⮐ item.open ? icons.dir_open : icons.dir_close
                
    symbolName: item -> 
        
        switch slash.ext item.path
            'kode'
            'noon'
            'json'
            'pug'
            'styl'
            'html'
            'js'
            'md'
                name = slash.name item.path
            else
                name = slash.file item.path
        
        @symbol(item) + ' ' + name
        
export dirtree
