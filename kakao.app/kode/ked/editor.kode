###
00000000  0000000    000  000000000   0000000   00000000 
000       000   000  000     000     000   000  000   000
0000000   000   000  000     000     000   000  0000000  
000       000   000  000     000     000   000  000   000
00000000  0000000    000     000      0000000   000   000
###

use ../kxk ◆ events matchr kstr
use ◆ state theme
use ./util ◆ util color
use ./view ◆ view

function editor extends view

    @: screen name ->
        
        super screen name
        @state = new state @cells
        
    init: x y w h => 
    
        @cells.init x y w h
        @state.initView()
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: =>
        
        ⮐ if @cells.rows <= 0 or @cells.cols <= 0
        
        syntax     = @state.syntax
        s          = @state.s
        view       = s.view.asMutable()
        lines      = s.lines.asMutable()
        mainCursor = @state.mainCursor()
        
        for row in 0...@cells.rows
            
            y = row+view[1]
            
            break if y >= lines.length
            line = lines[y]
            
            if not line?
                lf 'empty line?', noon(lines), y, row, view[1]
                lf 'empty line?' lines.length y
                lf '???'
            
            # text
            for x in 0...@cells.cols
                if x < @cells.cols and x+view[0] < line.length
                    fg = syntax.getColor x+view[0] y
                    ch = syntax.getChar x+view[0] y line[x+view[0]]
                    if ch == "#" checkColor = true
                    @cells.set x row ch fg
                    
            # empty
            emptyColor = theme[@constructor.name + '_empty']
            if y < lines.length
                linel = line.length - view[0]
                if y == mainCursor[1]
                    if linel > 0
                        @cells.bg_rect 0 row linel row theme[@constructor.name + '_cursor_main']
                    @cells.bg_rect max(0 linel) row -1 row theme[@constructor.name + '_cursor_empty']
                else
                    if linel > 0
                        @cells.bg_rect 0 row linel row theme[@constructor.name]
                    @cells.bg_rect max(0 linel) row -1 row emptyColor
                    
                if checkColor
                    if rngs = kstr.colorRanges line
                        cx = max(0 linel)+1
                        for rng,idx in rngs
                            clr = color.rgb rng.color
                            dta = 4
                            if idx == 0             ➜ @cells.set cx row '' clr emptyColor; cx += 1; dta--
                            if idx == rngs.length-1 ➜ dta--
                            @cells.bg_rect cx row cx+dta row rng.match; cx += dta
                            if idx == rngs.length-1 ➜ @cells.set cx row '' clr emptyColor

        for highlight in s.highlights
            
            y = highlight[1]-view[1]
                
            if 0 <= y < @cells.rows
                    
                for x in highlight[0]...highlight[2]
                    
                    if 0 <= x-view[0] < @cells.cols
                        @cells.set_bg x-view[0] y theme.highlight
                        @cells.set_char x-view[0] y color.ul_rgb('ffffff')+'\x1b[4:1m'+@cells.get_char(x-view[0] y)+'\x1b[4:0m'
                    
        for selection in s.selections
            
            for li in selection[1]..selection[3]
                
                y = li-view[1]
                
                if view[1] <= li < view[1] + @cells.rows
                    
                    if li == selection[1]
                        xs = selection[0]
                    else
                        xs = 0
                        
                    if li == selection[3]
                        xe = selection[2]
                    else
                        xe = lines[li].length

                    bg = util.isFullLineRange(lines selection) ? theme.selection_line : theme.selection
                    
                    for x in xs...xe
                        if 0 <= x-view[0] < @cells.cols
                            @cells.set_bg x-view[0] y bg 
                            
        bg = theme[@constructor.name + '_cursor_multi']
        
        for cursor in s.cursors
            
            if @isCursorVisible cursor
            
                x = cursor[0]-view[0]
                y = cursor[1]-view[1]
                
                @cells.set_bg x y bg
                @cells.set_fg x y theme[@constructor.name + '_cursor_fg']
                            
        if @isCursorVisible()
            
            bg = theme[@constructor.name + '_cursor_bg']
            x = mainCursor[0]-view[0]
            y = mainCursor[1]-view[1]
            if s.cursors.length <= 1
                if @isCursorInEmpty()
                    bg = color.darken bg
                else if ' ' == @cells.get_char(x y)
                    bg = color.darken bg 0.75
            @cells.set_bg x y bg
            @cells.set_fg x y theme[@constructor.name + '_cursor_fg']
            
        @postDraw()
        
    postDraw: =>
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: type sx sy event =>
        
        ⮐ if row >= @cells.y + @cells.rows
        
        [col row] = @cells.posForScreen sx sy 
        
        switch type
            
            'press'
                        
                if event.count > 1

                    @state.deselect() if not event.shift
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    if event.count == 2
                        if event.alt
                            @state.selectChunk x y
                        else
                            @state.selectWord x y
                    else
                        @state.selectLine y
                        
                    @dragStart = copy @state.s.selections[0]
                    
                    ⮐ true
                    
                else
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    @dragStart = [x y x]
                    
                    # todo: shift click extends selection                           
                    
                    @state.deselect() if not event.shift
                    @state.clearCursors() if not event.alt

                    if event.alt
                        @state.addCursor x y
                    else
                        @state.setMainCursor x y
                    
                    ⮐ true
                    
            'drag'
            
                if @dragStart
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    start = [@dragStart[0] @dragStart[1]]
                    
                    if y < @dragStart[1] 
                        start = [@dragStart[2] @dragStart[1]]
                    
                    if event.shift ➜ @state.addRangeToSelectionWithMainCursorAtEnd util.rangeFromStartToEnd(start [x y])
                    else             @state.select start [x y]
                        
                    ⮐ true
                    
            'release'
            
                delete @dragStart
                
        true
                
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: col row dir mods =>
        
        ⮐ if row >= @cells.y + @cells.rows
        
        steps = switch mods
            
            'shift'          ➜ 4
            'shift+ctrl'     ➜ 8
            'alt'            ➜ 16
            'shift+alt'      ➜ 32
            'ctrl+alt'       ➜ 64
            'shift+ctrl+alt' ➜ 128
            ➜ 1
        
        if @dragStart
            
            [x y] = @state.mainCursor()
            
            switch dir
                'up'    ➜ y -= steps    
                'down'  ➜ y += steps    
                'left'  ➜ x -= 1    
                'right' ➜ x += 1    
                
            y = clamp 0 @state.s.lines.length-1 y
            x = clamp 0 @state.s.lines[y].length-1 x
            
            start = [@dragStart[0] @dragStart[1]]
            
            if y < @dragStart[1] 
                start = [@dragStart[2] @dragStart[1]]
            
            if @state.select start [x y]
                @redraw()
            ⮐ 
                
        switch dir
            'up' 'down' 'left' 'right' ➜ @state.scrollView dir steps
            
        @redraw()

    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
            
    isCursorInEmpty: cursor =>
        
        cursor ?= @state.mainCursor()
        
        util.isLinesPosOutside @state.s.lines cursor
        
    isCursorVisible: cursor =>
        
        cursor ?= @state.mainCursor()
        
        visible = util.isPosInsideRange cursor @state.rangeForVisibleLines()
        if cursor[0] < @state.s.view[0] ➜ visible = false
        visible
                
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: => @emit 'redraw'
        
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        lf 'key' key
        
        if @state.s.cursors.length == 1
            
            switch key
                                
                'ctrl+alt+up'               ➜ ⮐ @state.moveCursors 'up'    count:8
                'ctrl+alt+down'             ➜ ⮐ @state.moveCursors 'down'  count:8
                'ctrl+alt+left'             ➜ ⮐ @state.moveCursors 'left'  count:8
                'ctrl+alt+right'            ➜ ⮐ @state.moveCursors 'right' count:8
        
                'shift+ctrl+alt+up'         ➜ ⮐ @state.moveCursors 'up'    count:16
                'shift+ctrl+alt+down'       ➜ ⮐ @state.moveCursors 'down'  count:16
                'shift+ctrl+alt+left'       ➜ ⮐ @state.moveCursors 'left'  count:16
                'shift+ctrl+alt+right'      ➜ ⮐ @state.moveCursors 'right' count:16
        
        switch key

            'up'                        ➜ ⮐ @state.moveCursors 'up'   
            'down'                      ➜ ⮐ @state.moveCursors 'down' 
            'left'                      ➜ ⮐ @state.moveCursors 'left' 
            'right'                     ➜ ⮐ @state.moveCursors 'right'
            
            
            'shift+alt+up'              ➜ ⮐ @state.moveMainCursorInDirection 'up'    keep:true
            'shift+alt+down'            ➜ ⮐ @state.moveMainCursorInDirection 'down'  keep:true
            'shift+alt+left'            ➜ ⮐ @state.moveMainCursorInDirection 'left'  keep:true
            'shift+alt+right'           ➜ ⮐ @state.moveMainCursorInDirection 'right' keep:true

            'home'                      ➜ ⮐ @state.singleCursorAtIndentOrStartOfLine()
            'end'                       ➜ ⮐ @state.singleCursorAtEndOfLine()

            'ctrl+h'                    ➜ ⮐ @state.setMainCursor 0 0
            'ctrl+j'                    ➜ ⮐ @state.setMainCursor @state.s.lines[@state.s.lines.length-1].length @state.s.lines.length-1
            
            'shift+ctrl+h'              ➜ ⮐ @state.moveCursorAndSelect 'bof'
            'shift+ctrl+j'              ➜ ⮐ @state.moveCursorAndSelect 'eof'
            'shift+up'                  ➜ ⮐ @state.moveCursorAndSelect 'up'
            'shift+down'                ➜ ⮐ @state.moveCursorAndSelect 'down'
            'shift+left'                ➜ ⮐ @state.moveCursorAndSelect 'left'
            'shift+right'               ➜ ⮐ @state.moveCursorAndSelect 'right'
            'shift+cmd+right'           ➜ ⮐ @state.moveCursorAndSelect 'eol'
            'shift+cmd+left'            ➜ ⮐ @state.moveCursorAndSelect 'bol'
                    
            'alt+d'                     ➜ ⮐ @state.delete 'next' 'alt'
            'shift+ctrl+k' 'entf'       ➜ ⮐ @state.delete 'next'
            'ctrl+k'                    ➜ ⮐ @state.delete 'eol'
            'delete'                    ➜ ⮐ @state.delete 'back'
            'cmd+delete'                ➜ ⮐ @state.delete 'back' 'cmd'
            'alt+delete'                ➜ ⮐ @state.delete 'back' 'alt'
            
            'shift+tab'                 ➜ ⮐ @state.deindent()
            'tab'                       ➜ ⮐ @state.insert '\t'
                                    
            'alt+x' 'cmd+x' 'ctrl+x'    ➜ ⮐ @state.cut()     
            'alt+c' 'cmd+c' 'ctrl+c'    ➜ ⮐ @state.copy()        
            'alt+v' 'cmd+v' 'ctrl+v'    ➜ ⮐ @state.paste()
            
            'alt+up'                    ➜ ⮐ @state.moveSelectionOrCursorLines 'up'
            'alt+down'                  ➜ ⮐ @state.moveSelectionOrCursorLines 'down'
            'alt+left'                  ➜ ⮐ @state.moveCursors 'left'  jump:['ws' 'word' 'empty' 'punct']
            'alt+right'                 ➜ ⮐ @state.moveCursors 'right' jump:['ws' 'word' 'empty' 'punct']

            'cmd+up'   'ctrl+up'        ➜ ⮐ @state.expandCursors   'up'
            'cmd+down' 'ctrl+down'      ➜ ⮐ @state.expandCursors   'down'
            'shift+cmd+up'   'shift+ctrl+up'   ➜ ⮐ @state.contractCursors 'up'
            'shift+cmd+down' 'shift+ctrl+down' ➜ ⮐ @state.contractCursors 'down'
               
            'cmd+z' 'ctrl+z'            ➜ ⮐ @state.undo()
            'shift+cmd+z'
            'cmd+y' 'ctrl+y'            ➜ ⮐ @state.redo()
                        
            'cmd+a'       'ctrl+a'       ➜ ⮐ @state.selectAllLines()
            'cmd+j'       'ctrl+j'       ➜ ⮐ @state.joinLines()
            'cmd+l'       'ctrl+l'       ➜ ⮐ @state.selectMoreLines()
            'shift+cmd+l' 'shift+ctrl+l' ➜ ⮐ @state.selectLessLines()

            'cmd+left'  'ctrl+left'     ➜ ⮐ @state.moveCursorsToStartOfSelectionsOrIndentOrStartOfLines()
            'cmd+right' 'ctrl+right'    ➜ ⮐ @state.moveCursorsToEndOfSelectionsOrLines()
            
            'cmd+g' 'ctrl+g'            ➜ ⮐ @state.selectWordAtCursor_highlightSelection_selectNextHighlight()
            'cmd+d' 'ctrl+d'            ➜ ⮐ @state.selectWordAtCursor_highlightSelection_addNextHighlightToSelection()
            'cmd+e' 'ctrl+e'            ➜ ⮐ @state.highlightWordAtCursor_deselectCursorHighlight_moveCursorToNextHighlight()
            
            'alt+cmd+d'                 ➜ ⮐ @state.selectWordAtCursor_highlightSelection_selectAllHighlights()
            
            'esc'                       ➜ ⮐ @state.clearCursorsHighlightsAndSelections()

        if valid event.char
            @state.insert event.char
        else
            if key not in ['shift' 'ctrl' 'alt' 'cmd'] 
                lfc 'editor.onKey?' key

export editor
