###
000000000   0000000   0000000     0000000
   000     000   000  000   000  000
   000     000000000  0000000    0000000
   000     000   000  000   000       000
   000     000   000  0000000    0000000
###

use ../../kxk ▪ post elem kpos slash drag popup stopEvent $ 
use ../tools  ◆ Projects
use ./Tab

class Tabs

    @: (titlebar) ->

        @emptyid = 0
        @tabs = []
        
        @div =$ 'title'
        @div.classList.add 'tabs'

        @div.addEventListener 'click'       @onClick
        @div.addEventListener 'contextmenu' @onContextMenu

        @drag = new drag
            target:  @div
            onStart: @onDragStart
            onMove:  @onDragMove
            onStop:  @onDragStop

        post.on 'newTabWithFile'   @onNewTabWithFile
        post.on 'newEmptyTab'      @onNewEmptyTab

        post.on 'fileRemoved'      @delTab
        post.on 'fileChanged'      @reloadFile
        # post.on 'reloadTab'   @reloadTab
        # post.on 'reloadFile'  @reloadActiveTab
        
        post.on 'closeTab'         @onCloseTab
        post.on 'closeOtherTabs'   @onCloseOtherTabs
        post.on 'stash'            @stash
        post.on 'dirty'            @onDirty
        post.on 'revertFile'       @revertFile
        post.on 'editorFocus'      @onEditorFocus
        post.on 'stashLoaded'      @onStashLoaded
        post.on 'projectIndexed'   @onProjectIndexed
        
        kore.on 'tabs'        @onKoreTabs
        kore.on 'editor|file' @onEditorFile
        
    # 000   000   0000000   00000000   00000000  
    # 000  000   000   000  000   000  000       
    # 0000000    000   000  0000000    0000000   
    # 000  000   000   000  000   000  000       
    # 000   000   0000000   000   000  00000000  
    
    onKoreTabs: (tabs) =>
        
        # log 'onKoreTabs' tabs
        
        @div.innerHTML = ''
        @tabs = []
        for koreTab in tabs
            @tabs.push new Tab @, koreTab
                
    koreTabs: -> kore.get 'tabs'
    
    update: -> kore.set 'tabs' @koreTabs()

    koreTabForPath: (path) ->
        
        for tab in @koreTabs()
            if slash.samePath tab.path, path
                return tab
        
    # 00000000  0000000    000  000000000   0000000   00000000   00000000  000  000      00000000  
    # 000       000   000  000     000     000   000  000   000  000       000  000      000       
    # 0000000   000   000  000     000     000   000  0000000    000000    000  000      0000000   
    # 000       000   000  000     000     000   000  000   000  000       000  000      000       
    # 00000000  0000000    000     000      0000000   000   000  000       000  0000000  00000000  
    
    onEditorFile: (path) => @addTab path
        
    # 00000000  0000000    000  000000000   0000000   00000000   00000000   0000000    0000000  000   000   0000000  
    # 000       000   000  000     000     000   000  000   000  000       000   000  000       000   000  000       
    # 0000000   000   000  000     000     000   000  0000000    000000    000   000  000       000   000  0000000   
    # 000       000   000  000     000     000   000  000   000  000       000   000  000       000   000       000  
    # 00000000  0000000    000     000      0000000   000   000  000        0000000    0000000   0000000   0000000   
    
    onEditorFocus: (editor) =>
        
        if editor.name == 'editor'
            if tab = @koreTabForPath window.textEditor.currentFile
                if tab.tmp
                    delete tab.tmp
                # log 'editorFocus' @koreTabs()
                @setActive tab.path
                @update()

    #  0000000   0000000    0000000          000000000   0000000   0000000
    # 000   000  000   000  000   000           000     000   000  000   000
    # 000000000  000   000  000   000           000     000000000  0000000
    # 000   000  000   000  000   000           000     000   000  000   000
    # 000   000  0000000    0000000             000     000   000  0000000

    addTab: (path) ->
        
        if not @koreTabForPath path
        
            @koreTabs().push type:'file' path:path
            @setActive path
            @cleanTabs()
            @tab(path).div.scrollIntoViewIfNeeded()
            return

        @setActive path
        @update()
        @
        
    cleanTabs: ->
        
        tabs = @koreTabs()

        sorted = tabs.filter (t) -> t.type == 'prj'
        remain = tabs.filter (t) -> t.type != 'prj'
        
        prjTabs = {}
        for tab in sorted
            prjTabs[tab.path] = [tab]
           
        dangling = []
        while tab = remain.shift()
            prjPath = Projects.dir tab.path
            if valid prjTabs[prjPath]
                prjTabs[prjPath].push tab
            else
                dangling.push tab
             
        tabs = []
        for k,v of prjTabs
            tabs = tabs.concat v
            
        if valid dangling
            log 'dangling' dangling 
            tabs = tabs.concat dangling
                
        log 'cleanTabs' tabs
        kore.set 'tabs' tabs
        
    # 0000000    00000000  000             000000000   0000000   0000000    
    # 000   000  000       000                000     000   000  000   000  
    # 000   000  0000000   000                000     000000000  0000000    
    # 000   000  000       000                000     000   000  000   000  
    # 0000000    00000000  0000000            000     000   000  0000000    
    
    delTab: (path) =>

        if tab = @koreTabForPath path
            tabs = @koreTabs()
            index = tabs.indexOf tab
            if tab.active
                if index+1 < tabs.length
                    tabs[index+1].active = true
                else if index-1 >= 0
                    tabs[index-1].active = true
            # log 'Tabs.delTab' index, tabs
            tabs.splice index, 1
            # log 'Tabs.delTab' tabs
            kore.set 'tabs' tabs
            
    #  0000000    0000000  000000000  000  000   000   0000000   000000000  00000000  
    # 000   000  000          000     000  000   000  000   000     000     000       
    # 000000000  000          000     000   000 000   000000000     000     0000000   
    # 000   000  000          000     000     000     000   000     000     000       
    # 000   000   0000000     000     000      0      000   000     000     00000000  
    
    activate: (path) =>
        
        log 'Tabs.activate' path
        if tab = @koreTabForPath path
            @setActive path
            # log 'Tabs.activate' tab
            if tab.type == 'file'
                # log 'Tabs.activate jumpToFile' path
                post.emit 'jumpToFile' path
            else
                tab.collapsed = not tab.collapsed
            @update()
            
    setActive: (path) =>
        
        for tab in @koreTabs()
            delete tab.active
            if slash.samePath tab.path, path
                tab.active = true
                @tab(path)?.div?.scrollIntoViewIfNeeded()
            # log 'setActive' tab
            
    activeKoreTab: =>
        
        for tab in @koreTabs()
            return tab if tab.active

    activeKorePrj: =>
        
        if fileTab = @activeKoreTab()
            for tab in @koreTabs()
                return tab if tab.type == 'prj' and fileTab.path.startsWith tab.path 
            
    # 00000000   00000000  000       0000000    0000000   0000000          00000000  000  000      00000000
    # 000   000  000       000      000   000  000   000  000   000        000       000  000      000
    # 0000000    0000000   000      000   000  000000000  000   000        000000    000  000      0000000
    # 000   000  000       000      000   000  000   000  000   000        000       000  000      000
    # 000   000  00000000  0000000   0000000   000   000  0000000          000       000  0000000  00000000

    reloadFile: (file) =>
        
        log 'Tabs.reloadFile' file
        
        if tab = @koreTabForPath file
            tab.dirty = false
            @update()
        
    # 00000000   00000000    0000000         000  00000000   0000000  000000000  
    # 000   000  000   000  000   000        000  000       000          000     
    # 00000000   0000000    000   000        000  0000000   000          000     
    # 000        000   000  000   000  000   000  000       000          000     
    # 000        000   000   0000000    0000000   00000000   0000000     000     
    
    onProjectIndexed: (path) => 
    
        @koreTabs().push type:'prj' path:path
        @cleanTabs()
    
    #  0000000  000      000   0000000  000   000
    # 000       000      000  000       000  000
    # 000       000      000  000       0000000
    # 000       000      000  000       000  000
    #  0000000  0000000  000   0000000  000   000

    onClick: (event) =>
        
        if tab = @tab event.target
            log 'Tabs.onClick path' tab.path
            if event.target.classList.contains 'dot'
                log 'deltab' tab.path
                @delTab tab.path
            else
                log 'activate tab!' tab
                # tab.activate()
                @activate tab.path
        else
            error 'no tab?' event.target, event.target?.parentNode, @tabs
            # if tabElem = elem.upElem event.target, class:'tab'
                # log 'remove tab elem' tabElem
                # tabElem.remove()
        true

    # 000000000   0000000   0000000
    #    000     000   000  000   000
    #    000     000000000  0000000
    #    000     000   000  000   000
    #    000     000   000  0000000

    tab: (id) ->

        if id is num ➜ return @tabs[id]
        if elem.isElement id
            tabDiv = elem.upElem id, class:'tab'
            log 'tabDiv' tabDiv
            t = @tabs.find (t) -> t.div == tabDiv
            log 't' t
            if not t
                log @tabs
                log @tabs.map (t) -> t.div
            return t
        if id is str ➜ return @tabs.find (t) -> t.path == id

    # activeTab: -> @tabs.find (t) -> t.isActive()
            
    numTabs:     -> @tabs.length
    numFileTabs: -> @fileTabs().length
    numPrjTabs:  -> @prjTabs().length
    
    fileTabs: -> @tabs.filter (t) -> not t.isPrj
    prjTabs:  -> @tabs.filter (t) ->     t.isPrj

    tabAtX: (x) ->

        @tabs.find (t) ->
            br = t.div.getBoundingClientRect()
            br.left <= x <= br.left + br.width
            
    #  0000000  000       0000000    0000000  00000000
    # 000       000      000   000  000       000
    # 000       000      000   000  0000000   0000000
    # 000       000      000   000       000  000
    #  0000000  0000000   0000000   0000000   00000000

    onCloseTab: =>
        
        log 'closeTab' @numFileTabs()

        if @numFileTabs() <= 1
            post.emit 'menuAction' 'close'
        else
            if @koreTabForPath editor.currentFile
                @delTab editor.currentFile
            else if tab = @activeKoreTab()
                @delTab tab.path

    onCloseOtherTabs: =>

        kore.set 'tabs' [@activeKorePrj(), @activeKoreTab()]
        
    # 000000000  00     00  00000000   
    #    000     000   000  000   000  
    #    000     000000000  00000000   
    #    000     000 0 000  000        
    #    000     000   000  000        
    
    getTmpTab: ->
        
        for t in @tabs
            return t if t.tmpTab
        
    addTmpTab: (file) ->
        
        if tab = @getTmpTab()
            tab.path = file
        else
            tab = @addTab file
            tab?.tmpTab = true
        tab?.update()
        tab
        
    onNewEmptyTab: =>

        log 'onNewEmptyTab'
        @emptyid += 1
        @addTab "untitled-#{@emptyid}"

    onNewTabWithFile: (file) =>

        [file, line, col] = slash.splitFileLine file

        if tab = @tab file
            post.emit 'jumpToFile' path:file, line:line, col:col
        else
            @addTab(file).activate()

        @update()

        if line or col

            post.emit 'singleCursorAtPos' [col, line-1]

    # 000   000   0000000   000   000  000   0000000    0000000   000000000  00000000
    # 0000  000  000   000  000   000  000  000        000   000     000     000
    # 000 0 000  000000000   000 000   000  000  0000  000000000     000     0000000
    # 000  0000  000   000     000     000  000   000  000   000     000     000
    # 000   000  000   000      0      000   0000000   000   000     000     00000000

    navigate: (key) ->
        
        if tab = @activeKoreTab()
            tabs = @koreTabs()
            index = tabs.indexOf tab
            index += switch key
                'left'  ➜ -1
                'right' ➜ +1
            if 0 <= index < tabs.length
                @activate tabs[index].path

    move: (key) ->
        
        if tab = @activeKoreTab()
            switch key
                'left'  ➜ @shiftTab tab, -1
                'right' ➜ @shiftTab tab, +1
                
    shiftTab: (tab, delta) ->
        
        tabs = @koreTabs()
        index = tabs.indexOf tab
        tabs.splice(index, 1)
        tabs.splice(index+delta, 0, tab)
        @cleanTabs()
            
    # 0000000    00000000    0000000    0000000
    # 000   000  000   000  000   000  000
    # 000   000  0000000    000000000  000  0000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000   0000000

    onDragStart: (d, event) =>

        return 'skip' if event.target.classList.contains 'tab'
        
        if event.target.classList.contains 'tabstate'
            return 'skip' 
        
        @dragTab = @tab event.target

        return 'skip' if empty @dragTab
        return 'skip' if event.button != 0

        @dragIndex = @dragTab.index()
        @dragDiv = @dragTab.div.cloneNode true
        @dragTab.div.style.opacity = '0'
        br = @dragTab.div.getBoundingClientRect()
        @dragDiv.style.position = 'absolute'
        @dragDiv.style.top      = "#{br.top}px"
        @dragDiv.style.left     = "#{br.left}px"
        @dragDiv.style.width    = "#{br.width}px"
        @dragDiv.style.height   = "#{br.height}px"
        @dragDiv.style.flex     = 'unset'
        @dragDiv.style.pointerEvents = 'none'
        document.body.appendChild @dragDiv

    onDragMove: (d,e) =>

        swap = (ta, tb) =>
            if ta? and tb?
                [ta, tb] = [tb, ta] if ta.index() > tb.index()
                @tabs[ta.index()]   = tb
                @tabs[tb.index()+1] = ta
                @div.insertBefore tb.div, ta.div
        
        @dragDiv.style.transform = "translateX(#{d.deltaSum.x}px)"
        if tab = @tabAtX d.pos.x
            dragIndex = @dragTab.index()
            hovrIndex = tab.index()
            if dragIndex > hovrIndex
                swap @tabs[hovrIndex], @tabs[dragIndex]
            else if dragIndex < hovrIndex
                swap @tabs[dragIndex], @tabs[hovrIndex]
                
    onDragStop: (d,e) =>

        index = @dragTab.index()
        @dragTab.div.style.opacity = ''
        @dragDiv.remove()
        if index != @dragIndex
            log 'shift' index-@dragIndex
            @shiftTab @koreTabs()[@dragIndex], index-@dragIndex

    #  0000000  000000000   0000000    0000000  000   000  
    # 000          000     000   000  000       000   000  
    # 0000000      000     000000000  0000000   000000000  
    #      000     000     000   000       000  000   000  
    # 0000000      000     000   000  0000000   000   000  
    
    stash: =>

        infos = @tabs.map (t) -> t.stashInfo?()
        window.stash.set 'tabs' infos
        @

    # onStashLoaded: => @onKoreTabs kore.get 'tabs' []
    onStashLoaded: => @update()
        
    revertFile: (file) => @tab(file)?.revert()
    
    # 00000000  000   000  000000000  00000000  000   000   0000000  000   0000000   000   000  
    # 000        000 000      000     000       0000  000  000       000  000   000  0000  000  
    # 0000000     00000       000     0000000   000 0 000  0000000   000  000   000  000 0 000  
    # 000        000 000      000     000       000  0000       000  000  000   000  000  0000  
    # 00000000  000   000     000     00000000  000   000  0000000   000   0000000   000   000  
    
    toggleExtension: ->
        
        prefs.toggle 'tabs|extension'
        
        for tab in @tabs
            tab.update()
                
    #  0000000   0000000   00000000   000000000  000000000   0000000   0000000     0000000  
    # 000       000   000  000   000     000        000     000   000  000   000  000       
    # 0000000   000   000  0000000       000        000     000000000  0000000    0000000   
    #      000  000   000  000   000     000        000     000   000  000   000       000  
    # 0000000    0000000   000   000     000        000     000   000  0000000    0000000   
    
    sortTabs: ->
        
        log 'sortTabs'
        
        sorted = @tabs.filter (t) -> t.isPrj
        remain = @tabs.filter (t) -> not t.isPrj
        
        prjTabs = {}
        for tab in sorted
            prjTabs[tab.file] = [tab]
           
        dangling = []
        while tab = remain.shift()
            prjPath = Projects.dir tab.file
            if valid prjTabs[prjPath]
                prjTabs[prjPath].push tab
            else
                # log 'dangling tab' tab.file
                dangling.push tab
            
        @tabs = []
        for k,v of prjTabs
            if v.length > 1
                @tabs = @tabs.concat v
            else if v.length == 1 and valid v[0].hiddenPrjFiles
                @tabs.push v[0]
            # else
                # log 'no prjTabs?' k
            
        @tabs = @tabs.concat dangling
        
        @div.innerHTML = ''
        for tab in @tabs
            # log 'tab' tab.file
            if tab.div
                # @div.removeChild tab.div
                @div.appendChild tab.div
                
        kore.set 'tabs' @tabs.map (t) -> 
            i = 
                type: t.isPrj ? 'prj' : 'file'
                path: t.file
            i.tmp       = true if t.tmpTab
            i.pinned    = true if t.pinned
            i.collapsed = true if t.collapsed
            i

    onDirty: (dirty) =>
        
        if tab = @activeKoreTab()
            if dirty
                tab.dirty = true
            else
                delete tab.dirty
            @update()

        # @activeTab()?.setDirty dirty

    #  0000000   0000000   000   000  000000000  00000000  000   000  000000000
    # 000       000   000  0000  000     000     000        000 000      000
    # 000       000   000  000 0 000     000     0000000     00000       000
    # 000       000   000  000  0000     000     000        000 000      000
    #  0000000   0000000   000   000     000     00000000  000   000     000

    onContextMenu: (event) => 

        if tab = @tab event.target
            @activate tab.path
        stopEvent event
        @showContextMenu kpos event

    showContextMenu: (absPos) =>

        if not absPos?
            absPos = kpos @view.getBoundingClientRect().left, @view.getBoundingClientRect().top

        opt = items: [
            text:   'Close Other Tabs'
            combo:  'ctrl+shift+w'
        ,
            text:   'New Window'
            combo:  'ctrl+shift+n'
        ,
            text:   'Toggle Tab Extensions'
            combo:  'alt+cmdctrl+t'
        ]

        opt.x = absPos.x
        opt.y = absPos.y
        popup.menu opt

export Tabs
