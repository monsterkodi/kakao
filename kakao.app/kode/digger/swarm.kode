###
 0000000  000   000   0000000   00000000   00     00
000       000 0 000  000   000  000   000  000   000
0000000   000000000  000000000  0000000    000000000
     000  000   000  000   000  000   000  000 0 000
0000000   00     00  000   000  000   000  000   000
###

import * as three from 'three'

use ./lib/geom

function Swarm

    @: @scene ->
        
        @count = 500
        sphere = geom.sphere radius:0.5 sgmt:6 material:'shinywhite'
        @dummy = new three.Object3D()
        @color = new three.Color()
        @pos   = new three.Vector3()
        @norm  = new three.Vector3()
        @orig  = new three.Vector3()
        @rot   = new three.Quaternion()
        @rotd  = new three.Quaternion()
        @scale = new three.Vector3()
        @mesh  = new three.InstancedMesh(sphere.geometry sphere.material @count)
        @mesh.instanceMatrix.setUsage three.DynamicDrawUsage
        @mesh.castShadow = true
        @scene.scene.add @mesh
        
        @rotAxis = []
        @rotAngle = []
        for i in 0...@count
            ra = new three.Vector3 
            ra.randomDirection()
            @rotAxis.push ra
            @rotAngle.push 0.1
        
    spawn: ->
        
        @scale.set 1 1 1
        @orig.set 0 0 0
        
        i = 0
        while i < @count
            
            # @pos.set Math.random()-0.5 Math.random()-0.5 Math.random()-0.5
            # @pos.normalize()
            # @pos.multiplyScalar 50
            # @dummy.position.copy @pos
            # 
            # @dummy.lookAt @orig
            
            @pos.randomDirection()
            @pos.projectOnPlane @rotAxis[i]
            @pos.normalize()
            @rot.setFromAxisAngle @pos 0
            @pos.multiplyScalar 50
            @dummy.matrix.compose @pos @rot @scale

            @mesh.setMatrixAt i @dummy.matrix
            
            @color.set 0 0 1 #Math.random()
            @mesh.setColorAt i @color
            
            i++
        
        @mesh.instanceMatrix.needsUpdate = true
        @mesh.instanceColor.needsUpdate = true
        
    update: deltaSec tickInfo ->
        
        for i in 0...@count
            
            @mesh.getMatrixAt i @dummy.matrix
            @dummy.matrix.decompose @pos @rot @scale
            # color = @scene.mc.getColor parseInt(@pos.x+@scene.resolution/2) parseInt(@pos.y+@scene.resolution/2) parseInt(@pos.z+@scene.resolution/2)
            # @color.set color[0] color[1] color[2]
            # f = (Math.sin(tickInfo.time/(2000-(color[0]+color[2])*900))+1.2)*2
            # @color.multiplyScalar f
            # @mesh.setColorAt i @color
            # @scale.set 1 1 color[0]*(50+(f-2.4)*10)
            
            @rotd.setFromAxisAngle @rotAxis[i] @rotAngle[i] * deltaSec
            @pos.applyQuaternion @rotd
            @rot.multiply @rotd
            
            @dummy.matrix.compose @pos @rot @scale
            @mesh.setMatrixAt i @dummy.matrix

        @mesh.instanceMatrix.needsUpdate = true
        # @mesh.instanceColor.needsUpdate = true
            
export Swarm
