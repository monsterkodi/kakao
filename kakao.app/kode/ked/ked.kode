###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    

    bun --watch js/ked/ked.js kode/ked/kde.kode
###

use ../kxk ▪ karg kstr kseg slash post
use ../kxk ◆ nfs
use ./view ◆ screen cells status quicky menu finder
use ./util ◆ logfile util prjcts session color help julia
use        ◆ ttio editor state konsole

function KED

    @: ->

        @version = '0.0.5'
        args = karg """
            
            ked [file]
                options                      **
                version    log version       = false
                
            """ preHelp:help.header() version:@version
        
        process.on 'uncaughtException' @onException
            
        @viewSizes = konsole: [0 0]
        
        @logfile = new logfile
        @session = new session
        global.ked_session = @session
        @session.on 'loaded' @onSessionLoaded
                    
        @t = new ttio
        
        global.lfc = args... => lf.apply null args; if global.lc? ➜ global.lc.apply null args 
        
        @julia   = new julia
        
        @screen  = new screen @t
        
        @menu    = new menu     @screen        
        @quicky  = new quicky   @screen 
        @finder  = new finder   @screen 
        @editor  = new editor   @screen 'editor'  ['scroll' 'gutter' 'mapscr' ]
        # @konsole = new konsole  @screen 'konsole' ['scroll' 'gutter' 'mapscr' 'knob']
        @konsole = new konsole  @screen 'konsole' ['scroll' 'gutter' 'knob']
        @status  = new status   @screen @editor.state
        
        lfc "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ked #{@version} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓" 

        @editor.state.hasFocus = true
        
        post.on 'redraw'        @redraw
        post.on 'window.focus'  @redraw
        post.on 'window.blur'   @redraw
        post.on 'view.size'     @onViewSize
        post.on 'quicky'        @onQuicky
        post.on 'file.new'      @newFile
        post.on 'quit'          @quit
        
        @mouseHandlers = [@finder @quicky @menu @konsole @editor]
        @wheelHandlers = [@finder @quicky @menu @konsole @editor]
        @keyHandlers   = [@finder @quicky @menu @konsole @editor]
        
        @t.on 'key'    @onKey
        @t.on 'mouse'  @onMouse
        @t.on 'wheel'  @onWheel
        @t.on 'resize' @onResize
        @t.on 'paste'  @onPaste
                                    
        if valid args.options
            @loadFile args.options[0]
        else
            @newFile()
            
    onSessionLoaded: => 
    
        # lf 'ked.onSessionLoaded' @currentFile
        @menu.show true if empty @currentFile
                        
    # 00000000   000   000  000   000  
    # 000   000  000   000  0000  000  
    # 0000000    000   000  000 0 000  
    # 000   000  000   000  000  0000  
    # 000   000   0000000   000   000  
    
    @run: -> new KED()

    # 000       0000000   000   000   0000000   000   000  000000000  
    # 000      000   000   000 000   000   000  000   000     000     
    # 000      000000000    00000    000   000  000   000     000     
    # 000      000   000     000     000   000  000   000     000     
    # 0000000  000   000     000      0000000    0000000      000     
    
    layout: ->
        
        w = @t.cols()
        h = @t.rows()
        k = @viewSizes.konsole[1]
        
        if true # status at top
            @status.layout  0  0     w     1
            @editor.layout  0  1     w h-k-1    
            @konsole.layout 0  h-k-1 w   k
        else # status at bottom
            @status.layout  0  h-1   w     1
            @editor.layout  0  0     w h-k-1    
            @konsole.layout 0  h-k-1 w   k
    
    quit: msg ○=>
        
        ○ @session.save()
        
        lf "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛" 
        @t?.quit()
        @logfile.close ->
            error msg if msg?
            process.exit msg? ? 1 : 0
                
    onException: err => @quit err

    # 000   000  00000000  000   000  
    # 0000  000  000       000 0 000  
    # 000 0 000  0000000   000000000  
    # 000  0000  000       000   000  
    # 000   000  00000000  00     00  
    
    newFile: =>
        
        delete @currentFile
        @status.file = ''
    
        @editor.state.syntax.ext = 'txt'
        @editor.state.loadLines ['']
        @t.setCursor 0 0
        
        @editor.mapscr?.reload()

        @redraw()
            
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
        
    reloadFile: => 
        
        if valid @currentFile
            @loadFile @currentFile
        else
            @newFile()
        
    loadFile: p ○=>
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @status.file = slash.tilde  p
            @currentFile = slash.absolute p
        else
            @status.file = slash.normalize p
            @currentFile = slash.path process.cwd() p

        @currentFile =○ nfs.resolveSymlink @currentFile
        # lf 'ked.loadFile @currentFile' @currentFile

        text =○ nfs.read @currentFile
        
        segls = util.seglsForText text
        
        @editor.state.syntax.ext = slash.ext @currentFile
        @editor.state.loadSegls segls
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
        @editor.mapscr?.reload()
        
        @redraw()
        
        prjcts.index @currentFile
        @t.setTitle slash.name(@status.file)
        
        @saveSessionFile @currentFile 'loaded'        
        @
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ○=>
        
        text = kseg.str @editor.state.allLines()
        
        if valid @currentFile
            ○ nfs.write @currentFile text
            @editor.state.clearHistory() # lazy way to 'undirty' would be nicer to be able to undo after save!
            @redraw()
            @saveSessionFile @currentFile 'saved'
            
    saveAs: => lfc 'saveAs'

    saveSessionFile: file type ->
        
        key = "files▸#{type}"
        filesLoaded = @session.get key []
        index = filesLoaded.indexOf @currentFile
        filesLoaded.splice index 1 if index >= 0
        filesLoaded.push @currentFile
        maxFilesLoaded = 10
        filesLoaded = filesLoaded[max(0 filesLoaded.length-maxFilesLoaded)..]
        @session.set key filesLoaded
    
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    onPaste: text => 
    
        @editor.state.insert text
        @redraw()
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>

        if event.type == 'wheel'

            for handler in @wheelHandlers
                if handler.onWheel event
                    break
        
        else
        
            for handler in @mouseHandlers
                if handler.onMouse event
                    break

        @redraw()                
                
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        #lf 'ked.onKey' key noon(event)
        
        switch key
            
            'alt+q' 'ctrl+q' 'cmd+esc'   ➜ ⮐ @quit()
            'alt+r' 'ctrl+r' 'cmd+r'     ➜ ⮐ @reloadFile()
            'ctrl+s' 'cmd+s'             ➜ ⮐ @saveFile()
            'shift+cmd+s' 'shift+ctrl+s' ➜ ⮐ @saveAs()
            'cmd+n' 'ctrl+n'             ➜ ⮐ @newFile()
            'alt+.'                      ➜ ⮐ @menu.show()
            'cmd+p' 'ctrl+p'             ➜ ⮐ @quicky.toggle @currentFile
            'cmd+f' 'ctrl+f'             ➜ ⮐ @finder.show @editor.state.textOfSelectionOrWordAtCursor()
            'cmd+o' 'ctrl+o'
            'cmd+.' 'ctrl+.'             ➜ ⮐ @quicky.gotoDir slash.dir(@currentFile)
            
        for handler in @keyHandlers
            break if result = handler.onKey key event
                
        @redraw() if result?.redraw != false
        
    #  0000000   000   000  000   0000000  000   000  000   000  
    # 000   000  000   000  000  000       000  000    000 000   
    # 000 00 00  000   000  000  000       0000000      00000    
    # 000 0000   000   000  000  000       000  000      000     
    #  00000 00   0000000   000   0000000  000   000     000     
    
    onQuicky: event ○=>
        
        if slash.isAbsolute event
            file = event
        else
            file = slash.absolute event slash.dir(@currentFile)
        
        ⮐ if slash.samePath file @currentFile
            
        exists =○ nfs.fileExists file
        if exists
            ○ @loadFile file
                                
    #  0000000  000  0000000  00000000  
    # 000       000     000   000       
    # 0000000   000    000    0000000   
    #      000  000   000     000       
    # 0000000   000  0000000  00000000  
    
    onViewSize: name x y => 
    
        @viewSizes[name] = [x min(y @screen.rows-1)]
        
        @editor.mapscr?.onResize()
        @konsole.mapscr?.onResize()
        
    onResize: cols rows size => 
        
        @redraw()
        @editor.mapscr?.onResize()
        @konsole.mapscr?.onResize()
    
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: =>    

        clearImmediate @redrawId
        @redrawId = setImmediate @draw
                                      
    draw: =>
              
        start = process.hrtime()
        
        @status.gutter = @editor.state.gutterWidth()
        
        @screen.init()

        @layout()
        
        if not @menu.greet
            @editor.draw()
            @status.draw()
            @konsole.draw()
            
        @menu.draw()
        @quicky.draw()
        @finder.draw()
        
        @screen.render()
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
export KED.run

◆main
    # log '◆ main'
    KED.run()

