
#  ███████   ████████   ████████    ███████   ███   ███
# ███   ███  ███   ███  ███   ███  ███   ███   ███ ███ 
# █████████  ███████    ███████    █████████    █████  
# ███   ███  ███   ███  ███   ███  ███   ███     ███   
# ███   ███  ███   ███  ███   ███  ███   ███     ███   

class array

    @: (...) ->
        
        for i v in ipairs({...})
            table.insert @ v

    $: -> 
    
        s = ".\n"  
        for i v in ipairs(@)
            s = s & "    " & i & "    " & v & "\n"
        s

    str: -> $@
    
    map: f ->
    
        t = array()
        for i v in ipairs(@)
            t[i] = f(v)
        t
    
    filter: f ->
    
        t = array()
        for i v in ipairs(@)
            if f(v i)
                t:push v
        t
        
    shift: -> 

        if @len > 0 ➜ ⮐  table.remove @ 1
        nil
        
    pop: -> 

        if @.len > 0 ➜ ⮐  table.remove @ @.len
        nil
        
    push: ... -> 

        for i v in ipairs {...}
            @[@.len+1] = v
        @
        
    unshift: v -> 

        table.insert @ 1 v
        @
        
    slice: first last ->

        if last == nil ➜ last = @.len
        s = array()
        for i in first..last
            s:push @[i]
        s
        
    keydict: key ->

        t = {}
        for i v in ipairs(@)
            t[v[key]] = v
        t
    
    indexdict: ->

        t = {}
        for i v in ipairs(@)
            t[v] = i
        t
                    
    indexof: e ->
    
        for i v in ipairs @
            if v == e ➜ ⮐  i 
        -1
        
    has:      e -> @indexof(e) >= 0
    contains: e -> @indexof(e) >= 0

array.static.isarr = a ->
    
    ⮐  false if type(a) != "table"
    a.len > 0
    
⮐  array