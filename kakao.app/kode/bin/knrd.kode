###
    000   000  000   000  00000000   0000000    
    000  000   0000  000  000   000  000   000  
    0000000    000 0 000  0000000    000   000  
    000  000   000  0000  000   000  000   000  
    000   000  000   000  000   000  0000000    

    transpiles kode, styl and pug files
###

import kode     from './kode/kode.js'
import fs       from '../lib/kxk/fs.js'
import slash    from '../lib/kxk/slash.js'
import noon     from '../lib/kxk/noon.js'
import { pug, stylus } from '../../bin/min.mjs'

__dirname = import.meta.dirname

knrd = (files = [], opt = {}) ‚óã->
            
    opt.rerunWhenDirty ?= true
    opt.logVerbose ?= false
    
    ‚óè üî®    
    kodeDir = slash.path __dirname + '/../../kode'
    pugDir  = slash.path __dirname + '/../../pug'
    jsDir   = slash.path __dirname + '/../../js'
    cssDir  = slash.path __dirname + '/../../js/css'
    
    if empty files
        
        list  = await fs.list kodeDir
        list  = list.concat await fs.list pugDir
        list  = list.filter (item) -> item.type == 'file'
        files = list.map (item) -> item.path
        
    # log 'files, opt' files, opt
    log 'üî® ' files.length
    transpiled = 0
        
    for file in files
        
        # log file, slash.ext(file), slash.parse(file)  
        
        switch slash.ext(file) 
            
            'kode'
                        
                kodeFile = file
                jsFile   = slash.swapExt kodeFile.replace(kodeDir, jsDir), 'js'
                
                kodeText = await fs.read kodeFile
                origText = await fs.read jsFile
                
                # ‚óè‚ñ∏ üî®
                k0de = new kode
                compText = k0de.compile kodeText, file
                # ‚óè‚ñ™ üî®

                if empty compText
                    log y5('‚úò '), r5(err), r4('transpiles to empty!')
                else
                    if origText != compText
                        transpiled++
                        log b5('‚ñ∂ '), g5 slash.tilde kodeFile
                        await fs.write jsFile, compText
                        log b5('‚úî '), g5 slash.tilde jsFile
                    else if opt.logVerbose
                        log g2('‚úî '), g3 slash.tilde kodeFile
                
            'styl'
            
                stylFile = file
                cssFile  = slash.swapExt stylFile.replace(pugDir, cssDir), 'css'
                
                stylText = await fs.read stylFile
                origText = await fs.read cssFile

                compText = stylus stylText
                
                if empty compText
                    log y5('‚úò '), r5(err), r4('transpiles to empty!')
                else
                    if origText != compText
                        transpiled++
                        log c3('‚ñ∂ '), c5 slash.tilde stylFile
                        await fs.write cssFile, compText
                        log b5('‚úî '), g5 slash.tilde cssFile
                    else if opt.logVerbose
                        log g2('‚úî '), c3 slash.tilde stylFile
                null
                    
            'pug'
            
                srcFile = file
                tgtFile = slash.swapExt srcFile.replace(pugDir, jsDir), 'html'
                
                srcText = await fs.read srcFile
                tgtText = await fs.read tgtFile
                
                compText = pug srcText
                    
                if empty compText
                    log y5('‚úò '), r5(srcFile), r4('transpiles to empty!')
                else
                    if tgtText != compText
                        transpiled++
                        log m3('‚ñ∂ '), m4 slash.tilde srcFile
                        await fs.write tgtFile, compText
                        log b5('‚úî '), g5 slash.tilde tgtFile
                    else if opt.logVerbose
                        log g2('‚úî '), m3 slash.tilde srcFile
                null
                
            'noon'
            
                srcFile = file
                tgtFile = slash.swapExt srcFile.replace(kodeDir, jsDir), 'json'
                
                srcText = await fs.read srcFile
                tgtText = await fs.read tgtFile
                
                compText = JSON.stringify noon.parse srcText
                    
                if empty compText
                    log y5('‚úò '), r5(srcFile), r4('transpiles to empty!')
                else
                    if tgtText != compText
                        transpiled++
                        log m3('‚ñ∂ '), m4 slash.tilde srcFile
                        await fs.write tgtFile, compText
                        log b5('‚úî '), g5 slash.tilde tgtFile
                    else if opt.logVerbose
                        log g2('‚úî '), m3 slash.tilde srcFile
                null

            ‚ûú
                error 'unknown file type' file
                
    if opt.rerunWhenDirty and transpiled
        
        knrd files, rerunWhenDirty:false
        
export knrd
