###
     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
    ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà       
    ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   
    ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà            ‚ñà‚ñà‚ñà  
     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   

    an editor that can't edit ;)
    
    can display selections with nice rounded edges and is used almost 
    everywhere by now: 
        context menu dirtree funtree quicky browse finder searcher...
    
    takes list of items as input and extracts text to display from them    
    supports filtering of the items
###

use ../../../kxk    ‚ñ™ kstr kseg slash krzl post
use ../../theme     ‚óÜ color theme 
use ../../edit/tool ‚óÜ belt
use ../../edit      ‚óÜ editor

function choices extends editor

    @: screen name features=[] ->

        super screen name features
        
        @setColor 'bg'      theme.choices_bg
        @setColor 'current' theme.choices_current
        
        @pointerType = 'pointer'
        @roundedSelections = true
        @frontRoundOffset = 0
        @hoverIndex = -1
        @hoverForSubmenu = false
        
        @items = []
        @fuzzied = @items
        @filterText = ''
        
    setColor: key color ->
    
        super key color
    
        if key == 'bg'
            @setColor           'empty' @color.bg
            @gutter?.setColor   'bg'    @color.bg
            @scroll?.setColor   'bg'    @color.bg

    extract: item => @key and item is obj ? item[@key] : kseg.str(item)
        
    clear: => @set []
    
    clearEmpty: ->
    
        @items = []
        @fuzzied = @items
        @state.clearEmpty()
        
    #  0000000  00000000  000000000  
    # 000       000          000     
    # 0000000   0000000      000     
    #      000  000          000     
    # 0000000   00000000     000     
    
    set: @items @key ->
        
        @items ?= []
        @fuzzied = @items
        @filterText = ''
        
        lines = @key ? @items.map(@extract) : @items
        # log "#{@name} set #{key}" lines
        @state.loadLines lines
        
    add: item  ->
    
        @items.push item
        @state.addLine item.line item.ext
        
    append: items ext key='line'->
    
        @items = @items.concat items
        @fuzzied = @items # ùúèùñçùöíùñò ùöíùñò ‚üí…º‚äö‚à©ùöê! ùöíùúèœµ‚´ôùñò ùñòùñç‚äöùìä‚üÖùíπ ùîüœµ …ºœµœùùìäùìèùìèùöíœµùíπ ùöí‚à©ùñòùúèœµùïíùíπ
        @state.appendLines items.map((i) -> i[key]) ext
                
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    drawCursors: ->
        
    drawSelections: ->
        
        ‚Æê  if empty @state.s.selections
        
        ‚Æê  super() if not @roundedSelections
        
        fg = @color.current
        if not @cells.screen.t.hasFocus
            fg = color.darken fg
        
        sel = @state.s.selections[0]
                
        li = sel[1]
        y  = li-@state.s.view[1]
        
        ‚Æê  if y >= @cells.rows
        
        xs = max sel[0] kseg.headCount(@state.s.lines[li] ' ')
        xs += @frontRoundOffset if xs == 0

        @cells.set_ch_fg xs-1-@state.s.view[0] y 'ÓÇ∂' fg
        
        for x in xs...sel[2]
            @cells.set_bg x-@state.s.view[0] y fg
            @cells.adjustContrastForHighlight x-@state.s.view[0] y fg
            
        @cells.set_ch_fg x-@state.s.view[0] y 'ÓÇ¥' fg

    numChoices:  -> @items.length
    numFiltered: -> @fuzzied.length

    currentIndex: -> @state.mainCursor()[1]
    current: opt ->
    
        cc = @fuzzied[@currentIndex()]
        if cc is str
            if opt?.trim == 'front'
                cc = ltrim cc
            else if opt?.trim != false 
                cc = trim cc
        cc
        
    choiceAtRow: row -> @fuzzied[row]
    
    # 000   000  00000000  000   000  000000000        00000000   00000000   00000000  000   000  
    # 0000  000  000        000 000      000           000   000  000   000  000       000   000  
    # 000 0 000  0000000     00000       000           00000000   0000000    0000000    000 000   
    # 000  0000  000        000 000      000           000        000   000  000          000     
    # 000   000  00000000  000   000     000           000        000   000  00000000      0      

    hasNext: -> @nextRow()?
    hasPrev: -> @prevRow()?

    nextRow: ->
        
        y = @state.mainCursor()[1]
        while y < @state.s.lines.length-1
            y += 1
            ‚Æê  y if kseg.trim(@state.s.lines[y]).length
        
    prevRow: ->

        y = @state.mainCursor()[1]
        while y > 0
            y -= 1
            ‚Æê  y if kseg.trim(@state.s.lines[y]).length
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    select: row -> 
        
        ‚Æê  if not row is num
        ‚Æê  if row < 0 or row >= @state.s.lines.length
    
        @state.setSelections [belt.rangeOfLine(@state.s.lines row)]
        @state.setMainCursor 0 row
        # log "#{@name} focusable #{@focusable}"
        @grabFocus() if @focusable
        @emit 'select' @choiceAtRow(row)
        
    selectFirst: -> @select 0
    
    moveSelection: dir ->
        
        switch dir
            'down' ‚ûú @selectNext()
            'up'   ‚ûú @selectPrev() 
        @
        
    selectNext: -> @select @nextRow()
    selectPrev: -> @select @prevRow()
                    
    # 000   000  00000000  000   0000000   000   000  000000000  
    # 000 0 000  000       000  000        000   000     000     
    # 000000000  0000000   000  000  0000  000000000     000     
    # 000   000  000       000  000   000  000   000     000     
    # 00     00  00000000  000   0000000   000   000     000     
        
    weight: item text =>

        itemText = @extract item
        p = slash.parse itemText
        
        matchOrLevenshtein = t -> 
            idx = t.indexOf text
            if idx < 0
                idx = t.length + kstr.levensthein(t text)
            idx

        w  = @items.indexOf(item)               # try to keep order of original items
        w += 10 * matchOrLevenshtein(p.name)    # high focus on file name
        w += 5  * matchOrLevenshtein(p.dir)     # lesser focus on dir
        w += valid p.ext ? (0.1 * matchOrLevenshtein(p.ext)) : 4 # low weight for extensions
        w                                                        # has the side-effect of moving directories down

    # 00000000  000  000      000000000  00000000  00000000   
    # 000       000  000         000     000       000   000  
    # 000000    000  000         000     0000000   0000000    
    # 000       000  000         000     000       000   000  
    # 000       000  0000000     000     00000000  000   000  
    
    filter: text =>
        
        ‚Æê  if empty @items
           
        ‚Æê  if text == @filterText
           
        ‚Æê  @set(@items @key) if empty text
            
        @filterText = text
            
        fuzz = new krzl values:@items extract:@extract
        
        @fuzzied = fuzz.filter text

        @fuzzied.sort (a b) => @weight(a text) - @weight(b text)
        
        lines = @fuzzied.map @extract

        lines = [''] if empty lines
        
        @state.loadLines lines

    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    hoverChoiceAtIndex: index event => 
    
        ‚Æê  true if @hoverIndex == index
        
        @hoverIndex = index
        @state.setMainCursor 0 index
        @select @hoverIndex
        post.emit 'pointer' 'pointer'
        @emitAction 'hover' @current() event
        redraw:true
        
    unhover: =>
        
        @hoverIndex = -1
        @state.deselect()
        post.emit 'pointer' 'default'
        redraw:true

    dragChoiceAtIndex: index event =>
        
        @hoverChoiceAtIndex index event
        @emitAction 'drag' @fuzzied[index] event
        redraw:true
        
    clickChoiceAtIndex: index event =>
        
        @hoverIndex = -1  
        @emitAction 'click' @fuzzied[index] event
        redraw:true
        
    doubleClickChoiceAtIndex: index event =>
        
        @hoverIndex = -1  
        @emitAction 'doubleclick' @fuzzied[index] event
        redraw:true
        
    onMouse: event =>
        
        # log "choices #{r6 @name} onMouse"
    
        ret = super event; ‚Æê  ret if ret?.redraw
        
        ret = @mapscr?.onMouse event; ‚Æê  ret if ret # mapview doesn't do mouse yet, just to prevent clickthrough to editor
        
        if @hover
            
            [col row] = @cells.posForEvent event
            
            if @state.isValidLineIndex(row)
                
                if @hoverForSubmenu and event.type == 'move' and col > kseg.width(@state.s.lines[row])
                    dx = Math.abs event.delta[0]
                    dy = Math.abs event.delta[1]
                    ‚Æê  if dx*2 >= dy
                
                switch event.type
                    
                    'move'  
                            ‚Æê  @hoverChoiceAtIndex row + @state.s.view[1] event
                            
                    'press' 
                    
                        if event.count == 2
                            ‚Æê  @doubleClickChoiceAtIndex row + @state.s.view[1] event
                        else
                            ‚Æê  @clickChoiceAtIndex row + @state.s.view[1] event
                            
                    'drag'
                    
                            ‚Æê  @dragChoiceAtIndex row + @state.s.view[1] event
        @hover
        
    #  0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000          000     000  000   000  0000  000  
    # 000000000  000          000     000  000   000  000 0 000  
    # 000   000  000          000     000  000   000  000  0000  
    # 000   000   0000000     000     000   0000000   000   000  
    
    emitAction: action choice event =>
        
        @emit 'action' action choice event
                    
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
    
        # log "#{@name} onKey #{key}"
        
        switch event.combo        
            'up' 
            'down'   
                @moveSelection event.combo
                ‚Æê  true
        
        ‚Æê  if not @hasFocus()
            
        switch event.combo
        
            'esc'
            'left' 
            'right'  
            'space'  
            'delete'
            'return' ‚ûú @emitAction event.combo @current() event
                        
        # not calling super here effectively disables all text-editing
        true
         
global.choices_class = choices # hack to prevent import recursion
export choices
