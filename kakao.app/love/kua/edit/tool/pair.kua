###
000000000  00000000  000   000  000000000
   000     000        000 000      000   
   000     0000000     00000       000   
   000     000        000 000      000   
   000     00000000  000   000     000   
###

class pair

    # ███   ███  ███   ███  ███████     ███████   ███       ███████   ███   ███   ███████  ████████  ███████  
    # ███   ███  ████  ███  ███   ███  ███   ███  ███      ███   ███  ████  ███  ███       ███       ███   ███
    # ███   ███  ███ █ ███  ███████    █████████  ███      █████████  ███ █ ███  ███       ███████   ███   ███
    # ███   ███  ███  ████  ███   ███  ███   ███  ███      ███   ███  ███  ████  ███       ███       ███   ███
    #  ███████   ███   ███  ███████    ███   ███  ███████  ███   ███  ███   ███   ███████  ████████  ███████  

    @isUnbalancedPosition: lines pos char ->
    
        # revs = {
        #     ']': '[' 
        #     '}': '{' 
        #     ')': '('
        #     '"': '"'
        #     "'": "'"}
        #
        # p = pepe kseg.str(lines[pos[2]])
        # start = p.unbalanced∙slice(2)∙map((s) -> s.start)
        # valid start and start∙has(revs[char])
        false
        
    #  0000000  000000000  00000000   000  000   000   0000000   
    # 000          000     000   000  000  0000  000  000        
    # 0000000      000     0000000    000  000 0 000  000  0000  
    #      000     000     000   000  000  000  0000  000   000  
    # 0000000      000     000   000  000  000   000   0000000   
    
    @isRangeInString: lines rng -> @rangeOfStringSurroundingRange(lines rng) != nil

    @rangeOfStringSurroundingRange: lines rng ->
        ir = belt.rangeOfInnerStringSurroundingRange lines rng
        if ir
            belt.rangeGrownBy ir 1

    @rangeOfInnerStringSurroundingRange: lines rng ->
        
        ⮐  if belt.isInvalidLineIndex lines rng[2]

        rgs = belt.rangesOfStringsInText lines[rng[2]]∙str() rng[2] 
        rgs = belt.rangesShrunkenBy rgs 1
        for r in rgs
            ⮐  r if belt.rangeContainsRange r rng
            
    @rangesOfStringsInText: text li=1 ->
        
        rngs = []
        ss = -1
        cc = nil
        for i in 1..text.len
            c = string.sub(text i i)
            if not cc and (c == "'" or c == '"')
                cc = c
                ss = i
            elif c == cc
                if (string.sub(text i-1 i-1) != '\\') or (i>2 and string.sub(text i-2 i-2) == '\\')
                    rngs∙push [ss li i+1 li]
                    cc = nil
                    ss = -1
        rngs
        
    #  0000000   000   000  000000000   0000000  000  0000000    00000000      0000000  000000000  00000000   
    # 000   000  000   000     000     000       000  000   000  000          000          000     000   000  
    # 000   000  000   000     000     0000000   000  000   000  0000000      0000000      000     0000000    
    # 000   000  000   000     000          000  000  000   000  000               000     000     000   000  
    #  0000000    0000000      000     0000000   000  0000000    00000000     0000000      000     000   000  
    
    @positionsAndRangesOutsideStrings: lines rngs posl ->
        
        found = []
        
        for rng in rngs
            if not belt.isRangeInString(lines rng)
                found∙push rng
                
        for pos in posl
            if not belt.isRangeInString(lines belt.rangeForPos(pos))
                found∙push pos
        found
        
    # 00000000    0000000   000  00000000    0000000         0000000  000   000  00000000   00000000   0000000     0000000   
    # 000   000  000   000  000  000   000  000             000       000   000  000   000  000   000  000   000  000        
    # 00000000   000000000  000  0000000    0000000         0000000   000   000  0000000    0000000    000   000  000  0000  
    # 000        000   000  000  000   000       000             000  000   000  000   000  000   000  000   000  000   000  
    # 000        000   000  000  000   000  0000000         0000000    0000000   000   000  000   000  0000000     0000000   
    
    @rangesOfNestedPairsAtPositions: lines posl ->
        
        rngs = []
        for pos in posl∙each()
            for pair in pepe.pairlAtCol(kseg.str(lines[pos[2]]) pos[1])
                rngs∙push [pair.rng[1] pos[2] pair.rng[2] pos[2]]
        rngs

    @spansOfNestedPairsAtPositions: lines posl ->
        
        spans    = []
        brackets = []
        strings  = []
        
        for pos in posl∙each()
            
            for pair in pepe.pairlAtCol(kseg.str(lines[pos[2]]) pos[1])
                open  = [pair.rng[1] pos[2] pair.rng[1]+pair.start.len]
                close = [pair.rng[2] pos[2] pair.rng[2]+pair.ende.len]
                spans∙push open
                spans∙push close
                
                if pair.start == '"' or pair.start == "'"
                    strings∙push open
                    strings∙push close
                else
                    brackets∙push open
                    brackets∙push close
                
        [spans brackets strings]

    @rangesOfPairsSurroundingPositions: lines pairl posl ->

        rngs = []
        for pos in posl∙each()
            for pair in pairl∙each()
                if kstr.endsWith(belt.chunkBeforePos(lines pos) pair[1]) and kstr.startsWith(belt.chunkAfterPos(lines pos) pair[2])
                    rngs∙push [pos[1] - pair[1].len pos[2] pos[1] + pair[2].len pos[2]]
        rngs
        
    @stringDelimiterSpansForPositions: lines posl ->
        
        spans = []
        for pos in posl∙each()
            srng = belt.rangeOfStringSurroundingRange lines [pos[1] pos[2] pos[1] pos[2]]
            if srng
                spans∙push [srng[1] srng[2] srng[1]+1]
                spans∙push [srng[3]-1 srng[4] srng[3]]
            elif lines[pos[2]][pos[1]] == '"' or lines[pos[2]][pos[1]] == "'"
                srng = belt.rangeOfStringSurroundingRange lines [pos[1]+1 pos[2] pos[1]+1 pos[2]]
                if srng
                    spans∙push [srng[1] srng[2] srng[1]+1]
                    spans∙push [srng[3]-1 srng[4] srng[3]]
        spans
        
    #  ███████   ████████   ████████  ███   ███         ███████  ███       ███████    ███████  ████████
    # ███   ███  ███   ███  ███       ████  ███        ███       ███      ███   ███  ███       ███     
    # ███   ███  ████████   ███████   ███ █ ███        ███       ███      ███   ███  ███████   ███████ 
    # ███   ███  ███        ███       ███  ████        ███       ███      ███   ███       ███  ███     
    #  ███████   ███        ████████  ███   ███         ███████  ███████   ███████   ███████   ████████

    @openCloseSpansForPositions: lines posl ->

        spans = []
        for pos in posl∙each()
            sps = @openCloseSpansForPosition lines pos
            if sps
                spans += sps
        spans
        
    @openCloseSpansForPosition: lines pos ->
    
        # log "openCloseSpansForPosition #{lines}[ ]\npos #{pos}"
                
        open = {
            '[': ']'
            '{': '}'
            '(': ')'}
        revs = {
            ']': '['
            '}': '{'
            ')': '('}
            
        opns = dict.keys open
        clos = dict.values open
        
        maxLookups = 1000 # careful, increasing this drops performance significantly!
        lastOpen = nil
        firstClose = nil
        closeEncounters = ''
        openEncounters = ''
        
        bp = [pos[1] pos[2]]
        stack = []
        
        if not opns∙has lines[bp[2]][bp[1]]
        
            closeEncounters = ''
            openEncounters = ''
            
            stack = []
            
            cnt = 0
            while true
                cont = false
                bp[1] -= 1
                if bp[1] >= 1
                    prev = lines[bp[2]][bp[1]]
                    if opns∙has prev
                        if stack.len > 0
                            if open[prev] == stack[^1]
                                openEncounters &= prev
                                stack∙pop()
                                cont = true
                            else
                                ⮐ 
                        if not cont
                            lastOpen = prev
                            break
                    elif clos∙has prev
                        stack∙push prev
                        closeEncounters &= prev
                else
                    bp[2] -= 1
                    break if bp[2] < 1
                    bp[1] = lines[bp[2]].len
    
                if not cont
                    break if lastOpen
                    break if bp[2] < 1
                    cnt += 1
                    break if cnt > maxLookups
        else
            lastOpen = lines[bp[2]][bp[1]]
            
        stack = []
        ap    = [max(bp[1]+1 pos[1]) pos[2]]
        cnt   = 0
        
        while ap[2] < lines∙len()
            
            next = lines[ap[2]][ap[1]]
            if clos∙has next
                if stack.len > 0
                    if open[stack[^1]] == next
                        stack∙pop()
                    else
                        ⮐  # stack mismatch
                else
                    firstClose = next
                    break
            elif opns∙has next
                stack∙push next

            ap[1] += 1
            if ap[1] > lines[ap[2]]∙len()
                ap[1] = 1
                ap[2] += 1
            cnt += 1
            if cnt > maxLookups
                break 

        # log "lastOpen #{lastOpen} firstClose #{firstClose}" 
        if not lastOpen or not firstClose
            if pos[2] > lines∙len() ➜ log "pos[2] too large" ; ⮐  
            ⮐  if empty lines[pos[2]]
            # if pos[1]-1 > lines[pos[2]].len ➜ log "pos[1]-1 #{pos} too large #{lines[pos[2]].len}" ; ⮐  
            # if lines[pos[2]].len > opns.len ➜ log "lines[pos[2]] #{lines[pos[2]].len} too large for revs #{revs.len}" ; ⮐  
            # ⮐  if empty revs[lines[pos[2]]]
            # if pos[1]-1 >= revs[lines[pos[2]]].len ➜ log "pos[1]-1 too large for revs" ; ⮐  
            if clos∙has(lines[pos[2]][pos[1]-1]) and kstr.find(openEncounters revs[lines[pos[2]][pos[1]-1]]) >= 1
                ⮐  @openCloseSpansForPosition lines [pos[1]-1 pos[2]]
            ⮐
        
        # log "lastOpen #{lastOpen} #{open[lastOpen]} firstClose #{firstClose}" 
        if open[lastOpen] == firstClose
            ⮐  [[bp[1] bp[2] bp[1]+1] [ap[1] ap[2] ap[1]+1]]
        ⮐      
⮐  pair
