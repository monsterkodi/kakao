###
00000000  000   000  000   000   0000000  000      000   0000000  000000000
000       000   000  0000  000  000       000      000  000          000   
000000    000   000  000 0 000  000       000      000  0000000      000   
000       000   000  000  0000  000       000      000       000     000   
000        0000000   000   000   0000000  0000000  000  0000000      000   
###

use ../../kxk ▪ drag elem post
use ../tools  ◆ FuncItems Indexer
use ../editor ◆ Syntax

function FuncList

    @: @editor ->
        
        @elem = elem class:'funclist'
        
        @editor.view.appendChild @elem
        
        @editor.scroll.on 'scroll' @onEditorScrollOrCursor
        @editor.on 'cursor'        @onEditorScrollOrCursor
        
        post.on 'fileIndexed' @onFileIndexed
        post.on 'split'       @onSplit
        
        kore.on 'editor|file' @onEditorFile
        
        @drag = new drag
            target:  @elem
            # onStart: @onDragStart
            onMove:  @onDragMove
            # onStop:  @onDragStop
            
    onDragStart: drag event => 
    onDragStop:  drag event =>
    onDragMove:  drag event => 
        
        listitem = elem.upElem event, prop:'item'
        
        if item = listitem?.item
            if item != @lastDragItem
                @lastDragItem = item
                log 'jumpTo' item
                post.emit 'jumpTo' item
        
    onSplit: =>
        
        browserVisible = window.split.browserVisible()
        @elem.style.display = browserVisible ? 'none' : 'inherit'
        @onEditorScrollOrCursor()
        
    onEditorScrollOrCursor: => 
        
        scroll  = @editor.scroll.scroll
    
        topLine = parseInt scroll/@editor.scroll.lineHeight
        botLine = topLine + @editor.numFullLines()
        mainLine= @editor.mainCursor()[1]+1
        
        for child in @elem.children
            
            lastLine = child.nextSibling ? child.nextSibling.item.line : @editor.numLines()
            
            visible = lastLine-1 > topLine and child.item.line <= botLine
            child.classList.toggle 'visible' visible
            
            if visible ➜ child.scrollIntoViewIfNeeded()
            
            inside = child.item.line <= mainLine and lastLine > mainLine
            child.classList.toggle 'inside' inside
                
    onEditorFile: file =>
        
        if info = Indexer.file file
            @onFileIndexed file, info
        
    # 000  000   000  0000000    00000000  000   000  00000000  0000000    
    # 000  0000  000  000   000  000        000 000   000       000   000  
    # 000  000 0 000  000   000  0000000     00000    0000000   000   000  
    # 000  000  0000  000   000  000        000 000   000       000   000  
    # 000  000   000  0000000    00000000  000   000  00000000  0000000    
    
    onFileIndexed: file info =>
        
        if file == kore.get 'editor|file'
        
            items = FuncItems.forIndexerInfo file, info
            log 'FuncList.onFileIndexed' file, info, items
            @elem.innerHTML = ''
            
            for item in items
                e = elem class:'funclist-item' parent:@elem, click:@onItemClick, html:Syntax.spanForTextAndSyntax item.text, 'browser'
                e.item = item
                
    # 000  000000000  00000000  00     00         0000000  000      000   0000000  000   000  
    # 000     000     000       000   000        000       000      000  000       000  000   
    # 000     000     0000000   000000000        000       000      000  000       0000000    
    # 000     000     000       000 0 000        000       000      000  000       000  000   
    # 000     000     00000000  000   000         0000000  0000000  000   0000000  000   000  
    
    onItemClick: event =>
        
        listitem = elem.upElem event, prop:'item'
        
        if item = listitem?.item
            # log 'jumpTo' item
            post.emit 'jumpTo' item

export FuncList
