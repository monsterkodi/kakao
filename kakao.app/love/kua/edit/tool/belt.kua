###
    0000000    00000000  000      000000000  
    000   000  000       000         000     
    0000000    0000000   000         000     
    000   000  000       000         000     
    0000000    00000000  0000000     000     
###

use kxk.kxk
use edit.tool.cell
use edit.tool.edit
use edit.tool.misc
use edit.tool.text
use edit.tool.pair

class belt

    @sum: arrays -> 
        
        sum = []
        for n in 0...arrays[0].len ➜ sum∙push 0
        for array in arrays
            for n,i in array
                sum[i] += n
        sum

    # 00000000    0000000    0000000
    # 000   000  000   000  000     
    # 00000000   000   000  0000000 
    # 000        000   000       000
    # 000         0000000   0000000 

    @pos: x y -> 
        if x is array and y == nil 
            ⮐  (x[1], x[2])
        (x y)
    
    @samePos: a b -> a[1] == b[1] and a[2] == b[2]
    
    @normalizePositions: posl maxY=Infinity ->
        
        ⮐  [] if empty(posl)
        posl = posl∙map((a) -> [max(1 a[1]) clamp(1 maxY a[2])])
        posl = @sortPositions posl
        posl = @removeDuplicatePositions posl
        posl
        
    @sortPositions: posl -> 
    
        posl∙sort((a b) -> if a[2] == b[2] ➜ a[1] < b[1] ➜ a[2] < b[2])
        posl
        
    @removeDuplicatePositions: posl ->
        
        ⮐  posl if empty(posl) or posl.len <= 1
        
        for i in posl.len..2
            if @samePos posl[i] posl[i-1]
                posl∙splice i 1
        posl
        
    @indexOfPosInPositions: pos posl ->
        
        # ⮐  -1 if empty posl
        # posl.findIndex (p) -> pos == p
        posl∙find pos
        
    @lineIndicesForPositions: posl ->
        
        set = []
        for pos in posl
            if not set∙has pos[2]
                set∙push pos[2]
        set
        
    @positionInDirection: pos dir ->
        
        (x y) = unpack pos
        
        switch dir
            'up'    ➜ [x, y-1]
            'down'  ➜ [x, y+1]
            'left'  ➜ [x-1, y]
            'right' ➜ [x+1, y]
            
    @movePositionsInDirection: posl dir ->
        
        posl∙map((p) -> @positionInDirection(p dir))
            
    @traversePositionsInDirection: posl pos dir ->

        next = @neighborPositionInDirection posl pos dir
        while next
            pos = next
            next = @neighborPositionInDirection posl pos dir
        pos
        
    @neighborPositionInDirection: posl pos dir ->
        
        nbp = @positionInDirection pos dir
        if @positionsContain posl nbp
            posl[@indexOfPosInPositions(nbp posl)]

    @positionsContain: posl pos ->
        
        for _ p in ipairs posl
            ⮐  true if p == pos
        false
        
    @positionsOutsideRange: posl rng ->
        
        posl∙filter((p) -> @isPosOutsideRange(p rng))
        
    @deltaOfPosToRect: p r ->
        
        dx = 0
        dy = 0
        
        if
            p[0] < r[0] ➜ dx = r[0]-p[0]
            p[0] > r[2] ➜ dx = p[0]-r[2]
                        ➜ dx = max r[0]-p[0] p[0]-r[2]
        if
            p[1] < r[1] ➜ dy = r[1]-p[1]
            p[1] > r[3] ➜ dy = p[1]-r[3]
                        ➜ dy = max r[1]-p[1] p[1]-r[3]
            
        [dx dy]
    
    @columnPositionsMap: posl ->
    
        map = {}
        for p in posl
            map[p[1]] ?= []
            map[p[1]]∙push p
        map
        
    @neighborPositionGroups: posl ->
        
        groups = []
        for p in posl
            if groups[^1] and groups[^1][^1][2] == p[2]-1
                groups[^1]∙push p
            else
                groups∙push [p]
        groups
        
    @positionColumns: posl ->
    
        columns = []
        for key pl in pairs @columnPositionsMap(posl)
            columns += @neighborPositionGroups(pl)
        columns
        
    # 00000000    0000000   000   000   0000000   00000000  
    # 000   000  000   000  0000  000  000        000       
    # 0000000    000000000  000 0 000  000  0000  0000000   
    # 000   000  000   000  000  0000  000   000  000       
    # 000   000  000   000  000   000   0000000   00000000  
    
    @isPosInsideRange: pos rng ->
        
        ⮐  false if @isPosBeforeRange pos rng 
        ⮐  false if @isPosAfterRange  pos rng 
        true
        
    @isPosOutsideRange: pos rng -> not @isPosInsideRange pos rng

    @isPosBeforeRange: pos rng ->
    
        pos[2] < rng[2] or (pos[2] == rng[2] and pos[1] < rng[1])
    
    @isPosAfterRange: pos rng ->
    
        pos[2] > rng[4] or (pos[2] == rng[4] and pos[1] > rng[3])
        
    @isPosTouchingRange: pos rng ->
        
        ⮐  true if @isPosInsideRange pos rng
        ⮐  true if pos == @endOfRange rng
        ⮐  true if pos == @startOfRange rng
        false

    @rangeContainsPos:   rng pos -> @isPosInsideRange pos rng
    @rangeContainsRange: rng ins -> @isPosInsideRange(@startOfRange(ins) rng) and @isPosInsideRange(@endOfRange(ins) rng)
    @rangeTouchesPos:    rng pos -> @isPosTouchingRange pos rng
        
    @rangeForPos: pos -> [pos[1] pos[2] pos[1] pos[2]]
    @rangeForSpan: span -> [span[1] span[2] span[3] span[2]]
    @rangeFromStartToEnd: start stop -> [start[1] start[2] stop[1] stop[2]]
    @rangesForSpans: spans -> spans∙map @rangeForSpan
    
    @isEmptyRange: rng -> rng[1] == rng[3] and rng[2] == rng[4]
    @isRangeEmpty: rng -> rng[1] == rng[3] and rng[2] == rng[4]

    @startOfRange: rng -> [rng[1] rng[2]]
    @endOfRange:   rng -> [rng[3] rng[4]]
    
    @rangeGrownBy:     rng  delta -> [rng[1]-delta rng[2] rng[3]+delta rng[4]]
    @rangeShrunkenBy:  rng  delta -> [rng[1]+delta rng[2] rng[3]-delta rng[4]]
    @rangesShrunkenBy: rngs delta ->    
        filtered = rngs∙filter((r) -> r[3]-r[1]>=2*delta)
        filtered∙map((r) -> @rangeShrunkenBy(r delta))
        
    @rangesGrownBy:    rngs delta -> rngs∙map((r) -> @rangeGrownBy(r delta))
        
    #  0000000  00000000    0000000   000   000  
    # 000       000   000  000   000  0000  000  
    # 0000000   00000000   000000000  000 0 000  
    #      000  000        000   000  000  0000  
    # 0000000   000        000   000  000   000  
 
    @isSameSpan:  a b -> a == b
    @isSameRange: a b -> a == b
    
    @isPosInsideSpan: pos span ->

        ⮐  false if @isPosBeforeSpan pos span
        ⮐  false if @isPosAfterSpan pos span
        true
        
    @isPosBeforeSpan: pos span ->
        
        pos[2] < span[2] or (pos[2] == span[2] and pos[1] < span[1])

    @isPosAfterSpan: pos span ->
        
        pos[2] > span[2] or (pos[2] == span[2] and pos[1] >= span[3])
        
    @isPosBeforeOrInsideSpan: pos span ->
        
        @isPosBeforeSpan(pos span) or @isPosInsideSpan(pos span)

    @startOfSpan: s -> [s[1] s[2]]
    @endOfSpan:   s -> [s[3] s[2]]
    
    @nextSpanAfterPos: spans pos ->
        
        ⮐  if empty spans
        
        if @isPosAfterSpan pos spans[^1]
            pos = [1 1]
        
        if @isPosBeforeSpan pos spans[1]
            ⮐  spans[1] 
            
        for index span in spans
            if @isPosAfterSpan pos span
                if index+1 <= spans.len and @isPosBeforeOrInsideSpan pos spans[index+1]
                    ⮐  spans[index+1]

    @prevSpanBeforePos: spans pos ->
        
        ⮐  if empty spans
        ⮐  spans[^1] if @isPosBeforeSpan pos spans[1]
        ⮐  spans[^1] if @isPosInsideSpan pos spans[1]
            
        for index in spans.len..1
            span = spans[index]
            if @isPosAfterSpan pos span
                ⮐  span
                    
    @normalizeSpans: spans ->
        
        ⮐  [] if empty spans
        
        spans = spans∙map((a) -> if a[1] > a[3] ➜ [a[3] a[2] a[1]] ➜ a)
        spans∙sort((a b) -> if a[2] == b[2] ➜ a[1] < b[1] else a[2] < b[2])
        spans = spans∙filter((a) -> a[1] != a[3])
        spans
        
    # 00000000    0000000   000   000   0000000   00000000   0000000  
    # 000   000  000   000  0000  000  000        000       000       
    # 0000000    000000000  000 0 000  000  0000  0000000   0000000   
    # 000   000  000   000  000  0000  000   000  000            000  
    # 000   000  000   000  000   000   0000000   00000000  0000000   
    
    @rangesContainLine: rngs lineIndex -> 
        
        for rng in rngs
            ⮐  true if rng[2] <= lineIndex and lineIndex <= rng[4]
        false
        
    @rangesContainSpan: rngs span -> @rangesContainRange rngs @rangeForSpan(span)
    @rangesContainRange: rngs range -> 
        
        for rng in rngs
            ⮐  true if rng == range
        false
                
    @normalizeRanges: rngs ->
        
        ⮐  [] if empty(rngs) or not (rngs is array)
        
        rngs = rngs∙map((a) -> if a[2] > a[4] ➜ [a[3] a[4] a[1] a[2]] else a)
        rngs = rngs∙map((a) -> if a[2] == a[4] and a[1] > a[3] ➜ [a[3] a[2] a[1] a[4]] else a)
        rngs∙sort((a b) -> if a[2] == b[2] ➜ a[1] < b[1] else a[2] < b[2])
        rngs∙filter((a) -> a[2] != a[4] or a[1] != a[3])
        rngs
        
    @startPositionsOfRanges: rngs -> rngs∙map((r) -> @startOfRange(r))
    @endPositionsOfRanges:   rngs -> rngs∙map((r) -> @endOfRange(r))
        
    @removeTrailingEmptyRange: rngs ->
        
        if @isEmptyRange(rngs[^1])
            rngs∙slice 1 -2
        else
            rngs

    ###
    returns a list of ranges for lines split by positions.
    the range up to the first position is included, as well as the
    one from the last position up to the end of text.
    ###        
    @rangesForLinesSplitAtPositions: lines posl ->
        
        ⮐  [] if empty posl
        if posl[1][2] > lines.len
            ⮐  [[1 1 kseg.width(lines[^1])+1 lines.len] [kseg.width(lines[^1])+1 lines.len kseg.width(lines[^1])+1 lines.len]] 
        rngs = [[1 1 posl[1][1] posl[1][2]]]
        for idx pos in ipairs posl
            if idx > 1
                rngs∙push [posl[idx-1][1] posl[idx-1][2] pos[1] pos[2]]
            if idx == posl.len
                rngs∙push [pos[1] pos[2] kseg.width(lines[^1])+1 lines.len]
        rngs

    @rangeInRangesContainingPos: rngs pos ->
        
        for rng in rngs
            if @rangeContainsPos rng pos
                ⮐  rng

    @rangeInRangesTouchingPos: rngs pos ->
        
        for rng in rngs
            if @rangeTouchesPos rng pos
                ⮐  rng   

    # 000      000  000   000  00000000         000  000   000  0000000    000   0000000  00000000   0000000  
    # 000      000  0000  000  000              000  0000  000  000   000  000  000       000       000       
    # 000      000  000 0 000  0000000          000  000 0 000  000   000  000  000       0000000   0000000   
    # 000      000  000  0000  000              000  000  0000  000   000  000  000       000            000  
    # 0000000  000  000   000  00000000         000  000   000  0000000    000   0000000  00000000  0000000   
    
    @lineIndicesForRangesOrPositions: rngs posl ->

        indices = @lineIndicesForRanges rngs
        if empty indices
            indices = @lineIndicesForPositions posl 
        indices

    @lineIndicesForRangesAndPositions: rngs posl ->

        indices = util.uniq @lineIndicesForRanges(rngs) + @lineIndicesForPositions(posl)
        indices∙sort()
        indices
        
    @lineIndicesForSpans: spans ->
        
        util.uniq(spans∙map((s) -> ⮐  s[2]))
        
    @frontmostSpans: spans ->
        
        fms = {}
        for span in spans
            if not fms[span[1]]
                fms[span[1]] = span
        dict.values fms
        
    @lineIndicesForRange: rng ->
        
        indices = []
        
        for li in rng[1]..rng[3]
            if li != rng[3] or rng[2] > 0
                indices∙push li
        
        indices
        
    @lineIndicesForRanges: rngs ->
        
        indices = []
        
        for rng in rngs
            indices += @lineIndicesForRange(rng)
            
        indices
        
    # 0000000    000       0000000    0000000  000   000  
    # 000   000  000      000   000  000       000  000   
    # 0000000    000      000   000  000       0000000    
    # 000   000  000      000   000  000       000  000   
    # 0000000    0000000   0000000    0000000  000   000  
    
    @blockRangesForRangesAndPositions: lines rngs posl ->
        
        blocks = []
        
        indices = @lineIndicesForRangesAndPositions rngs posl
        
        ⮐  blocks if empty indices
        
        block = [0 indices[0] -1 -1]
        for index ii in indices
            block[3] = index
            if indices[ii+1] != index+1
                block[2] = lines[index].len 
                blocks∙push block
                block = [0 indices[ii+1] -1 -1]
        blocks
                
    # 00     00  00000000  00000000    0000000   00000000  
    # 000   000  000       000   000  000        000       
    # 000000000  0000000   0000000    000  0000  0000000   
    # 000 0 000  000       000   000  000   000  000       
    # 000   000  00000000  000   000   0000000   00000000  
    
    @mergeLineRanges: lines rngs ->
        
        ⮐  [] if empty(rngs) or not (rngs is array)
        
        rngs = @normalizeRanges rngs
        
        mrgd = []
        tail = nil
        for i s in ipairs rngs
            if empty(mrgd) or s[2] > tail[4]+1 or s[2] == tail[4] and s[1] > tail[3] or s[2] == tail[4]+1 and (s[1] > 1 or tail[3] < lines[tail[4]].len)
                    mrgd∙push s
                    tail = s
            else if s[4] > tail[4] or s[4] == tail[4] and s[3] > tail[3]
                tail[3] = s[3] 
                tail[4] = s[4]
        mrgd

# merge methods of sibling modules into tool/belt 
        
for _ mod in ipairs [text cell edit misc pair]
    belt∙include mod

⮐  belt
