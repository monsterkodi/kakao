###
    000   000  000   000    
    000  000   000  000     
    0000000    0000000      
    000  000   000  000     
    000   000  000   000    
    
    commandline tool that builds the application
###

use ../kxk/os
use ../kxk/karg
use ../kxk/slash
use ../kxk/watch
use ./knrd
use ./build

use child_process

import fs from 'fs/promises'

args = karg """
    kk
        options                                  **
        info       show build status             = false
        knrd       transpile kode, styl, pug     = false
        build      build application executable  = false
        rebuild    rebuild all targets           = false -R
        watch      watch for file changes        = false
        test       run tests                     = false
        run        run application executable    = false
        clean      remove transpilated files     = false 
        verbose    log more                      = false
        quiet      log nothing                   = false
        debug      log debug                     = false
    """

class kk
    
    # 00000000   000   000  000   000  
    # 000   000  000   000  0000  000  
    # 0000000    000   000  000 0 000  
    # 000   000  000   000  000  0000  
    # 000   000   0000000   000   000  
    
    @run: ○->
        
        sleep = (ms) ○-> await new Promise((r) => setTimeout(r, ms)); true
        
        while not os.loaded # todo: move this check somewhere else!
            await sleep 150
            
        if not (args.info or args.test or args.knrd or args.build or args.run or args.clean or args.rebuild or args.watch)
            # no command given? assume all of them for now :)
            args.info  = true
            args.knrd  = true
            args.build = true
            args.test  = true
            args.run   = true
        
        if args.info    ➜ await kk.info()
        if args.knrd    ➜ await knrd args.options; delete args.options
        if args.build   ➜ await kk.build()
        if args.test    ➜ await kk.test()
        if args.run     ➜ await kk.spawn()
        if args.clean   ➜ await kk.clean()
        if args.rebuild ➜ await kk.rebuild()                            
        if args.watch   ➜ await kk.watch()                            
            
        if valid args.options
            log 'leftover options' args.options
                                                
    # 0000000    000   000  000  000      0000000    
    # 000   000  000   000  000  000      000   000  
    # 0000000    000   000  000  000      000   000  
    # 000   000  000   000  000  000      000   000  
    # 0000000     0000000   000  0000000  0000000    
    
    @build: ○->
        
        log '🛠'
        build()
        
    @rebuild: ○->
        
        await knrd()
        await kk.build()
        kk.spawn()
        
    #  0000000  00000000    0000000   000   000  000   000  
    # 000       000   000  000   000  000 0 000  0000  000  
    # 0000000   00000000   000000000  000000000  000 0 000  
    #      000  000        000   000  000   000  000  0000  
    # 0000000   000        000   000  00     00  000   000  
    
    @spawn: ->
        
        log '🚀'
        cmd = slash.path import.meta.dirname, '../../Contents/MacOS/kakao'
        opt = shell:true detached:true
        
        child_process.spawn cmd, [], opt
                
    # 000  000   000  00000000   0000000   
    # 000  0000  000  000       000   000  
    # 000  000 0 000  000000    000   000  
    # 000  000  0000  000       000   000  
    # 000  000   000  000        0000000   
    
    @info: ○->
        
        log w4 '○● info' #kk.appPath()
        
    # 000   000   0000000   000000000   0000000  000   000  
    # 000 0 000  000   000     000     000       000   000  
    # 000000000  000000000     000     000       000000000  
    # 000   000  000   000     000     000       000   000  
    # 00     00  000   000     000      0000000  000   000  
    
    @watch: ○->
        
        log w4('○● watch'), w5 kk.appPath()
        
        start = (cb) ->
    
            watch.watch kk.appPath(), recursive:true, cb: (watcher) ->
                watcher.on 'change' (info) -> 
                    cb info.path
    
        start (sourceFile) ○->
            
            log b5('🔧'), w3 sourceFile
            
            if slash.ext(sourceFile) in ['kode' 'pug' 'styl']
                await knrd sourceFile
                await kk.test 'silent'
    
    # 000000000  00000000   0000000  000000000  
    #    000     000       000          000     
    #    000     0000000   0000000      000     
    #    000     000            000     000     
    #    000     00000000  0000000      000     
    
    @test: (mode) ○->
                
        cmd = "node js/test/test.js"
        cmd += ' ' + mode if mode
        opt = shell:true cwd:kk.appPath() # run tests inside the .app folder
        
        log w4 '○● test'
        
        new Promise (resolve, reject) ->
        
            child_process.exec cmd, opt, (err, stdout, stderr) -> 
                
                if err 
                    error 'ERROR' err
                    reject err
                else
                    log stdout if valid stdout
                    resolve()

    @appPath: -> slash.path import.meta.dirname, '../../'
        
    @appName: -> slash.name kk.appPath()
                    
    @clean: ○->
        
        jsDir  = slash.path import.meta.dirname, '../../js'
        appExe = slash.path import.meta.dirname, '../../Contents/MacOS/kakao'
        await fs.rm jsDir, recursive:true, force:true 
        await fs.unlink appExe
            
global['kk'] = kk
    
export kk.run
