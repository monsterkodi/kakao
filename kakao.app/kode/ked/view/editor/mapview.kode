
###
    ██     ██   ███████   ████████   ███   ███  ███  ████████  ███   ███  
    ███   ███  ███   ███  ███   ███  ███   ███  ███  ███       ███ █ ███  
    █████████  █████████  ████████    ███ ███   ███  ███████   █████████  
    ███ █ ███  ███   ███  ███           ███     ███  ███       ███   ███  
    ███   ███  ███   ███  ███            █      ███  ████████  ██     ██  

    the base of fileditor's mapscr 
    also used for browse and quicky previews
###

use ../../../kxk ▪ kstr post
use ../../util   ◆ prof syntax 
use ../../theme  ◆ color theme
use ../base      ◆ view

function mapview extends view

    @: screen @state ->
        
        super screen @state.owner() + '.mapview'
        
        @setColor 'bg' theme.quicky.bg
        
        @imgId  = kstr.hash(@state.name) & ~0xffff
        @rowOffset  = 0
        @images     = []
        @cells.cols = 12
        
        @csz          = []
        @pixelsPerRow = 4
        @pixelsPerCol = 2
            
    #  0000000  000   000   0000000   000   000  
    # 000       000   000  000   000  000 0 000  
    # 0000000   000000000  000   000  000000000  
    #      000  000   000  000   000  000   000  
    # 0000000   000   000   0000000   00     00  
    
    reload: => 
    
        @createImages()
        @drawImages()
    
    show: => 
    
        super()
        
    hide: => 
        
        ⮐  if @hidden()
        
        @cells.screen.t.hideImagesInRange @images[0] @images[-1]
        
        super()
        
    clearImages: =>
        
        ⮐  if empty @images

        if process.env.TERM == 'xterm-kitty'
            @cells.screen.t.deleteImagesInRange @images[0] @images[-1]
        else
            for id in @images
                @cells.screen.t.deleteImage id

        @images = []
        
    layout: x y w h => 
    
        resized = x != @cells.x or y != @cells.y or w != @cells.cols or h != @cells.rows
        super x y w h

        ⮐  if @hidden()
        
        if @redraw or resized
            @createImages() if @redraw
            delete @redraw
            @drawImages()
                
    getSegls:  => @segls
    getSyntax: => @syntax
    setSyntaxSegls: ext @segls => 
        
        @syntax = new syntax 
        @syntax.setExt ext 
        @syntax.setSegls @segls
        
        @redraw = true        
    
    # 000  00     00   0000000    0000000   00000000   0000000  
    # 000  000   000  000   000  000        000       000       
    # 000  000000000  000000000  000  0000  0000000   0000000   
    # 000  000 0 000  000   000  000   000  000            000  
    # 000  000   000  000   000   0000000   00000000  0000000   
    
    maxLinesToLoad: => (@cells.rows-@rowOffset) * @csz[1] / @pixelsPerRow
    
    createImages: =>
        
        t = @cells.screen.t
        ⮐  if empty t.cellsz
        
        @csz = t.cellsz
        
        @clearImages()

        # prof.start @state.name+'.map'
        
        w = @cells.cols * @csz[0]
        bytes = w*3
        
        ⮐  if bytes <= 0
        
        lines = @getSegls()
        
        data  = Buffer.alloc bytes
                
        maxY  = @maxLinesToLoad()
        
        for line,y in lines
            
            @imageForLine data line y
            id = @imgId+y
            @images.push id
            t.sendImageData data id w 1
            break if y > maxY
                
        # prof.end @state.name+'.map'
        
    # ███   ███  ████████   ███████     ███████   █████████  ████████
    # ███   ███  ███   ███  ███   ███  ███   ███     ███     ███     
    # ███   ███  ████████   ███   ███  █████████     ███     ███████ 
    # ███   ███  ███        ███   ███  ███   ███     ███     ███     
    #  ███████   ███        ███████    ███   ███     ███     ████████

    lineData: =>
        
        w = @cells.cols * @cells.screen.t.cellsz[0]
        bytes = w*3
        
        ⮐  if bytes <= 0
        
        Buffer.alloc bytes
    
    updateLine: y data => 
    
        data ?= @lineData()        
        ⮐  if empty data
        id = @imgId+y
        @imageForLine data @getSegls()[y] y
        t = @cells.screen.t
        t.deleteImage id
        t.sendImageData data id data.length/3 1
        t.placeLineImage id @cells.x @cells.y+@rowOffset y*@pixelsPerRow @pixelsPerRow
        
    updateFromLine: y =>
        
        if data = @lineData()
            
            for li in y...@state.s.lines.length
                @updateLine li data
                
        while @images.length > @state.s.lines.length
            log 'pooping'
            @cells.screen.t.deleteImage @images.pop()
            
    imageForLine: data line y syntax =>
    
        charPixels = x rgb =>
        
            for xr in 0..@pixelsPerCol
                data[(x*@pixelsPerCol+xr)*3+0] = rgb[0]
                data[(x*@pixelsPerCol+xr)*3+1] = rgb[1]
                data[(x*@pixelsPerCol+xr)*3+2] = rgb[2]
                
        w      = data.length / 3
        maxX   = w/@pixelsPerCol
        syntax = @getSyntax()
        
        for x in 0...line.length
            
            break if x > maxX
                                
            ch = line[x]
            
            if valid ch and ch != ' '
             
                f = 0.7
                if ch in '0█'
                    clss = syntax.getClass x y
                    if 'header' in clss
                        f = 2.0
                rgb = syntax.getColor x y
                rgb = rgb.map (v) -> clamp(0 255 int(f*v))
                 
                charPixels x rgb
            else
                charPixels x @color.bg
                    
        for x in line.length...maxX
            charPixels x @color.bg        
            
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    drawImages: =>
        
        t = @cells.screen.t
        
        ⮐  if empty t.pixels or @hidden() or @collapsed()
        
        # @csz = t.cellsz # should have been set in createImages 
        
        for id,y in @images
            t.placeLineImage id @cells.x @cells.y+@rowOffset y*@pixelsPerRow @pixelsPerRow
        @
        
    draw: =>
        
        ⮐  if @hidden() or @collapsed()
        
        # @csz = @cells.screen.t.cellsz
                     
        @cells.fill_rect 0 0 @cells.cols-1 @cells.rows-1 ' ' null @color.bg
        
        @drawImages()
        
export mapview
