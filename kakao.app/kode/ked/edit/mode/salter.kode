#  ███████   ███████   ███    █████████  ████████  ████████ 
# ███       ███   ███  ███       ███     ███       ███   ███
# ███████   █████████  ███       ███     ███████   ███████  
#      ███  ███   ███  ███       ███     ███       ███   ███
# ███████   ███   ███  ███████   ███     ████████  ███   ███

use ../../../kxk ◆ kseg salter
use ../../theme  ◆ theme
use ../tool      ◆ belt
use ..           ◆ mode
      
function salterMode
        
    @syms: []

    @: @state -> 
    
        @name = 'salter'
        
        if empty salterMode.syms
            salterMode.syms = Object.keys salter.font
        
        @start()

    ###
     0000000   0000000   000    000000000  00000000  00000000   
    000       000   000  000       000     000       000   000  
    0000000   000000000  000       000     0000000   0000000    
         000  000   000  000       000     000       000   000  
    0000000   000   000  0000000   000     00000000  000   000  
    ###
    # ███      ███  ███   ███  ████████
    # ███      ███  ████  ███  ███     
    # ███      ███  ███ █ ███  ███████ 
    # ███      ███  ███  ████  ███     
    # ███████  ███  ███   ███  ████████
    
    start: -> 
    
        cursors = belt.findPositionsForSaltInsert @state.s.lines @state.mainCursor()
        
        if valid cursors
            @state.setCursors cursors
            
        else
            # if valid trim(belt.textFromPosToEol(@state.s.lines @state.mainCursor()))
            @state.begin()
            @state.moveCursors 'eol'
            @state.singleCursorAtIndentOrStartOfLine()
            for i in 0...5
                @state.insert '# \n'
            @state.moveCursors 'right'
            @state.moveCursors 'right'
            @state.moveCursors 'up'
            for i in 0...4
                @state.expandCursors 'up'
            @state.end()
        
    stop: ->
    
        @state.setMainCursor @state.mainCursor()
        
    #  0000000  000   000  00000000    0000000   0000000   00000000    0000000  
    # 000       000   000  000   000  000       000   000  000   000  000       
    # 000       000   000  0000000    0000000   000   000  0000000    0000000   
    # 000       000   000  000   000       000  000   000  000   000       000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  0000000   
    
    @checkCursorsSet: state ->

        ⮐ if not state.allowedModes.salter
        
        salt = belt.findPositionsForSaltInsert state.s.lines state.mainCursor()
        if valid salt and state.s.cursors.length == 1 # start the salter mode if the main
            mode.start state 'salter'                 # cursor moved inside a salted line 

    cursorsSet: ->
        
        cursors = belt.findPositionsForSaltInsert @state.s.lines @state.mainCursor()
        
        if valid cursors 
            if @state.s.cursors eql cursors
                true
            else
                @state.setCursors cursors
        else
            mode.stop @state 'salter'
    
    # ███   ███  ████████  ███   ███
    # ███  ███   ███        ███ ███ 
    # ███████    ███████     █████  
    # ███  ███   ███          ███   
    # ███   ███  ████████     ███   

    handleKey: key event ->
    
        switch key
            'esc' 
                mode.stop @state @name
                ⮐ 
            'delete'
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                ⮐
            'up'
                if @state.s.main > 0
                    @state.setMain @state.s.main-1
                    ⮐  
            'down'
                if @state.s.main < 4
                    @state.setMain @state.s.main+1
                    ⮐  
            
        if @state.s.cursors.length != 5 # need to check for alignment as well?
            mode.stop @state @name
            ⮐  'unhandled'
            
        char = valid(event.char) ? event.char : key
            
        if salter.hasChar char
            @state.insert salter(char char:'█' postfix:'  ')
            ⮐
        else
            log ">#{char}<" event
        
        'unhandled'
        
    #  0000000   0000000   000       0000000   00000000   
    # 000       000   000  000      000   000  000   000  
    # 000       000   000  000      000   000  0000000    
    # 000       000   000  000      000   000  000   000  
    #  0000000   0000000   0000000   0000000   000   000  
    
    themeColor: colorName ->
    
        switch colorName
        
            'editor_cursor_multi' ➜ ⮐ theme.syntax['comment triple header']
            
        theme[colorName]

export salterMode
