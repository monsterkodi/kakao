###
    ██     ██   ███████   ████████    ███████   ███████  ████████   
    ███   ███  ███   ███  ███   ███  ███       ███       ███   ███  
    █████████  █████████  ████████   ███████   ███       ███████    
    ███ █ ███  ███   ███  ███             ███  ███       ███   ███  
    ███   ███  ███   ███  ███        ███████    ███████  ███   ███  

    scrollable source map to the right of the fileeditor
###

use ../../../kxk ▪ post
use ../../theme  ◆ theme
use              ◆ mapview

{floor, pow} = Math

function mapscr extends mapview

    @: screen state ->
        
        super screen state
        
        @state.on 'view.changed' @drawKnob
        
        @pointerType = 'pointer'
        
        @setColor 'bg' theme.mapscr
        
        screen.t.on 'preResize' @clearImages
        
        post.on 'popup.show' @hide
        post.on 'greet.show' @hide
        
        post.on 'popup.hide' @show
        post.on 'greet.hide' @show
        
    getSegls:  => @state.segls
    getSyntax: => @state.syntax
    
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: =>
        
        ⮐  if empty @cells.screen.t.pixels
        
        @redraw = true
        
    #  0000000   0000000  00000000    0000000   000      000      000000000   0000000   
    # 000       000       000   000  000   000  000      000         000     000   000  
    # 0000000   000       0000000    000   000  000      000         000     000   000  
    #      000  000       000   000  000   000  000      000         000     000   000  
    # 0000000    0000000  000   000   0000000   0000000  0000000     000      0000000   
    
    scrollToPixel: pixel =>
        
        view = @state.s.view.asMutable()
        
        view[1] = int (pixel[1] - @cells.y * @cells.screen.t.cellsz[1]) / @pixelsPerRow
        
        view[1] -= 6 # offset so that clicking inside a header scrolls it into view
        
        maxY = @state.s.lines.length - @cells.rows
        
        view[1] = min maxY view[1] if maxY > 0
        view[1] = max 0 view[1]
        
        ⮐  if view eql @state.s.view
        
        @state.setView view
        @drawKnob()
        redraw:true
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        super event
        
        switch event.type
            
            'press'
            
                if @hover
                    @doDrag = true
                    post.emit 'pointer''grabbing'
                    ⮐  @scrollToPixel event.pixel
                    
            'drag'
            
                if @doDrag
                    post.emit 'pointer''grab'
                    ⮐  @scrollToPixel event.pixel
                    
                @hover = false
                
            'release'
            
                if @doDrag
                    delete @doDrag 
                    post.emit 'pointer''pointer' if @hover
                    ⮐  true
        @hover

###        
     ███  ██     ██   ███████    ███████   ████████   ███████
     ███  ███   ███  ███   ███  ███        ███       ███     
     ███  █████████  █████████  ███  ████  ███████   ███████ 
     ███  ███ █ ███  ███   ███  ███   ███  ███            ███
     ███  ███   ███  ███   ███   ███████   ████████  ███████ 
###

    #  ███████  ███      ████████   ███████   ████████ 
    # ███       ███      ███       ███   ███  ███   ███
    # ███       ███      ███████   █████████  ███████  
    # ███       ███      ███       ███   ███  ███   ███
    #  ███████  ███████  ████████  ███   ███  ███   ███

    clearImages: =>
        
        @cells.screen.t.deleteImage @knobId if @knobId
        delete @knobId
        
        super()
        
    #  ███████  ████████   ████████   ███████   █████████  ████████
    # ███       ███   ███  ███       ███   ███     ███     ███     
    # ███       ███████    ███████   █████████     ███     ███████ 
    # ███       ███   ███  ███       ███   ███     ███     ███     
    #  ███████  ███   ███  ████████  ███   ███     ███     ████████

    createImages: =>
        
        t = @cells.screen.t
        
        ⮐  if empty t.cellsz
        
        super() # has to come first, because it clears all images
        
        w = t.cellsz[0]
        h = t.cellsz[1]

        bpp = 4
        data = Buffer.alloc w*h*bpp
        for i in 0...w*h
            data[i*bpp+0] = 250
            data[i*bpp+1] = 250
            data[i*bpp+2] = 250
            data[i*bpp+3] = 20
        
        @knobId = @imgId+0xeeee
        t.sendImageData data @knobId w h bpp
        
    # ███████    ████████    ███████   ███   ███
    # ███   ███  ███   ███  ███   ███  ███ █ ███
    # ███   ███  ███████    █████████  █████████
    # ███   ███  ███   ███  ███   ███  ███   ███
    # ███████    ███   ███  ███   ███  ██     ██

    drawImages: =>
        
        t = @cells.screen.t
        
        ⮐  if empty t.pixels or @hidden() or @collapsed()
        
        super()
        
        @drawKnob()
        
    drawKnob: =>
        
        t = @cells.screen.t
        
        ⮐  if empty t.pixels
        
        y  = @pixelsPerRow*@state.s.view[1]/t.cellsz[1]
        yc = int(y) 
        yr = int((y - yc) * t.cellsz[1])
        
        h  = int @state.cells.rows*@pixelsPerRow
        w  = 12*t.cellsz[0]
        
        t.placeImageOverlay @knobId @cells.x @cells.y+yc 0 yr w h
        
export mapscr
