###
    000   000  000   000  00000000   0000000    
    000  000   0000  000  000   000  000   000  
    0000000    000 0 000  0000000    000   000  
    000  000   000  0000  000   000  000   000  
    000   000  000   000  000   000  0000000    

    transpiles kode, noon, styl and pug files
###

use ../kode/kode
use ../kxk/slash ▪ tilde
use ../kxk ◆ fs pug styl noon

knrd = (files = [], opt = {}) ○->
       
    if files is str
        files = [files]
    
    opt.rerunWhenDirty ?= true
    opt.verbose ?= false
    log 'opt' opt if opt.verbose
    log 'files' files if opt.verbose
    
    ● 🔨
    
    kodeDir = slash.path ◆dir, '/../../kode'
    pugDir  = slash.path ◆dir, '/../../pug'
    jsDir   = slash.path ◆dir, '/../../js'
    
    rules =
        kode: 
            tgtExt:  'js'
            srcDir:  kodeDir
            tgtDir:  jsDir
            compile: (srcText, srcFile) -> k0de = new kode header:false; k0de.compile srcText, srcFile
        styl:
            tgtExt:  'css'
            srcDir:  pugDir
            tgtDir:  jsDir + '/css'
            compile: (srcText, srcFile) -> styl srcText
        pug:
            tgtExt:  'html'
            srcDir:  pugDir
            tgtDir:  jsDir
            compile: (srcText, srcFile) -> pug srcText
        noon:
            tgtExt:  'json'
            srcDir:  kodeDir
            tgtDir:  jsDir
            compile: (srcText, srcFile) -> JSON.stringify noon.parse(srcText), null, '  '
            
        ignore: [
            'kolor/lang.noon'
            ]
    
    if empty files
        
        list  =○ fs.list kodeDir
        list  = list.concat ○ fs.list pugDir
        list  = list.filter (item) -> item.type == 'file'
        files = list.map (item) -> item.path
        
    log '🔨 ' files.length if not opt.quiet
    
    transpiled = 0
        
    for file in files
        
        skip = false
        for ignore in rules.ignore
            if file.endsWith ignore
                log w2('✘  '), w3 tilde file if opt.verbose
                skip = true
                break
        if skip ➜ continue
        
        if rule = rules[slash.ext file]
            
            srcFile = file
            tgtFile = slash.swapExt srcFile.replace(rule.srcDir, rule.tgtDir), rule.tgtExt
            
            srcText =○ fs.read srcFile
            tgtText =○ fs.read tgtFile
            
            compText = rule.compile srcText, srcFile
                
            if empty compText
                log y5('✘ '), r5(tilde srcFile), r4('transpiles to empty!')
            else
                if tgtText != compText
                    transpiled++
                    ○ fs.write tgtFile, compText
                    log b5('✔ '), g5 tilde tgtFile if not opt.quiet
                else 
                    fs.touch tgtFile
                    if opt.verbose
                        log g2('✔ '), m3 tilde srcFile
        # else
            # error 'unknown file type' file
            
        null
            
    if opt.rerunWhenDirty and transpiled
        
        knrd files, rerunWhenDirty:false
        
export knrd
