###
 0000000   000   000  000   0000000  000   000  000   000
000   000  000   000  000  000       000  000    000 000 
000 00 00  000   000  000  000       0000000      00000  
000 0000   000   000  000  000       000  000      000   
 00000 00   0000000   000   0000000  000   000     000   
###

use ../../kxk ▪ kstr slash post
use         ◆ cells input choices
use ../util ◆ prjcts
use ..      ◆ editor theme

int = parseInt

function quicky

    @: @screen ->
        
        @name    = 'quicky'
        
        @cells   = new cells   @screen
        
        @input   = new input   @screen 'quicky_input' 
        @choices = new choices @screen 'quicky_choices'
                
    #  0000000  000   000   0000000   000   000  
    # 000       000   000  000   000  000 0 000  
    # 0000000   000000000  000   000  000000000  
    #      000  000   000  000   000  000   000  
    # 0000000   000   000   0000000   00     00  
    
    show: =>
        
        x = int @screen.cols/4
        y = int @screen.rows/4
        w = int @screen.cols/2
        h = int @screen.rows/2
        
        c = min h @choices.num()
        
        @input.init    x+2   y+1   w-4  1
        @choices.init  x+2   y+3   w-3  c
        @cells.init    x     y     w    c+4
        
        @input.grabFocus()
        
    hide:   => @cells.rows = 0; post.emit 'focus' 'editor'; post.emit 'redraw'; true
    hidden: -> @cells.rows <= 0
    
    toggle: currentFile -> if @hidden() then @open(currentFile) else @hide()
    open:   currentFile ->
        
        items = prjcts.files currentFile
        currentDir = slash.dir currentFile
        items = items.map (i) -> slash.relative i currentDir
        
        items.sort (a b) -> slash.name(a).localeCompare slash.name(b)
        items.shift() if items[0] == '.'
        
        ccol = int(@screen.cols/2) - 5
        
        items = items.map (i) => rpad ccol i
        
        @input.set '' # last file?
        @choices.set items
        @choices.state.selectLine 0
        @show()
        
    postResult: ->
        
        post.emit 'quicky' trim(@input.state.s.lines[0])
        @hide()
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: ->
        
        ⮐ if @hidden()
        
        # ┏┳━┓
        # ┣╋━┫
        # ┃┃ ┃
        # ┗┻━┛
        
        ff = theme.quicky_frame_fg
        fb = theme.quicky_frame_bg
        
        @cells.fill_rect 1 1 -2 -2 ' ' null fb
        @cells.fill_rect  1  0 -2  0 '━' ff fb
        @cells.fill_rect  0  1  0 -2 '┃' ff fb
        @cells.fill_rect -1  1 -1 -2 '┃' ff fb
        @cells.fill_rect  1  2 -2  2 '━' ff fb
        @cells.fill_rect  1 -1 -2 -1 '━' ff fb
        @cells.set  0  0 '┏' ff fb
        @cells.set -1  0 '┓' ff fb
        @cells.set  0  2 '┣' ff fb    
        @cells.set -1  2 '┫' ff fb    
        @cells.set  0 -1 '┗' ff fb
        @cells.set -1 -1 '┛' ff fb
        
        @input.draw()
        @choices.draw()
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    moveSelection: dir ->
        
        switch dir
            'down'  ➜ @choices.state.selectNextLine()
            'up'    ➜ @choices.state.selectPrevLine()
            
        @input.set @choices.state.selectedText()
        
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        ⮐ if @hidden()
        
        switch event.combo 
            'esc'       ➜ ⮐ @hide() if empty @input.state.s.selections
            'return'    ➜ ⮐ @postResult()
            'up' 'down' ➜ ⮐ @moveSelection event.combo
        
        ⮐ true if @input.onKey key event
        ⮐ true if @choices.onKey key event
        true
        
    onMouse: type sx sy event =>
        
        ⮐ if @hidden()
        ⮐ true if @input.onMouse type sx sy event
        ⮐ true if @choices.onMouse type sx sy event
        true
        
    onWheel: event =>
        
        ⮐ if @hidden()
        
        ⮐ true if @input.onWheel event
        ⮐ true if @choices.onWheel event
        true

export quicky
