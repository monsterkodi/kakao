###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    

    bun --watch js/ked/ked.js kode/ked/kde.kode
###

use ../kxk ▪ karg kstr kseg slash post
use ../kxk ◆ nfs
use ./util ◆ ttio logfile util prjcts session help julia frecent
use ./view ◆ screen status quicky menu finder funcol fileeditor

global.int = parseInt # this should go into kode instead

function KED

    @: ->

        @version = '0.1.0'
        args = karg """
            
            ked [file]
                options                      **
                version    log version       = false
                
            """ preHelp:help.header() version:@version
        
        process.on 'uncaughtException' @onException
            
        @logfile = new logfile
        @session = new session
        global.ked_session = @session
        @session.on 'loaded' @onSessionLoaded
        @viewSizes = funcol:[30 0]
                    
        @t = new ttio
        
        @julia   = new julia
        
        @screen  = new screen @t
        
        @menu    = new menu       @screen        
        @quicky  = new quicky     @screen 
        @finder  = new finder     @screen 
        @editor  = new fileeditor @screen 'editor'  ['scroll' 'gutter' 'mapscr' 'complete']
        @funcol  = new funcol     @screen 'funcol'  ['scroll' 'knob']
        @status  = new status     @screen @editor.state
        
        log w2("┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #{b8 @session.name} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")

        @editor.state.hasFocus = true
        
        post.on 'redraw'        @redraw
        post.on 'window.focus'  @redraw
        post.on 'window.blur'   @redraw
        post.on 'view.size'     @onViewSize
        post.on 'quicky'        @onQuicky
        post.on 'file.new'      @newFile
        post.on 'file.open'     @openFile
        post.on 'quit'          @quit
        
        @mouseHandlers = [@finder @quicky @menu @editor @status @funcol]
        @wheelHandlers = [@finder @quicky @menu @editor         @funcol]
        @keyHandlers   = [@finder @quicky @menu @editor         @funcol]
        
        @t.on 'key'    @onKey
        @t.on 'mouse'  @onMouse
        @t.on 'wheel'  @onWheel
        @t.on 'resize' @onResize
        @t.on 'paste'  @onPaste
                                    
        if valid args.options
            @loadFile args.options[0]
        else
            # @newFile()
            @menu.show true
            
    onSessionLoaded: => 
    
        @menu.show true if empty @currentFile
                        
    # 00000000   000   000  000   000  
    # 000   000  000   000  0000  000  
    # 0000000    000   000  000 0 000  
    # 000   000  000   000  000  0000  
    # 000   000   0000000   000   000  
    
    @run: -> new KED()

    # 000       0000000   000   000   0000000   000   000  000000000  
    # 000      000   000   000 000   000   000  000   000     000     
    # 000      000000000    00000    000   000  000   000     000     
    # 000      000   000     000     000   000  000   000     000     
    # 0000000  000   000     000      0000000    0000000      000     
    
    layout: ->
        
        w = @t.cols()
        h = @t.rows()
        fcw = @viewSizes.funcol[0]
        
        @funcol.layout  0    0  fcw    h
        @status.layout  fcw  0  w-fcw  1
        @editor.layout  fcw  1  w-fcw  h-1
    
    quit: msg ○=>
        
        clearImmediate @redrawId
        
        @quitting = true
        
        ○ @session.save()
        
        log w2("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #{b8 @session.name} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛")

        error "#{msg}" noon(msg) if msg?
        
        @t?.quit()
        
        @logfile.close ->
            
            process.stderr.write "#{msg}" if msg?
            process.exit msg? ? 1 : 0
                
    onException: err => 
        
        @quit err

    # 000   000  00000000  000   000  
    # 0000  000  000       000 0 000  
    # 000 0 000  0000000   000000000  
    # 000  0000  000       000   000  
    # 000   000  00000000  00     00  
    
    newFile: =>
        
        delete @currentFile

        @status.setFile ''
    
        @editor.state.syntax.ext = 'txt'
        @editor.state.loadLines ['']
        @t.setCursor 0 0
        @t.setTitle 'kėd'
        
        @editor.mapscr?.reload()

        @redraw()
            
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
        
    reloadFile: => 
        
        if valid @currentFile
            @loadFile @currentFile
        else
            @newFile()
        
    loadFile: p ○=>
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @status.setFile slash.tilde(p)
            @currentFile = slash.absolute p
        else
            @status.setFile slash.normalize(p)
            @currentFile = slash.path process.cwd() p

        @currentFile =○ nfs.resolveSymlink @currentFile
        
        global.ked_editor_file = @currentFile

        text =○ nfs.readText @currentFile
        
        if text == undefined
            text = '○ binary ○'
        
        segls = util.seglsForText text
        
        @editor.state.syntax.ext = slash.ext @currentFile
        @editor.state.loadSegls segls
        
        @status.time = process.hrtime(start)[1]
        @status.drawTime = kstr.time BigInt(@status.time)
        
        @editor.mapscr?.reload()
        
        @redraw()
        
        prjcts.index @currentFile
        @t.setTitle slash.name(@status.file)
        
        @saveSessionFile @currentFile 'loaded'        
        @
        
    #  0000000   00000000   00000000  000   000  
    # 000   000  000   000  000       0000  000  
    # 000   000  00000000   0000000   000 0 000  
    # 000   000  000        000       000  0000  
    #  0000000   000        00000000  000   000  
    
    openFile: path =>
        
        @loadFile path
        @editor.grabFocus()
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ○=>
        
        text = kseg.str @editor.state.allLines()
        
        if valid @currentFile
            ○ nfs.write @currentFile text
            @editor.state.clearHistory() # lazy way to 'undirty' :> no undo after save :(
            @redraw()
            @saveSessionFile @currentFile 'saved'
            
    saveAs: => log 'saveAs'

    saveSessionFile: file type ->
        
        frecent.fileAction file type
                
        @session.set 'files▸recent' frecent.store('file')
    
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    onPaste: text => 
    
        @editor.state.insert text
        @redraw()
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>

        if event.type == 'wheel'

            for handler in @wheelHandlers
                if res = handler.onWheel event
                    if res.redraw != false
                        # log "redraw on wheel for #{handler.name}" 
                        @redraw()
                    ⮐ 
            ⮐ 

        for handler in @mouseHandlers
            if res = handler.onMouse event
                if res.redraw != false
                    # log "redraw on #{event.type} for #{handler.name}" 
                    @redraw()
                ⮐ 
                
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        switch key
            
            'alt+q' 'ctrl+q' 'cmd+esc'   ➜ ⮐ @quit()
            'alt+r' 'ctrl+r' 'cmd+r'     ➜ ⮐ @reloadFile()
            'ctrl+s' 'cmd+s'             ➜ ⮐ @saveFile()
            'shift+cmd+s' 'shift+ctrl+s' ➜ ⮐ @saveAs()
            'cmd+n' 'ctrl+n'             ➜ ⮐ @newFile()
            'alt+.' 'alt+m'              ➜ ⮐ @menu.show()
            'cmd+p' 'ctrl+p'             ➜ ⮐ @quicky.toggle @currentFile
            'cmd+f' 'ctrl+f'             ➜ ⮐ @finder.show @editor.state.textOfSelectionOrWordAtCursor()
            'cmd+o' 'ctrl+o'
            'cmd+.' 'ctrl+.'             ➜ ⮐ @quicky.gotoDir slash.dir(@currentFile)
            
        for handler in @keyHandlers
            break if result = handler.onKey key event
                
        @redraw() if result?.redraw != false
        
    #  0000000   000   000  000   0000000  000   000  000   000  
    # 000   000  000   000  000  000       000  000    000 000   
    # 000 00 00  000   000  000  000       0000000      00000    
    # 000 0000   000   000  000  000       000  000      000     
    #  00000 00   0000000   000   0000000  000   000     000     
    
    onQuicky: path ○=>
        
        if slash.isAbsolute path
            file = path
        else
            file = slash.absolute path slash.dir(@currentFile)
        
        if slash.samePath file @currentFile
            @redraw()
            ⮐ 
            
        exists =○ nfs.fileExists file
        if exists
            ○ @loadFile file
                                
    #  0000000  000  0000000  00000000  
    # 000       000     000   000       
    # 0000000   000    000    0000000   
    #      000  000   000     000       
    # 0000000   000  0000000  00000000  
    
    onViewSize: name pos => 
        
        [x y] = pos
    
        @viewSizes[name] = [min(x @screen.cols-1) min(y @screen.rows-1)]
        @redraw()
        # @editor.mapscr?.onResize()
        
    onResize: cols rows size => 
        
        @redraw()
        @editor.mapscr?.onResize()
    
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: =>    
        
        ⮐ if @quitting

        clearImmediate @redrawId
        @redrawId = setImmediate @draw
                                      
    draw: =>
            
        ⮐ if @quitting
        
        start = process.hrtime()
        
        @status.gutter = @editor.state.gutterWidth()
        
        @screen.init()

        @layout()
        
        if not @menu.greet
            @editor.draw()
            @status.draw()
            @funcol.draw()
            
        @menu.draw()
        @quicky.draw()
        @finder.draw()
        
        @screen.render()
        
        @status.time = process.hrtime(start)[1]
        @status.drawTime = kstr.time BigInt(@status.time)
        # log "○ #{@status.drawTime}"
        
export KED.run

◆main

    KED.run()

