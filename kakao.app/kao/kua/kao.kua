# ███   ███   ███████    ███████ 
# ███  ███   ███   ███  ███   ███
# ███████    █████████  ███   ███
# ███  ███   ███   ███  ███   ███
# ███   ███  ███   ███   ███████ 

main = ... ->

    use std io
    use kxk/kxk
    
    optparser = std.optparse """
        0.1
        Usage: kao [Options ...] [Files ...]
        
        Options:
        
          -t, --test         run tests
          -b, --build        create binary
              --out dir      output directory
          
          -v, --verbose      log more information
          -d, --debug        log debugging information
          
          -V, --version      display version information
          -h, --help         display this help
        """

    # log slash.cwd()
    
    (_G.files _G.opts) = optparser:parse(arg)
    
    first = slash.absolute files[1]
    if slash.isDir first
        log "CHWD" first
        slash.chdir(first)
        array.shift(files)
        log "files after shift" array.str _G.files
    
    if opts.verbose
        log 'opts'    inspect(opts)
        log 'meta'    inspect(getmetatable(opts))
        log "build"   opts.build
        log "debug"   opts.debug
        log "verbose" opts.verbose
        log 'outdir'  opts.outdir
        log 'files'   files.len
        log 'files'   inspect(files)
    
    if opts.build
        (output ok) = build()
        if ok 
            log "✔"
            os.exit 0
        log "✘ " & output
        os.exit 1
        
    log "●"
    watch slash.path(".")

build = ->

    (luajit _) = slash.shell "brew" "--prefix" "luajit"
    luajit = kstr.trim luajit
    libjit = luajit & "/lib/libluajit.a"
    incjit = luajit & "/include/luajit-2.1"
    # log "luajit" luajit
    dir = opts.outdir or ""
    out = slash.path dir "kao"
    if empty _G.files
        _G.files = {"kao.lua"}
    args = array "luastatic" 
    args:push unpack(files) 
    args:push libjit "-I" incjit "-o" out
    (output ok) = slash.shell unpack(args)
    (output ok)
        
watch = ... ->

    dir = slash.cwd()
    luaFiles = array.indexdict slash.files(slash.path(dir ".") "lua")
    kxkFiles = array.indexdict slash.files(slash.path(dir "./kxk") "lua")
    kxkTests = array.indexdict slash.files(slash.path(dir "kxk/test"))

    if verbose
        log "\nlua files"
        log array.str luaFiles
        log "\nkxk files"
        log array.str kxkFiles
        log "\nkxk tests"
        log array.str kxkTests
        
    modTimes = {}
    
    while true
    
        kxkChanged = array()
        luaChanged = array()
        
        for _ dir in ipairs {...}

            for i f in ipairs slash.walk(dir)
                p = f.path
                stat = slash.stat(p)
                if stat
                    modTime = stat.mtime
                    
                    if not modTimes[p]
                        modTimes[p] = modTime
                    elif modTimes[p] == modTime
                        a = 1
                    else
                        modTimes[p] = modTime
                        
                        if kxkFiles[p]
                            log "◆" slash.file p
                            kxkChanged:push p
                        elif luaFiles[p]
                            log "◇" slash.file p                    
                            luaChanged:push p
            
        testPass = true    
        if kxkChanged.len > 0
            log "testing"
            if not test.run kxkTests ➜ testPass = false
            
        if luaChanged.len > 0 or kxkChanged.len > 0
            if testPass
                log "compile"
                (output ok) = build()
                # log output 
                if ok
                    log "restart"
                    slash.respawn()
                    log "DAFUK?"
                    os.exit(1)
                else
                    log "✘"
                    log output
            else
                log "skip compile"
        sleep 1
        
main()
    