###
 0000000  000000000   0000000   000000000  000   000   0000000  
000          000     000   000     000     000   000  000       
0000000      000     000000000     000     000   000  0000000   
     000     000     000   000     000     000   000       000  
0000000      000     000   000     000      0000000   0000000   
###

use ◆ color util

function status

    @: @cells @state ->
        
        @file = ''
        @drawTime = ''
        
    draw: =>
        
        y      = @cells.rows-1
        gtr    = @state.s.gutter
        cursor = @state.s.cursor
        cols   = @cells.cols
        fnl    = @file.length
        dt     = @drawTime
        dtl    = dt.length
        dty    = @state.isDirty()
        
        sc = x char fg bg => @cells.set x y char color[fg] color[bg]
        
        # draw the left edge of the status bar
        
        sc 0 '' 'status_dark' 'gtr'
        
        # draw the column number
        
        colno = rpad gtr-1 cursor[0] + 1
        for x in 1...gtr
            fg = cursor[0] ? 'status_fg' : 'column_fg'
            fg = 'status_empty' if util.isPosOutsideLines cursor @state.s.lines 
            sc x (x < colno.length ? colno[x-1] : ' ') fg 'status_dark'

        # draw the separator after the column number
            
        sc gtr '' 'status' 'status_dark'
              
        # draw the dirty indicator
        
        sc gtr+1 dty ? '' : '' dty ? 'status_fg' : 'status_dark' 'status'
        
        # draw the file name
        
        sc gtr+2 ' ' 'status_fg' 'status'
            
        for x in gtr+3...gtr+1+fnl+2
            char = (x-gtr-3 < fnl) ? @file[x-gtr-3] : ' '
            sc x char 'status_fg' 'status'
             
        # draw the right edge of the file name section
        
        sc gtr+3+fnl '' 'status' 'status_dark'

        # fill the remaining space
        
        for x in gtr+4+fnl...cols-1
            sc x ' ' null 'status_dark'
                
        # draw the time if there's enough space
                
        if cols-gtr+2+fnl > dtl+1
            
            sc cols-dtl-2 '' 'status' 'status_dark'
            
            for i in 0...dtl
                fg = i < dtl-3 ? 'status_fg' : 'status_fg_dim'
                sc cols-dtl+i-1 dt[i] fg 'status'
        
        else
            sc cols-2 '' 'status' 'status_dark'

        # draw the final edge of the status bar
        
        sc cols-1 '' 'status' 'editor_empty'
            
        # draw the selection count if there are selections
        
        if @state.s.selections.length

            sel = "#{@state.s.selections.length} sel"
             
            for i in 0...sel.length
                fg = i < sel.length-4 ? 'status_sel' : 'status_fg_dim'
                sc cols-dtl+i-sel.length-3 sel[i] fg 'status_dark'
            
export status

