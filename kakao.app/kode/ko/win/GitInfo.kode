###
 0000000   000  000000000  000  000   000  00000000   0000000
000        000     000     000  0000  000  000       000   000
000  0000  000     000     000  000 0 000  000000    000   000
000   000  000     000     000  000  0000  000       000   000
 0000000   000     000     000  000   000  000        0000000
###

use ../../kxk/post
use ../../kxk/slash
use ../../kxk/ffs

use ../tools/linediff
use ../tools/Git

use ../editor/Syntax

class GitInfo

    @: ->

    #  0000000  000      000   0000000  000   000
    # 000       000      000  000       000  000
    # 000       000      000  000       0000000
    # 000       000      000  000       000  000
    #  0000000  0000000  000   0000000  000   000

    onMetaClick: (meta, event) =>

        if href = meta[2].href
            href += ':' + window.terminal.posForEvent(event)[0]
            post.emit 'openFiles' [href], newTab: event.metaKey
        'unhandled' # otherwise cursor doesn't get set

    #  0000000   0000000   00     00  00     00  000  000000000  
    # 000       000   000  000   000  000   000  000     000     
    # 000       000   000  000000000  000000000  000     000     
    # 000       000   000  000 0 000  000 0 000  000     000     
    #  0000000   0000000   000   000  000   000  000     000     
    
    commit: (msg) ○->
        
        window.split.raise 'terminal'
        window.terminal.clear()
        window.terminal.appendMeta diss: Syntax.dissForTextAndSyntax "commit #{msg}", 'kode'

        if gitDir =○ kakao 'fs.git' window.textEditor.currentFile
            
            m = msg.join ' '
            m = 'misc' if empty m

            out = ''
            
            out +=○ kakao 'app.sh' '/usr/bin/git' cwd:gitDir, arg:"add ."                   
            out +=○ kakao 'app.sh' '/usr/bin/git' cwd:gitDir, arg:['commit' '-m' m] 
            out +=○ kakao 'app.sh' '/usr/bin/git' cwd:gitDir, arg:"push -q" 

            window.terminal.clear()
            for line in out.split '\n'
                window.terminal.appendMeta diss: Syntax.dissForTextAndSyntax line, 'kode'
                    
    #  0000000  000   000   0000000   000   000   0000000   00000000   0000000
    # 000       000   000  000   000  0000  000  000        000       000
    # 000       000000000  000000000  000 0 000  000  0000  0000000   0000000
    # 000       000   000  000   000  000  0000  000   000  000            000
    #  0000000  000   000  000   000  000   000   0000000   00000000  0000000

    logChanges: (changes) =>

        extn = slash.ext changes.file
        if extn in Syntax.syntaxNames
            syntaxName = extn
        else
            syntaxName = 'txt'

        sytx = new Syntax syntaxName, (i) -> changes.lines[i]

        sytx.setLines changes.lines

        linesAdded = 0
        index = 0
        for text in changes.lines
            
            isBoring = false

            dss = sytx.getDiss index

            if changes.change == 'deleted'

                dss.map (ds) -> ds.clss += ' ' + 'git-deleted'

                lineMeta =
                    line:       window.terminal.numLines()
                    start:      0
                    end:        text.length
                    clss:       'gitInfoDelete'
                window.terminal.meta.add lineMeta

            else if changes.change == 'added'

                lineMeta =
                    line:       window.terminal.numLines()
                    start:      0
                    end:        text.length
                    clss:       'gitInfoAdded'
                window.terminal.meta.add lineMeta

            else if changes.change == 'changed'

                isBoring = linediff.isBoring changes.info.mod[index].old, changes.info.mod[index].new
                
                if not isBoring
                    diffs = linediff changes.info.mod[index].old, changes.info.mod[index].new
                    for diff in diffs
                        continue if diff.change == 'delete'
                        lineMeta =
                            line:       window.terminal.numLines()
                            start:      diff.index
                            end:        diff.index+diff.length
                            clss:       'gitInfoChange'
                        window.terminal.meta.add lineMeta

            if not isBoring
                meta =
                    diss: dss
                    href: "#{changes.file}:#{changes.line+index}"
                    clss: 'searchResult'
                    click: @onMetaClick
    
                window.terminal.appendMeta meta
                post.emit 'search-result' meta
                linesAdded++
                
            index += 1
            
        if linesAdded ➜ window.terminal.appendMeta clss: 'spacer'
        index

    #  0000000  000000000   0000000   000000000  000   000   0000000
    # 000          000     000   000     000     000   000  000
    # 0000000      000     000000000     000     000   000  0000000
    #      000     000     000   000     000     000   000       000
    # 0000000      000     000   000     000      0000000   0000000

    diff: => @status true

    status: (diff) ->

        window.split.raise 'terminal'
        window.terminal.clear()

        onMetaClick = @onMetaClick
        logChanges  = @logChanges
        
        Git.status(window.editor.currentFile).then (status) ○->

            log 'status' status
            
            return if empty status

            logFile = (change, file, status, spacer) ->

                return if slash.ext(file) in ['js' 'css']

                symbol = switch change

                    'changed' ➜ '●'
                    'added'   ➜ '◼'
                    'deleted' ➜ '✘'

                path = slash.relative file, status.gitDir

                window.terminal.appendMeta
                    diss:       Syntax.dissForTextAndSyntax "#{path}", 'ko'
                    href:       file
                    clss:       'gitInfoFile'
                    click:      onMetaClick
                    line:       symbol
                    lineClss:   'gitInfoLine '+change
                
                if spacer ➜ window.terminal.appendMeta clss:'spacer'

            for file in status.deleted

                if slash.ext(file) in ['kode' 'styl' 'pug']
                    logFile 'deleted' file, status, diff

            for file in status.added

                if slash.ext(file) in ['kode' 'styl' 'pug']
                    logFile 'added' file, status, diff
                    continue if not diff
                    text =○ ffs.read file
                    lines = text.split '\n'
                    logChanges lines:lines, line:1, file:file, change:'added'

            for file in status.changed
                
                if slash.ext(file) in ['kode' 'styl' 'pug']
                    logFile 'changed' file, status, diff
                    continue if not diff 
                    
                    changeInfo =○ Git.diff file

                    for change in changeInfo.changes

                        line = change.line

                        if not empty change.mod
                            lines = change.mod.map (l) -> l.new
                            logChanges lines:lines, file:changeInfo.file, line:line, info:change, change:'changed'

                        if not empty change.add
                            lines = change.add.map (l) -> l.new
                            logChanges lines:lines, file:changeInfo.file, line:line, info:change, change:'added'

                        if not empty change.del
                            lines = change.del.map (l) -> l.old
                            logChanges lines:lines, file:changeInfo.file, line:line, info:change, change:'deleted'

            window.terminal.appendMeta clss: 'spacer'
            window.terminal.scroll.cursorToTop 7

export new GitInfo
