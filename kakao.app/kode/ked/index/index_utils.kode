###
000  000   000  0000000    00000000  000   000          000   000  000000000  000  000       0000000
000  0000  000  000   000  000        000 000           000   000     000     000  000      000     
000  000 0 000  000   000  0000000     00000            000   000     000     000  000      0000000 
000  000  0000  000   000  000        000 000           000   000     000     000  000           000
000  000   000  0000000    00000000  000   000  000000   0000000      000     000  0000000  0000000 
###

use ../../kxk ▪ matchr

function index_utils

    @requireRegExp : /^\s*([\w\{\}]+)\s+=\s+require\s+[\'\"]([\.\/\w]+)[\'\"]/
    @includeRegExp : /^#include\s+[\"\<]([\.\/\w]+)[\"\>]/
    @methodRegExp  : /^\s+([\@]?\w+|@)\s*\:\s*(\(?.*\)?)?\s*○?[=-]\>/
    @funcRegExp    : /^\s*([\w\.]+)\s*[\:\=][^\(\)\'\"]*(\(.*\))?\s*○?[=-]\>/
    @postRegExp    : /^\s*post\.on\s+[\'\"](\w+)[\'\"]\s*\,?\s*(\(.*\))?\s*[=-]\>/
    @testRegExp    : /^\s*(▸\s+.+)/
    @splitRegExp   : new RegExp "[^\\w\\d\\_]+", 'g'
    @classRegExp   : /^(\s*\S+\s*=)?\s*(class|function)\s+(\w+)/

    @classNameInLine: line ->
                    
        m = line.match @classRegExp
        m?[3]
        
    @methodNameInLine: line ->
        
        m = line.match @methodRegExp
        if m?
            rgs = matchr.ranges @methodRegExp, line
            if rgs[0].start > 11
                ⮐  null
        m?[1]
        
    @funcNameInLine: line ->

        if m = line.match @funcRegExp
            rgs = matchr.ranges @funcRegExp, line
            if rgs[0].start > 7
                ⮐  null
            
        m?[1]

    @postNameInLine: line ->
        
        if m = line.match @postRegExp
            rgs = matchr.ranges @postRegExp, line
        
        m?[1]
                
    # 000000000  00000000   0000000  000000000  000   000   0000000   00000000   0000000    
    #    000     000       000          000     000 0 000  000   000  000   000  000   000  
    #    000     0000000   0000000      000     000000000  000   000  0000000    000   000  
    #    000     000            000     000     000   000  000   000  000   000  000   000  
    #    000     00000000  0000000      000     00     00   0000000   000   000  0000000    
    
    @testWord: word ->
        
        if
            word.length < 3                     ➜ false # exclude when too short
            word[0] in ['-', "#"]               ➜ false
            word[word.length-1] == '-'          ➜ false 
            word[0] == '_' and word.length < 4  ➜ false # exclude when starts with underscore and is short
            /^[0\_\-\@\#]+$/.test word          ➜ false # exclude when consist of special characters only
            /\d/.test word                      ➜ false # exclude when word contains number
                                                ➜ true

export index_utils
