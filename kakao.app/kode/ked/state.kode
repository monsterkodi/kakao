###
 0000000  000000000   0000000   000000000  00000000  
000          000     000   000     000     000       
0000000      000     000000000     000     0000000   
     000     000     000   000     000     000       
0000000      000     000   000     000     00000000  
###

use ../kxk  ◆ immutable kstr
use  ./act  ◆ del insert select join indent multi
use  ./util ◆ util syntax
use child_process os

function state
    
    @: @cells name ->
        
        @name = name + '.state'
        
        for act in [del insert select join indent multi]
            for k,v of act
                @[k] = v.bind @
        
        @syntax = new syntax
        @hasFocus = false
    
        @s = immutable
            lines:       ['']
            selections:  []
            highlights:  []
            cursors:     [[0 0]]
            main:        0
            view:        [0 0]
            
        @h = [@s] # undo states (history)
        @r = []   # redo states
            
    #  0000000  00000000  000000000  
    # 000       000          000     
    # 0000000   0000000      000     
    #      000  000          000     
    # 0000000   00000000     000     
    
    set: item arg =>
        
        # lf item noon(arg) if item=='selections'
        @s = @s.set item arg
        @swapState()
        @
        
    setSelections: selections -> @set 'selections' util.mergeLineRanges(@allLines() selections)
    setHighlights: highlights -> @set 'highlights' util.normalizeSpans(highlights)
                
    #  0000000  000   000  00000000    0000000   0000000   00000000    0000000  
    # 000       000   000  000   000  000       000   000  000   000  000       
    # 000       000   000  0000000    0000000   000   000  0000000    0000000   
    # 000       000   000  000   000       000  000   000  000   000       000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  0000000   
    
    setCursors: cursors main -> 

        if main is arr ➜ main = util.indexOfPosInPositions main cursors
        if main is num and main < 0 ➜ main = cursors.length+main
        
        if main?
            mainCursor = copy cursors[clamp 0 cursors.length-1 main]
        else
            mainCursor = @mainCursor()
        
        cursors = util.normalizePositions cursors @s.lines.length-1
            
        @s = @s.set 'cursors' cursors

        main = -1
        for cur,idx in cursors
            if cur eql mainCursor
                main = idx
                break
                
        main = @s.main if main < 0
        main = clamp 0 @s.cursors.length-1 main
            
        @s = @s.set 'main' main    
        
        @adjustViewForMainCursor()
        @swapState()
        @
        
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
        
    setLines: lines =>
        
        @syntax.setLines lines
        
        @s = @s.set 'lines' lines        
        @r = []
        @pushState()
        
    allLines: => @s.lines.asMutable()
        
    loadLines: lines =>
        
        @clearCursorsHighlightsAndSelections()
        @r = []
        @h = []
        @setLines lines
        
    clearLines: => 
        
        @setLines ['']
        @setMainCursor 0 0
        
    isValidLineIndex:   li => 0 <= li < @s.lines.length
    isInvalidLineIndex: li => not @isValidLineIndex li
        
    # 000   000  000   000  0000000     0000000   
    # 000   000  0000  000  000   000  000   000  
    # 000   000  000 0 000  000   000  000   000  
    # 000   000  000  0000  000   000  000   000  
    #  0000000   000   000  0000000     0000000   
    
    undo: =>
        
        ⮐ if @h.length <= 1
        @r.push @h.pop()
        @s = @h[-1]
        @syntax.setLines @allLines()
        
    redo: =>
        
        ⮐ if empty @r
        @h.push @r.pop()
        @s = @h[-1]
        @syntax.setLines @allLines()
        
    begin: => @beginIndex = @h.length
        
    end: => 
        
        if valid @beginIndex
            
            @h.splice @beginIndex @h.length-@beginIndex-1
    
            delete @beginIndex
        @
            
    pushState: -> @h.push @s;@
    swapState: -> @h.pop();@pushState() 
        
    isDirty: => @h.length > 1
    hasRedo: => @r.length > 0
                
    gutterWidth: => max 4 2 + Math.ceil(Math.log10(@s.lines.length+1))
                
    #  0000000  000   000  000000000  
    # 000       000   000     000     
    # 000       000   000     000     
    # 000       000   000     000     
    #  0000000   0000000      000     
    
    cut: =>
        # lf 'state.cut'
        @copy()
        if empty @s.selections
            @selectCursorLines()
            lf 'state.cut' @allSelections()
        @deleteSelection()
        
    #  0000000   0000000   00000000   000   000  
    # 000       000   000  000   000   000 000   
    # 000       000   000  00000000     00000    
    # 000       000   000  000           000     
    #  0000000   0000000   000           000     
    
    copy: =>
    
        switch os.platform()
            
            'darwin'
                
                proc = child_process.spawn 'pbcopy'
                proc.stdin.end @textForSelectionOrCursorLines()
                
            'linux'
            
                proc = child_process.spawn 'xsel' ['-i' '--clipboard'] 
                proc.stdin.write @textForSelectionOrCursorLines()
                proc.stdin.end()
            
            'win32'
                
                proc = child_process.spawn "#{◆dir}/../../bin/utf8clip.exe"
                proc.stdin.write @textForSelectionOrCursorLines()
                proc.stdin.end()
        
            
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    paste: => 
    
        switch os.platform() 
            
            'darwin'
                
                @insert child_process.execSync('pbpaste').toString("utf8")
                
            'linux'
            
                text = child_process.execSync('xsel -o --clipboard')
                
                lf 'paste\n' noon(text.toString("utf8"))
            
                @insert text.toString("utf8")
            
            'win32'
            
                @insert child_process.execSync("#{◆dir}/../../bin/utf8clip.exe").toString("utf8")
                
    #  0000000   0000000  00000000    0000000   000      000      
    # 000       000       000   000  000   000  000      000      
    # 0000000   000       0000000    000   000  000      000      
    #      000  000       000   000  000   000  000      000      
    # 0000000    0000000  000   000   0000000   0000000  0000000  
    
    scrollView: dir steps=1 =>
        
        sx = sy = 0
        
        switch dir
            'left'  ➜ sx = -1
            'right' ➜ sx =  1
            'up'    ➜ sy = -steps
            'down'  ➜ sy =  steps 
        
        view = @s.view.asMutable()
        
        view[0] += sx
        view[1] += sy
        
        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows) view[1]
        view[0] = max 0 view[0]
            
        @setView view

    adjustViewForMainCursor: =>
        
        [x y] = @mainCursor()
        
        view = @s.view.asMutable()
        
        if y >= view[1] + @cells.rows - 1
            view[1] = y - @cells.rows + 1
        else if y < view[1]
            view[1] = y
            
        if view[1] > 0 and @s.lines.length < @cells.rows
            view[1] = 0

        view[0] = max 0 x - @cells.cols + 1
            
        @setView view
        
    initView: =>
        
        view = @s.view.asMutable()
        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows) view[1]
        view[0] = max 0 view[0]
        
        @setView view
        
    setView: view => 
    
        @set 'view' view
        @
                
    rangeForVisibleLines: =>
        
        [@s.view[0] @s.view[1] @s.view[0]+@cells.cols-1 @s.view[1]+@cells.rows-1]
                                    
export state
