###
    00     00  000   0000000   0000000  
    000   000  000  000       000       
    000000000  000  0000000   000       
    000 0 000  000       000  000       
    000   000  000  0000000    0000000  
###

# use ../../../kxk ▪ kutil kseg
# use ../../../kxk ◆ pepe
# use              ◆ belt

class misc
        
    ###
     0000000   0000000   00     00  00000000   000      00000000  000000000  000   0000000   000   000  
    000       000   000  000   000  000   000  000      000          000     000  000   000  0000  000  
    000       000   000  000000000  00000000   000      0000000      000     000  000   000  000 0 000  
    000       000   000  000 0 000  000        000      000          000     000  000   000  000  0000  
     0000000   0000000   000   000  000        0000000  00000000     000     000   0000000   000   000  

    args:
        before   the chunk before the cursor
        turd     the part of it that needs completion, usually the last word or the last punctuation character  
        words    list of chunks collected from current file and other sources
    
    ⮐  list of strings suitable for completion
    
    filters chunks that don't match
    removes trailing crappy punctuation from the matching chunks
    inserts matching subwords if chunk contains punctuation, eg: for chunk 'obj.prop' and before 'my.' it will include '.prop'
    ###
    
    @prepareWordsForCompletion: before turd words ->
        
        filtered = []
        
        for wi w in ipairs words
        
            if kstr.startsWith w turd
                if 
                    kstr.startsWith(w '..') ➜ _ = nil
                    kstr.startsWith(w './') ➜ _ = nil
                    string.match(w "\\d+.\\d+") and not w.startsWith(before) ➜ _ = nil
                    ➜ 
                        p = pepe w
                        if p.unbalanced or p.mismatch
                            
                            if w.endsWith(p.tail) and p.mismatch
                                fix = p.mismatch[1].content[1]
                                filtered∙push fix
                                wds = kseg.words fix
                                if valid wds
                                    fst = string.sub(fix 1 wds[1].index+wds[1].word.len)
                                    if fst != fix
                                        filtered∙push fst 
                            elif p.unbalanced
                                fix = p.unbalanced[1].content[1]
                                filtered∙push fix
                        else    
                            if 0 <= kstr.find(w '\n')
                                w = string.sub w 1 kstr.find(w '\n')
                                
                            push = true
                            wds = kseg.words w
                            if valid wds
                                balanced = false
                                lst = wds[1].index+wds[1].word.length
                                if lst < w.length
                                    if lst >= before.length
                                        fst = string.sub(w 1 lst)
                                        p = pepe fst
                                        if not p.unbalanced or p.mismatch
                                            filtered∙push fst
                                            push = false
                                        else
                                            balanced = true
                                    if not balanced
                                        push = false
                            if push        
                                filtered∙push w
            else            
                wds = kseg.words w
                for idx subw in ipairs wds        
                    if subw.word.startsWith turd
                        filtered∙push subw.word    
                        
                        if idx == wds.length-1 and subw.index+subw.word.length < w.length-1
                            rwd = string.sub(w subw.index)
                            p = pepe rwd
                            if not (p.unbalanced or p.mismatch)
                                filtered∙push rwd
                                
                    elif turd.length == 1 and turd == w[subw.index-1]
                        if turd != '.'
                            filtered∙push turd[-1] + subw.word
                        else
                            if string.match(before "\\d+\\." ) and string.match(subw.word "\\d+")
                                if w.startsWith before 
                                    filtered∙push turd[-1] + subw.word           
                            elif not string.match(before "\\d+\\.") and not string.match(subw.word "\\d+")
                                filtered∙push turd[-1] + subw.word
           
        words = kutil.uniq filtered
        
        ⮐  [] if empty words
        
        segls = []
        
        push = s ->
            
            ⮐  if kseg.str(s) == turd
            
            ws = kseg.words s
            ws = ws.filter((w) -> w.index+w.segl.len > turd.len)
            
            if valid ws[0] 
                if ws[0].index == 0 and turd != ws[0].word != s and ws[0].word.startsWith(turd)
                    segls.push ws[0].segl
                
            segls.push s
        
        for si segl in ipairs kseg.segls(words)

            tc = kseg.tailCountTurd segl
            
            if tc == 0 or tc == 1 and segl[0] == segl[-1]
                push segl
            else
                ends = kseg.str segl∙slice(segl.length-tc)
                if kstr.find('])}' ends) >= 1 or kstr.find('])}' string.sub(ends ends.len ends.len)) >= 1 and string.sub(ends ends.len-1 ends.len-1) != ','
                    push segl
                else
                    beforeTurd = segl∙slice(1 segl.length-tc)
                    if valid beforeTurd
                        push segl∙slice(1 segl.length-tc)
                    
        strs = segls.map kseg.str
        strs.sort()
        kutil.uniq strs
        
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000  
    # 000       000   000  000   000  000   000  000       0000  000     000     
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000     
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     
    
    @isCommentLine: line ->
    
        trimmed = kseg.trim(line)
        trimmed[0] == "#"

    @indexOfExtremePositionInDirection: posl dir index ->
        
        cmp   = nil
        exi   = nil
        start = nil
        ci    = 1
        
        switch dir
            'left' 'right' ➜ ci = 1
            'up'   'down'  ➜ ci = 2
        
        switch dir
            'left' 'up'    ➜ start =  Infinity ; cmp = (a b) -> a > b
            'right' 'down' ➜ start = -Infinity ; cmp = (a b) -> a < b
        
        for idx pos in ipairs posl
            if cmp(start pos[ci])
                start = pos[ci]
                exi   = idx
                
        if valid index and valid posl[index]    
            if posl[exi][ci] == posl[index][ci]  
                ⮐  index                         
        
        exi

⮐  misc
