###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    
###

use ◆ ttio gutter editor status screen cells state scroll konsole
use ./util ◆ logfile util
use ../kxk ▪ karg kstr slash
use ../kxk/nfs

args = karg """
    ked [file]
        options                      **
        version    log version       = false
    """

function KED

    @: ->
        
        @version = '0.0.2'

        if args.version ➜ log @version; process.exit 0
            
        @konsoleRows = 0
                    
        @t = new ttio
        
        @logfile = new logfile
        
        global.lfc = args... => lf.apply null args; if global.lc? ➜ global.lc.apply null args 
                
        @screen  = new screen @t
        
        @editor  = new editor   @screen
        @konsole = new konsole  @screen
        @gutter  = new gutter   @screen @editor.state
        @scroll  = new scroll   @screen @editor.state
        @status  = new status   @screen @editor.state
        
        lfc 'ked' @version
        
        @editor.on  'redraw'      @redraw
        @konsole.on 'konsoleRows' @onKonsoleRows
        
        @mouseHandlers = [@scroll @konsole @editor]
        @wheelHandlers = [        @konsole @editor]
        @keyHandlers   = [        @konsole @editor]
        
        @t.on 'key'    @onKey
        @t.on 'mouse'  @onMouse
        @t.on 'wheel'  @onWheel
        @t.on 'resize' @redraw
        @t.on 'paste'  @onPaste
                                    
        if valid args.options
            @loadFile args.options[0]
        else
            @editor.state.syntax.ext = 'txt'
            @editor.state.loadLines ['']
            @t.setCursor 0 0
            @redraw()
        
    @run: -> new KED()
    
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
        
    reloadFile: => @loadFile @status.file
        
    loadFile: p ○=>
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @status.file = slash.tilde  p
        else
            @status.file = slash.normalize p

        text =○ nfs.read slash.untilde(p)
        
        lines = text.split /\r?\n/
        
        @editor.state.syntax.ext = slash.ext p
        @editor.state.loadLines lines
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
        @redraw()
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ○=>
        
        text = @editor.state.s.lines.asMutable().join '\n'
        
        if valid @status.file
            ○ nfs.write slash.untilde(@status.file) text
            @reloadFile()
            
    saveAs: => lfc 'saveAs'
    
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    onPaste: text => 
    
        @editor.state.insert text
        @redraw()
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event col row button mods count =>
        
        for handler in @mouseHandlers
            if handler.onMouse event col row button mods count
                break
                
        @redraw()
                
    onWheel: col row dir mods =>
        
        for handler in @wheelHandlers
            handler.onWheel col row dir mods
            
        @redraw()
            
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key =>
        
        # lc 'key' key
        
        switch key
            
            'alt+q' 'ctrl+d' 'ctrl+q'       ➜ ⮐ @t.quit()
            'alt+r' 'ctrl+r' 'cmd+r'        ➜ ⮐ @reloadFile()
            'ctrl+s' 'cmd+s'                ➜ ⮐ @saveFile()
            'shift+cmd+s' 'shift+ctrl+s'    ➜ ⮐ @saveAs()
            
        for handler in @keyHandlers
            break if handler.onKey key
                
        @redraw()
                                
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    onKonsoleRows: @konsoleRows =>
    
    redraw: =>
        
        start = process.hrtime()
        
        w = @t.cols()
        h = @t.rows()
        
        s = 1
        c = @konsoleRows
        g = @editor.state.gutterWidth()
        @status.gutter = g
        
        if false # scrollbar on right side
            @scroll.cells.init w-s 0     s     h-c-1
            @gutter.cells.init 0   0     g     h-c-1
            @status.cells.init 0   h-1   w     1
            @editor.init       g   0     w-g-s h-c-1
            @konsole.init      0   h-1-c w-g-s c
        else
            @scroll.cells.init 0   0     s     h-c-1 
            @gutter.cells.init s   0     g     h-c-1
            @status.cells.init 0   h-1   w     1
            @editor.init       g+s 0     w-g-s h-c-1    
            @konsole.init      0   h-1-c w-g-s c
                        
        @t.hideCursor()
        @screen.init()
        @gutter.draw()
        @scroll.draw()
        @status.draw()
        @editor.draw()
        @konsole.draw()
        @screen.render()
        @editor.showCursorIfInView() 
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
export KED.run

