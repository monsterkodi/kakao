
# ███  ███   ███   ███████  ████████   ████████   ███████  █████████
# ███  ████  ███  ███       ███   ███  ███       ███          ███   
# ███  ███ █ ███  ███████   ████████   ███████   ███          ███   
# ███  ███  ████       ███  ███        ███       ███          ███   
# ███  ███   ███  ███████   ███        ████████   ███████     ███   

# Copyright (c) 2022 Enrique García Cota

use ./class

rep   = string.rep
match = string.match
char  = string.char
gsub  = string.gsub
fmt   = string.format

rawpairs = t -> ⮐  (next t nil)

smartQuote = str ->
    if match(str, '"') and not match(str, "'")
       ⮐  "'" & str & "'"
    ⮐  '"' & gsub(str, '"', '\\"') & '"'
    
shortEscapes = {"\a":"\\a" "\b":"\\b" "\f":"\\f" "\n":"\\n" "\r":"\\r" "\t":"\\t" "\v":"\\v" "\127":"\\127"}
longEscapes  = {"\127":"\127"}

for i in 0..31
    ch = char(i)
    if not shortEscapes[ch]
        shortEscapes[ch] = "\\" & i
        longEscapes[ch] = fmt("\\%03d" i)

escape = str -> ⮐  (gsub(gsub(gsub(str "\\" "\\\\") "(%c)%f[0-9]" longEscapes) "%c" shortEscapes))

luaKeywords = {
   'and':       true
   'break':     true
   'do':        true
   'else':      true
   'elseif':    true
   'end':       true
   'false':     true
   'for':       true
   'function':  true
   'goto':      true
   'if':        true
   'in':        true
   'local':     true
   'nil':       true
   'not':       true
   'or':        true
   'repeat':    true
   'return':    true
   'then':      true
   'true':      true
   'until':     true
   'while':     true
}

isIdentifier = str ->

    ⮐  type(str) == "string" and str:match("^[_%a][_%a%d]*$") and not luaKeywords[str]

isSequenceKey = k sequenceLength ->

    ⮐  type(k) == "number" and math.floor(k) == k and 1 <= (k) and k <= sequenceLength

typeOrders = { 'number':1   'boolean':2  'string':3 'table':4 'function':5 'userdata':6 'thread':7 }

sortKeys = a b ->

    ta = type(a)
    tb = type(b)
    
    if ta == tb and (ta == 'string' or ta == 'number')
       ⮐  (a) < (b)
    
    dta = typeOrders[ta] or 100
    dtb = typeOrders[tb] or 100
    
    ⮐  dta == dtb and ta < tb or dta < dtb

getKeys = t ->

    seqLen = 1
    while t[seqLen] != nil
        seqLen = seqLen + 1
    seqLen = seqLen - 1
    
    (keys, keysLen) = ({}, 0)
    for k in rawpairs(t)
        if not isSequenceKey(k, seqLen)
            keysLen = keysLen + 1
            keys[keysLen] = k
    table.sort(keys, sortKeys)
    ⮐  (keys, keysLen, seqLen)

countCycles = x cycles ->

    if type(x) == "table"
    
        if cycles[x]
            cycles[x] = cycles[x] + 1
        else
            cycles[x] = 1
            for k v in rawpairs(x)
                countCycles k cycles
                countCycles v cycles
            countCycles getmetatable(x) cycles

puts = buf str ->

    buf.n = buf.n + 1
    buf[buf.n] = str

class Inspector

    buf     : { n = 0 }
    ids     : {}
    cycles  : {}
    depth   : math.huge
    level   : 0
    newline : '\n'
    indent  : "    "
    
    @: root ->
    
        countCycles(root, @cycles)
        
        @putValue root
        
        # log "Inspector" root
        
        ⮐  table.concat @buf

    getId: v ->
    
        id = @ids[v]
        ids = @ids
        if not id then
            tv = type(v)
            id = (ids[tv] or 0) + 1
            (ids[v] ids[tv]) = (id id)
        ⮐  tostring(id)

    putValue: v ->
    
        tabify = -> puts @buf @newline & rep(@indent @level)
    
        buf = @buf
        tv = type(v)
        
        if tv == 'string'
            puts(buf, smartQuote(escape(v)))
        elif tv == 'number' or tv == 'boolean' or tv == 'nil' or tv == 'cdata' or tv == 'ctype' 
            puts(buf, tostring(v))
        elif tv == 'table' and not @ids[v]
            t = v
            
            if @level >= @depth
                puts buf '{...}'
            else
                @level = @level + 1
                
                if @cycles[t] > 1 
                    tabify()
                    puts buf fmt('<%d>' @getId(t))
                
                (keys keysLen seqLen) = getKeys(t)
                
                for i in 1..seqLen + keysLen 
                    if i <= seqLen
                        puts buf ' '
                        @putValue(t[i])
                    else
                        tabify()
                        k = keys[i - seqLen]
                        if isIdentifier k
                            puts buf k
                            if k.len < 12
                                puts buf rep(" " 12-k.len)
                        else
                            puts buf "["
                            @putValue k
                            puts buf "]"
                        puts buf '  '
                        @putValue t[k]
                
                mt = getmetatable(t)
                if type(mt) == 'table'
                    tabify()
                    puts buf '<meta> '
                    @putValue(mt)
                
                @level = @level - 1
                
                if seqLen > 0
                    puts buf ' '
        else
            if tv == "function"
                puts buf "->"
            elif tv == "table"
                puts buf "<" & @getId(v) & ">"
            else
                puts buf fmt('<%s %d>' tv @getId(v))

⮐  (root) -> ⮐  Inspector(root)
