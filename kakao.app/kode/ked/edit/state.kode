###
     ███████  █████████   ███████   █████████  ████████  
    ███          ███     ███   ███     ███     ███       
    ███████      ███     █████████     ███     ███████   
         ███     ███     ███   ███     ███     ███       
    ███████      ███     ███   ███     ███     ████████  

    handles basic text editing for the editor
    wraps text and editor state like cursors and selections 
        in an immutable to simplify undo
    delegates almost all text manipulation to pure functions
        in tool▸belt to simplify testing
###

use child_process os
use ../../kxk ▪ immutable kstr kseg events
use ../util   ◆ syntax
use ./act     ◆ del insert select join indent multi main
use ./tool    ◆ belt
use           ◆ keys mode

function state extends events

    @: @cells name ->

        @name = name + '.state'
        
        @allowedModes = {}

        for act in [del insert select join indent multi main]
            for k,v of act
                @[k] = v.bind @
                
        @handleKey = keys.bind @

        @syntax = new syntax @name + '.syntax'
        @hasFocus = false

        @clearSingle()

    toggleMode: name => mode.toggle @ name if @allowedModes[name]
    startMode: name => mode.start @ name if @allowedModes[name]
    stopMode: name => mode.stop @ name if @allowedModes[name]
        
    owner: => 
        
        if @name.endsWith '.state'
            @name[0...-6]
        else
            @name
        
    clearHistory: =>
    
        @h = [@s] # undo states (history)
        @r = []   # redo states

    #  0000000  00000000  000000000
    # 000       000          000
    # 0000000   0000000      000
    #      000  000          000
    # 0000000   00000000     000

    set: item arg =>

        @s = @s.set item arg
        @swapState()
        @

    setSelections: selections => @set 'selections' belt.mergeLineRanges(@s.lines selections)
    setHighlights: highlights => @set 'highlights' belt.normalizeSpans(highlights)

    #  0000000  000   000  00000000    0000000   0000000   00000000    0000000
    # 000       000   000  000   000  000       000   000  000   000  000
    # 000       000   000  0000000    0000000   000   000  0000000    0000000
    # 000       000   000  000   000       000  000   000  000   000       000
    #  0000000   0000000   000   000  0000000    0000000   000   000  0000000

    setCursors: cursors opt =>
        
        opt ?= {}
        main = opt.main

        if main is arr ➜ main = belt.indexOfPosInPositions main cursors
        if main is num and main < 0 ➜ main = cursors.length+main

        if main?
            mainCursor = copy cursors[clamp 0 cursors.length-1 main]
        else
            mainCursor = @mainCursor()
        
        cursors = belt.normalizePositions cursors @s.lines.length-1
        
        @s = @s.set 'cursors' cursors

        main = -1
        for cur,idx in cursors
            if cur eql mainCursor
                main = idx
                break

        main = @s.main if main < 0
        main = clamp 0 @s.cursors.length-1 main

        # log "#{@name} #{main} cursors" cursors

        @s = @s.set 'main' main
        
        @adjustViewForMainCursor opt
        @swapState()
        
        mode.cursorsSet @
        @emit 'cursorsSet'
            
        # log "#{@name} done #{@s.cursors}"
        @
            
    textOfSelectionOrWordAtCursor: => 
        
        if @s.selections.length
            ⮐  @textOfSelection()
        else
            ⮐  @wordAtCursor()

    # 000      000  000   000  00000000   0000000
    # 000      000  0000  000  000       000
    # 000      000  000 0 000  0000000   0000000
    # 000      000  000  0000  000            000
    # 0000000  000  000   000  00000000  0000000

    setLines: lines =>
        
        if empty lines ➜ lines = ['']
        
        @setSegls kseg.segls(lines)
        
    setSegls: @segls =>
        
        if empty @segls ➜ @segls = [[]]
        
        @syntax.setSegls @segls
                    
        @changeLinesSegls()
        
        @r = []
        
        @maxLineWidth = belt.widthOfLines @s.lines
        
        @pushState()
        
    loadLines: lines => 
    
        if valid lines and not lines[0] is str ➜ error "#{@name}.loadLines - first line not a string?" lines[0]
        
        @loadSegls kseg.segls(lines)
    
    loadSegls: segls =>
    
        @clearEmpty()
        @setSegls segls

    clearSingle: => @clearSegls [[]]
    clearEmpty:  => @clearSegls [  ]
    clearSegls: @segls =>
    
        @s = immutable
            lines:       @segls
            selections:  []
            highlights:  []
            cursors:     [[0 0]]
            main:        0
            view:        [0 0]
            
        @syntax.clear()
        @clearHistory()
        
    addLine: line ext =>

        segl = kseg line
        @syntax.addSegl segl ext
        @segls ?= []
        @segls.push segl

        @changeLinesSegls()
        
    appendLines: lines ext =>

        segls = kseg.segls lines
        @syntax.appendSegls segls ext
        @segls ?= []
        @segls = @segls.concat segls

        @changeLinesSegls()
        
    #  ███████  ███   ███   ███████   ███   ███   ███████   ████████        ███      ███  ███   ███  ████████   ███████
    # ███       ███   ███  ███   ███  ████  ███  ███        ███             ███      ███  ████  ███  ███       ███     
    # ███       █████████  █████████  ███ █ ███  ███  ████  ███████         ███      ███  ███ █ ███  ███████   ███████ 
    # ███       ███   ███  ███   ███  ███  ████  ███   ███  ███             ███      ███  ███  ████  ███            ███
    #  ███████  ███   ███  ███   ███  ███   ███   ███████   ████████        ███████  ███  ███   ███  ████████  ███████ 

    changeLinesSegls: ->
    
        oldLines = @s.lines
    
        @s = @s.set 'lines' @segls
        
        if oldLines != @s.lines
            diff = belt.diffLines oldLines @s.lines            
            @emit 'lines.changed' diff

    linesInView: => @s.lines[@s.view[1]...@s.view[1]+@cells.rows]

    clearLines: =>

        @setSegls [[]]
        @setMainCursor 0 0

    isValidLineIndex:   li => 0 <= li < @s.lines.length
    isInvalidLineIndex: li => not @isValidLineIndex li

    # 000   000  000   000  0000000     0000000
    # 000   000  0000  000  000   000  000   000
    # 000   000  000 0 000  000   000  000   000
    # 000   000  000  0000  000   000  000   000
    #  0000000   000   000  0000000     0000000

    undo: =>

        ⮐  if @h.length <= 1
        @r.push @h.pop()
        @s = @h[-1]
        @syntax.setSegls @s.lines

    redo: =>

        ⮐  if empty @r
        @h.push @r.pop()
        @s = @h[-1]
        @syntax.setSegls @s.lines

    begin: => @beginIndex = @h.length

    end: =>

        if valid @beginIndex

            @h.splice @beginIndex @h.length-@beginIndex-1

            delete @beginIndex
        @

    pushState: => @h.push @s ; @
    swapState: => @h.pop() ; @pushState()

    isDirty: => @h.length > 1
    hasRedo: => @r.length > 0

    gutterWidth: => max 4 2 + ceil(Math.log10(@s.lines.length+1))

    #  0000000  000   000  000000000
    # 000       000   000     000
    # 000       000   000     000
    # 000       000   000     000
    #  0000000   0000000      000

    cut: =>

        @copy deselect:false
        if empty @s.selections
            @selectCursorLines()
        @deleteSelection()

    #  0000000   0000000   00000000   000   000
    # 000       000   000  000   000   000 000
    # 000       000   000  00000000     00000
    # 000       000   000  000           000
    #  0000000   0000000   000           000

    copy: opt =>
    
        opt ?= {}

        switch os.platform()

            'darwin'

                proc = child_process.spawn 'pbcopy'
                proc.stdin.end @textOfSelectionOrCursorLines()

            'linux'

                proc = child_process.spawn 'xsel' ['-i' '--clipboard']
                proc.stdin.write @textOfSelectionOrCursorLines()
                proc.stdin.end()

            'win32'

                proc = child_process.spawn "#{◆dir}/../../bin/utf8clip.exe"
                proc.stdin.write @textOfSelectionOrCursorLines()
                proc.stdin.end()
                
        @deselect() if opt.deselect != false

    # 00000000    0000000    0000000  000000000  00000000
    # 000   000  000   000  000          000     000
    # 00000000   000000000  0000000      000     0000000
    # 000        000   000       000     000     000
    # 000        000   000  0000000      000     00000000

    paste: =>

        switch os.platform()

            'darwin'

                @insert child_process.execSync('pbpaste').toString("utf8")

            'linux'

                text = child_process.execSync('xsel -o --clipboard')

                log 'paste\n' noon(text.toString("utf8"))

                @insert text.toString("utf8")

            'win32'

                @insert child_process.execSync("#{◆dir}/../../bin/utf8clip.exe").toString("utf8")

    #  0000000   0000000  00000000    0000000   000      000          000   000  000  00000000  000   000  
    # 000       000       000   000  000   000  000      000          000   000  000  000       000 0 000  
    # 0000000   000       0000000    000   000  000      000           000 000   000  0000000   000000000  
    #      000  000       000   000  000   000  000      000             000     000  000       000   000  
    # 0000000    0000000  000   000   0000000   0000000  0000000          0      000  00000000  00     00  

    scrollView: dir steps=1 =>

        sx = sy = 0

        switch dir
            'left'  ➜ sx = -1
            'right' ➜ sx =  1
            'up'    ➜ sy = -steps
            'down'  ➜ sy =  steps

        view = @s.view.asMutable()

        view[0] += sx
        view[1] += sy

        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows) view[1]

        maxOffsetX = max 0 @maxLineWidth-@cells.cols+2
        maxOffsetX = max maxOffsetX @mainCursor()[0]-@cells.cols+2
        view[0] = clamp 0 maxOffsetX view[0]
        
        ⮐  if view eql @s.view

        @setView view

    #  0000000   0000000          000  000   000   0000000  000000000       000   000  000  00000000  000   000  
    # 000   000  000   000        000  000   000  000          000          000   000  000  000       000 0 000  
    # 000000000  000   000        000  000   000  0000000      000           000 000   000  0000000   000000000  
    # 000   000  000   000  000   000  000   000       000     000             000     000  000       000   000  
    # 000   000  0000000     0000000    0000000   0000000      000              0      000  00000000  00     00  
    
    adjustViewForMainCursor: opt =>
        
        ⮐  if @cells.cols <= 0 or @cells.rows <= 0

        [x y] = @mainCursor()

        view = @s.view.asMutable()
        
        opt ?= {}
        
        if opt.adjust == 'topBotDelta'
            topBotDelta = min 6 int(@cells.rows/4)
        else
            topBotDelta = 0

        if y >= view[1] + @cells.rows - 1 - topBotDelta
            view[1] = y - @cells.rows + 1 + topBotDelta
        else if y < view[1] + topBotDelta
            view[1] = y - topBotDelta

        if view[1] > 0 and @s.lines.length <= @cells.rows
            view[1] = 0

        if not @skipAdjustViewForMainCursor
            view[0] = max 0 x - @cells.cols + 2 # adding one for wide graphemes
        
        ⮐  if view eql @s.view
        
        @setView view

    initView: =>

        view = @s.view.asMutable()
        
        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows) view[1]
        view[0] = max 0 view[0]

        @setView view

    setView: view =>
        
        ⮐  if @s.view eql view
        @set 'view' view
        @emit 'view.changed' @s.view
        @

    rangeForVisibleLines: =>

        [@s.view[0] @s.view[1] @s.view[0]+@cells.cols-1 @s.view[1]+@cells.rows-1]

export state
