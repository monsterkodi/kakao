###
    00     00   0000000    0000000  00000000    0000000   
    000   000  000   000  000       000   000  000   000  
    000000000  000000000  000       0000000    000   000  
    000 0 000  000   000  000       000   000  000   000  
    000   000  000   000   0000000  000   000   0000000   

    menu for actions that don't have keyboard shortcuts
###

use view.menu.inputchoice

class macros extends inputchoice

    @: ->
        
        inputchoice.init @ 'macro'
        
    #  0000000   00000000   00000000    0000000   000   000   0000000   00000000  
    # 000   000  000   000  000   000  000   000  0000  000  000        000       
    # 000000000  0000000    0000000    000000000  000 0 000  000  0000  0000000   
    # 000   000  000   000  000   000  000   000  000  0000  000   000  000       
    # 000   000  000   000  000   000  000   000  000   000   0000000   00000000  
    
    arrange: ->

        w = max 20 @width+2+1 # 2 for frame, 1 for right 
        c = @choices∙numChoices()
        
        ih = if @inputIsActive() ➜ 2 ➜ 0
        iz = max 0 ih - 1
        
        h = c + 2 + ih
        scy = int _G.screen.rows/2
        y  = int scy-(c+2)/2
        y -= ih
        
        scx = int _G.screen.cols/2
        x  = int scx - w/2
        
        @input∙layout    x+2   y+1      w-4  iz
        @choices∙layout  x+1   y+1+ih   w-2  c
        @cells∙layout    x     y        w    h

    #  0000000  000   000   0000000   000   000
    # 000       000   000  000   000  000 0 000
    # 0000000   000000000  000   000  000000000
    #      000  000   000  000   000  000   000
    # 0000000   000   000   0000000   00     00

    show: ->
    
        items = belt.linesForText
            """
            status
            diff
            history
            """
        
        items = items∙map((i) -> ' ' & i) # padding for  
            
        ccol = int(_G.screen.cols/2) - 5

        @width = belt.widthOfLines items
        
        @input∙set ''
        @input∙hide()
        @choices∙set items
        @choices∙select 0
        @choices.state∙setView [0 0]
        
        inputchoice.show @
        
    hide: ->
    
        post∙emit 'focus' 'editor'    
        inputchoice.hide @
        
    #  0000000   00000000   00000000   000      000   000  
    # 000   000  000   000  000   000  000       000 000   
    # 000000000  00000000   00000000   000        00000    
    # 000   000  000        000        000         000     
    # 000   000  000        000        0000000     000     
    
    applyChoice: choice ->
        
        # log "macro.applyChoice ▸#{choice}◂"
        
        if empty choice
            input = @input∙current()
            if 
                input == 'bof'  ➜ post∙emit 'goto.bof'
                input == 'eof'  ➜ post∙emit 'goto.eof'
                tonumber(input) ➜ post∙emit 'goto.line' tonumber(input) 'ind'
                
                kstr.startsWith input 'vibrant ' 
                
                    sp = input∙split " "
                    sf = tonumber(sp[1])
                    lf = if (sp.length > 2) ➜ tonumber(sp[2]) ➜ 1
                    post∙emit 'theme.vibrant' sf lf
                    
                input.startsWith 'class '
                
                    sp = input∙split " "
                    if valid sp[1]
                        post∙emit 'file.class' sp[1]
        else
            switch choice
                'diff'    ➜ post∙emit 'differ.file'
                'status'  ➜ post∙emit 'differ.status'
                'history' ➜ post∙emit 'differ.history'
                
        @hide()
        true
        
⮐  macros
