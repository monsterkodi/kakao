###
    ███████    ████████    ███████   ███   ███   ███████  ████████
    ███   ███  ███   ███  ███   ███  ███ █ ███  ███       ███     
    ███████    ███████    ███   ███  █████████  ███████   ███████ 
    ███   ███  ███   ███  ███   ███  ███   ███       ███  ███     
    ███████    ███   ███   ███████   ██     ██  ███████   ████████
###

use ../../../kxk    ▪ kstr slash post
use ../../../kxk    ◆ nfs
use ../../util      ◆ fileutil 
use ../../edit/tool ◆ belt
use ../../theme     ◆ color theme icons
use                 ◆ quicky brocol diritem

import rgxs from './quicky.json' with { type: "json" }

function browse extends quicky

    @: @screen ->

        super @screen 'browse' 

        @isVisible = false
        
        @setColor 'bg'     theme.quicky.bg
        @setColor 'frame'  theme.quicky.frame
        
        @brocol = new brocol @screen 'browse_brocol'
        @brocol.setColor 'bg' color.darken(@color.bg 0.7)
        @brocol.on 'action'   @onBrocolAction

        @choices.mapscr.rowOffset = 1
        @choices.frontRoundOffset = 2

        post.on 'browse.dir' @gotoDir

    #  ███████   ████████   ████████    ███████   ███   ███   ███████   ████████
    # ███   ███  ███   ███  ███   ███  ███   ███  ████  ███  ███        ███     
    # █████████  ███████    ███████    █████████  ███ █ ███  ███  ████  ███████ 
    # ███   ███  ███   ███  ███   ███  ███   ███  ███  ████  ███   ███  ███     
    # ███   ███  ███   ███  ███   ███  ███   ███  ███   ███   ███████   ████████

    arrange: =>
        
        scx = int @screen.cols/2
        scy = int @screen.rows/2
        
        ih = @inputIsActive() ? 2 : 0
        iz = max 0 ih - 1
        
        hs = int @screen.rows/2
        y  = int scy - hs/2 - ih
        
        cr = @crumbs.visible() ? 1 : 0
        ch = @crumbs.visible() ? hs : min(hs @choices.numFiltered())

        w  = min min(@screen.cols 42) max(32 int(@screen.cols/2))
        bw = @brocol.visible() ? w/2 : 0
        cw = w-bw-2

        x  = int scx-w/2
        
        h  = ch + ih + cr + 2
        fh = @brocol.visible() ? ch : 0
        
        @input.layout    x+2      y+1        w-4   iz
        @crumbs.layout   x+2      y+1+ih     w-4   cr
        @choices.layout  x+1      y+1+ih+cr  cw    ch
        @brocol.layout   x+1+cw   y+1+ih+cr  bw    fh
        @cells.layout    x        y           w     h

    # 0000000    00000000    0000000   000   000
    # 000   000  000   000  000   000  000 0 000
    # 000   000  0000000    000000000  000000000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000  00     00

    draw: =>

        ⮐  if @hidden()
         
        super()
        
        if @crumbs.visible()
            # add left and right padding to crumbs
            cry = @crumbs.cells.wy(0)-@cells.y
            @cells.set 1                    cry ' ' null @color.bg
            @cells.set @crumbs.cells.cols+2 cry ' ' null @color.bg
        
        if @brocol.visible()
        
            @brocol.draw()
            
            bg = @color.bg
            fg = @color.frame
            
            x = @choices.cells.cols+2
    
            if choice = @choices.current()
            
                x = @choices.cells.cols-1
                y = @choices.currentIndex()-@choices.state.s.view[1]
                
                cc = @choices.hasFocus() ? @choices.color.hover.bg : @choices.color.hover.blur
                
                @choices.cells.fill_row     y choice.tilde.length x-1 ' ' bg cc
                @choices.cells.set          x y '' cc bg 
        
    #  0000000    0000000   000000000   0000000   0000000    000  00000000   
    # 000        000   000     000     000   000  000   000  000  000   000  
    # 000  0000  000   000     000     000   000  000   000  000  0000000    
    # 000   000  000   000     000     000   000  000   000  000  000   000  
    #  0000000    0000000      000      0000000   0000000    000  000   000  
    
    gotoDir: dir select ○=>
        
        dir = process.cwd() if empty dir
        dir = slash.untilde dir
        
        try
            items =○ nfs.list dir recursive:false
        catch err
            log 'list error' err
            ⮐ 

        @currentDir = dir
        @crumbs.show @currentDir
            
        weight = item =>

            p = slash.parse item.path

            w = 0
            if item.tilde == icons.dir + ' ..'
                log 'is this ever reached?'
                ⮐  w 
            w += 10000 if item.type == 'file'
            w += 1000  if item.tilde.startsWith icons.dir + ' .'
            w += 1     if slash.ext(item.tilde) in ['js' 'json']
            w += kstr.weight(p.file)
            w
        
        for item in items
            item.tilde = diritem.symbolName(item)

        items.sort (a b) -> weight(a) - weight(b)
        
        parent = slash.dir @currentDir

        items.unshift # add the .. item
            type: 'dir'
            file: slash.name(parent)
            path: parent
            tilde: parent ? (icons.dir + '\u00A0..') : ''
            # prevents icon from growing    ▴▴▴▴
            
        select ?= items[1].path
               
        @showPathItems items select
            
    # 00000000  000  000      00000000       0000000   00000000       0000000    000  00000000   
    # 000       000  000      000           000   000  000   000      000   000  000  000   000  
    # 000000    000  000      0000000       000   000  0000000        000   000  000  0000000    
    # 000       000  000      000           000   000  000   000      000   000  000  000   000  
    # 000       000  0000000  00000000       0000000   000   000      0000000    000  000   000  
    
    gotoDirOrOpenFile: path ○=>
        
        isDir =○ nfs.dirExists path
        
        if isDir
            ○ @gotoDir path
        else
            isFile =○ nfs.fileExists path
            if isFile
                @openFileInEditor path
                                    
    # 00000000   00000000   00000000  000   000  000  00000000  000   000  
    # 000   000  000   000  000       000   000  000  000       000 0 000  
    # 00000000   0000000    0000000    000 000   000  0000000   000000000  
    # 000        000   000  000          000     000  000       000   000  
    # 000        000   000  00000000      0      000  00000000  00     00  
        
    preview: item ○=>
        
        ⮐  @hideMap() if empty item?.path
        
        if item.type == 'file' 
        
            @brocol.hide()
        
            if slash.ext(item.path) in fileutil.sourceFileExtensions
                text =○ nfs.read item.path
                ⮐  if @brocol.visible()
                segls = belt.seglsForText text
                @choices.mapscr.setSyntaxSegls slash.ext(item.path) segls
                @choices.mapscr.show()
            else
                @hideMap()
                
        else # if item.type == 'dir'
        
            @hideMap()
        
            if not item.tilde.endsWith '..'
                @brocol.show item.path
                @choices.hoverForSubmenu = true
            else
                @brocol.hide()
                @choices.hoverForSubmenu = false
                
        @arrange()    
        post.emit 'redraw'
            
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>

        ⮐  if @hidden()
        ret = @brocol.onMouse event  ; ⮐  ret if ret?.redraw
        super event

    onWheel: event =>
        
        ⮐  if @hidden()
        ret = @brocol.onWheel event ; ⮐  ret if ret?.redraw
        super event
                
    #  0000000   00000000   00000000   000      000   000  
    # 000   000  000   000  000   000  000       000 000   
    # 000000000  00000000   00000000   000        00000    
    # 000   000  000        000        000         000     
    # 000   000  000        000        0000000     000     
    
    applyChoice: choice =>
        
        switch @input.current()
            
            '/'  ➜ ⮐  @gotoDir '/'
            '~'  ➜ ⮐  @gotoDir '~'
            '.'  ➜ ⮐  @gotoDir @currentDir
            '..' ➜ ⮐  @gotoDir slash.dir(@currentDir)
            
        if empty choice and valid @input.current()
            @gotoDirOrOpenFile @input.current()
            ⮐  redraw:true
            
        if empty choice      ➜ ⮐  redraw:false 
        if empty choice.path ➜ ⮐  redraw:false 

        @gotoDirOrOpenFile choice.path 
        redraw:true

    choicesFiltered: =>
        
        @preview @choices.current()
        
    #  0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000          000     000  000   000  0000  000  
    # 000000000  000          000     000  000   000  000 0 000  
    # 000   000  000          000     000  000   000  000  0000  
    # 000   000   0000000     000     000   0000000   000   000  
    
    onBrocolAction: action choice =>
        
        switch action
            
            'click' ➜ ⮐  @applyChoice choice
                
    onChoicesAction: action choice =>
    
        # log 'onChoicesAction' action choice @currentDir
            
        switch action
            
            'right' 
                
                if choice.path
                    if choice.tilde == ' ..'
                        ⮐  @moveSelection 'down'
                    if choice.type == 'file'
                        ⮐  post.emit 'quicky' choice.path
                    else
                        @hideMap()
                        ⮐  @gotoDirOrOpenFile choice.link ? choice.path
                        
            'left' 'delete'
                
                if choice.path
                    upDir = slash.dir @currentDir
                    ⮐  if empty upDir
                    @hideMap()
                    ⮐  @gotoDir upDir @currentDir
            'space'            
                
                if choice.path and choice.type == 'file'
                    ⮐  post.emit 'quicky' choice.path
                    
        super action choice

export browse
