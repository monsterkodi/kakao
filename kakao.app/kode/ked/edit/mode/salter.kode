#  ███████   ███████   ███      █████████  ████████  ████████ 
# ███       ███   ███  ███         ███     ███       ███   ███
# ███████   █████████  ███         ███     ███████   ███████  
#      ███  ███   ███  ███         ███     ███       ███   ███
# ███████   ███   ███  ███████     ███     ████████  ███   ███

use ../../../kxk ◆ kseg salter
use ../../theme  ◆ theme
use ../tool      ◆ belt
use ..           ◆ mode
      
function salterMode

    @syms: []

    @: @state -> 
    
        @name = 'salter'
        
        if empty salterMode.syms
            salterMode.syms = Object.keys salter.font
        
        @start()

    ###
     0000000   0000000   000      000000000  00000000  00000000   
    000       000   000  000         000     000       000   000  
    0000000   000000000  000         000     0000000   0000000    
         000  000   000  000         000     000       000   000  
    0000000   000   000  0000000     000     00000000  000   000  
    ###
    # ███      ███  ███   ███  ████████
    # ███      ███  ████  ███  ███     
    # ███      ███  ███ █ ███  ███████ 
    # ███      ███  ███  ████  ███     
    # ███████  ███  ███   ███  ████████

    isSalterLine: line ->
    
        trimmed = kseg.trim(kseg.trim(kseg.trim(line) '#'))
        kseg.startsWith(trimmed '0') or kseg.startsWith(trimmed '█')
        
    findPositionsForHeaderInsert: lines pos ->
    
        y = pos[1]
        ⮐  if not @isSalterLine lines[y]
        
        sy = y
        while @isSalterLine lines[sy-1]
            sy -= 1
            break if y-sy >= 4
            
        ey = y
        while @isSalterLine lines[ey+1]
            ey += 1
            break if ey-sy >= 4
                    
        posl = []
        if ey-sy >= 4
            for y in sy..sy+4
                posl.push [pos[0] y]

        posl
    
    start: -> 
    
        cursors = @findPositionsForHeaderInsert @state.s.lines @state.mainCursor()
        
        if valid cursors
            @state.setCursors cursors
            
        else
            # if valid trim(belt.textFromPosToEol(@state.s.lines @state.mainCursor()))
            @state.moveCursors 'eol'
            @state.singleCursorAtIndentOrStartOfLine()
            for i in 0...5
                @state.insert '# \n'
            @state.moveCursors 'right'
            @state.moveCursors 'right'
            @state.moveCursors 'up'
            for i in 0...4
                @state.expandCursors 'up'
        
    stop: ->
    
        @state.setMainCursor @state.mainCursor()
    
    # ███   ███  ████████  ███   ███
    # ███  ███   ███        ███ ███ 
    # ███████    ███████     █████  
    # ███  ███   ███          ███   
    # ███   ███  ████████     ███   

    handleKey: key event ->
    
        switch key
            'esc' ➜ ⮐ mode.stop @state @name
            'delete'
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                @state.delete 'back' 
                ⮐
            
        if @state.s.cursors.length != 5 # need to check for alignment as well?
            mode.stop @state @name
            ⮐  'unhandled'
            
        char = valid(event.char) ? event.char : key
            
        if salter.hasChar char
            @state.insert salter(char char:'█' postfix:'  ')
            ⮐
        else
            log ">#{char}<" event
        
        'unhandled'
        
    themeColor: colorName ->
    
        switch colorName
        
            'editor_cursor_multi' ➜ ⮐ theme.syntax['comment triple header']
            
        theme[colorName]

export salterMode
