###
000   000   0000000   00000000   000      0000000  
000 0 000  000   000  000   000  000      000   000
000000000  000   000  0000000    000      000   000
000   000  000   000  000   000  000      000   000
00     00   0000000   000   000  0000000  0000000  
###

use ../kxk ▪ $ drag stopEvent randInt randRange randIntRange elem prefs post

use ◆ tweaky gee

function world

    @: -> 
        
        @main =$ 'main'
        @pause = false
        
        @g = new gee @main
        
        # @tweaky = new tweaky @main
#         
        # @tweaky.init 
            # side:      min: 10    max:200    step:1           value:@g.side,     cb: @g.setSide
            
        window.addEventListener 'wheel' @onWheel
        @main.addEventListener 'contextmenu' @onContextMenu
        
        s = 82/4096
        @tubeUV = [
            [ s*1 s*2 s*2 s*3 ] # right / left
            [ s*2 s*0 s*3 s*1 ] # right down / up left
            [ s*2 s*1 s*3 s*2 ] # down / up
            [ s*2 s*2 s*3 s*3 ] # down left / right up
            [ s*0 s*2 s*1 s*3 ] # down right / left up
            [ s*0 s*0 s*1 s*1 ] # up right / left down
            ]
            
        @quadUV = [ (4096-80)/4096, (4096-80)/4096, (4096-2)/4096, (4096-2)/4096 ]
        
        @circleUV = [
            [ s*3.5, s*0.5, s*4.5, s*1.5 ]
            [ s*4.5, s*0.5, s*5.5, s*1.5 ]
            [ s*4.5, s*1.5, s*5.5, s*2.5 ]
            [ s*3.5, s*1.5, s*4.5, s*2.5 ]
        ]
                
        @drag = new drag 
            target:  @g.canvas
            onStart: @onDragStart
            onMove:  @onDrag
            cursor: 'pointer'
        
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: event =>

        if event.ctrlKey
        
            @g.camScale -= event.deltaY/1000 
            @g.camScale = clamp 0.01 0.2 @g.camScale
            
        else
            
            @g.camPosX += event.deltaX/4000 
            @g.camPosY -= event.deltaY/4000 
            
        @g.camPosX = clamp -@g.side*@g.aspect/2*@g.camScale, @g.side*@g.aspect/2*@g.camScale, @g.camPosX
        @g.camPosY = clamp -@g.side/2*@g.camScale, @g.side/2*@g.camScale, @g.camPosY
        
        @g.updateCamera()
        
    # 0000000    00000000    0000000    0000000   
    # 000   000  000   000  000   000  000        
    # 000   000  0000000    000000000  000  0000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000   0000000   
    
    win2Grid: pos =>
        
        x = (((pos.x - @g.br.left) / @g.br.width - 0.5) * 2 + @g.camPosX) / (@g.camScale * @g.aspect)
        y = (((pos.y - @g.br.top) / @g.br.height - 0.5) * -2 + @g.camPosY) / @g.camScale
        
        x = Math.round x
        y = Math.round y
        
        [x,y]
    
    onDragStart: drag event =>
        
        @dragPath = [@win2Grid(drag.pos), @win2Grid(drag.pos)]
        
        log @dragPath
        
    onDrag: drag event =>
        
        l = @dragPath[-1]
        p = @dragPath[-2]
        g = @win2Grid drag.pos
        
        if l[0] == p[0] == g[0]
            l[1] = g[1]
        else if l[1] == p[1] == g[1]
            l[0] = g[0]
        else
            @dragPath.push g
            
        log @dragPath
            
    onContextMenu: (event) => stopEvent event
        
    togglePause:  => @pause = not @pause; post.emit 'pause'
    toggleValues: => 
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: ->
        
        ⮐ if @pause and not @oneStep
        
        # ● simulate
        
        delete @oneStep
        
    # 000000000  000   0000000  000   000  
    #    000     000  000       000  000   
    #    000     000  000       0000000    
    #    000     000  000       000  000   
    #    000     000   0000000  000   000  
    
    singleStep: => @oneStep = true; @pause = true; post.emit 'pause'
    
    addTube: x y idx =>

        u = @tubeUV[idx]
        @g.addQuad x+0.2, y-0.2,  1 1   [0 0 0 0.25], u, 0 0
        
        @g.addQuad x, y,  1 1   [1 1 0 1], u, 0 1
        
    roundedQuadRect: x0 y0 x1 y1 color layer=0 =>
        
        [x0, x1] = [min(x0, x1), max(x0, x1)]
        [y0, y1] = [min(y0, y1), max(y0, y1)]
        
        @g.addQuad x0, y0, 1 1  color, @circleUV[3], 0 layer
        @g.addQuad x1, y0, 1 1  color, @circleUV[2], 0 layer
        @g.addQuad x1, y1, 1 1  color, @circleUV[1], 0 layer
        @g.addQuad x0, y1, 1 1  color, @circleUV[0], 0 layer
        
        @g.addQuad (x0+x1)/2, (y0+y1)/2, (x1-x0)-1, (y1-y0)+1, color, @quadUV, 0 layer 
        @g.addQuad  x0,       (y0+y1)/2, 1,         (y1-y0)-1, color, @quadUV, 0 layer 
        @g.addQuad  x1,       (y0+y1)/2, 1,         (y1-y0)-1, color, @quadUV, 0 layer 
        
    gridQuadRect: x0 y0 x1 y1 color layer=0 w=0.02 =>
        
        [x0, x1] = [min(x0, x1), max(x0, x1)]
        [y0, y1] = [min(y0, y1), max(y0, y1)]
        
        sx = x1 - x0
        sy = y1 - y0
        
        for x in 0..sx
            @g.addQuad x, sx/2, w, sx, [0 0 0 0.15], @quadUV, 0 layer

        for y in 0..sy
            @g.addQuad sy/2, y, sy, w, [0 0 0 0.15], @quadUV, 0 layer 
        
    tick: @tickInfo ->
        
        @roundedQuadRect  0 -0.5 8.5 8 [0 0 0 0.15]
        @roundedQuadRect -0.25 -0.25 8.25 8.25 [0.15 0.15 0.15 1]
        
        @gridQuadRect 0 0 8 8 [0 0 0 0.5] 0  
        
        @addTube 0 3 0
        @addTube 1 3 3
        @addTube 1 4 2
        @addTube 1 5 5
        @addTube 2 5 0
        @addTube 3 5 1
        @addTube 3 4 2
        @addTube 3 3 3
        @addTube 2 3 5
        @addTube 2 2 4
        @addTube 3 2 0
        
        if @dragPath
            
            for pi in 1...@dragPath.length
                p = @dragPath[pi-1]
                l = @dragPath[pi]
                
                if p[0] == l[0]
                    [s, e] = [min(p[1], l[1]), max(p[1], l[1])]
                    if s < e
                        @addTube p[0], p[1], 3
                        for y in s+1...e
                            @addTube p[0], y, 2
                else
                    [s, e] = [min(p[0], l[0]), max(p[0], l[0])]
                    if s < e
                        @addTube p[0], p[1], 5
                        for x in s+1...e
                            @addTube x, p[1], 0
        
        @g.draw @tickInfo.time
        
export world
