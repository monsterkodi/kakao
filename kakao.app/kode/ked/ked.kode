###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    
###

use ◆ ttio gutter editor status screen cells state scroll konsole
use ./util ◆ logfile util
use ../kxk ▪ karg kstr slash post
use ../kxk/nfs
use child_process

function KED

    @: ->
        
        @version = '0.0.2'
        h = ''
        h += b8 "    ███   ███  ████████  ███████  \n"
        h += b7 "    ███  ███   ███       ███   ███\n"
        h += b6 "    ███████    ███████   ███   ███\n"
        h += b5 "    ███  ███   ███       ███   ███\n"
        h += b4 "    ███   ███  ████████  ███████  \n"
        h = '\n\n' + h + '\n'
        
        args = karg """
            
            ked [file]
                options                      **
                
                version    log version       = false
                
            """ preHelp:h version:@version
        
        process.on 'uncaughtException' @onException
            
        @viewSizes = konsole: [0 0]
        
        @logfile = new logfile
                    
        @t = new ttio
        
        global.lfc = args... => lf.apply null args; if global.lc? ➜ global.lc.apply null args 
                
        @screen  = new screen @t
        
        @editor  = new editor   @screen 'editor'
        @konsole = new konsole  @screen 'konsole'
        @gutter  = new gutter   @screen @editor.state
        @scroll  = new scroll   @screen @editor.state
        @status  = new status   @screen @editor.state
        
        lfc '▸                                         ked' @version
        
        @editor.on  'redraw'      @redraw
        
        post.on     'view.size'   @onViewSize
        
        @mouseHandlers = [@scroll @konsole.knob @editor]
        @wheelHandlers = [        @konsole @editor]
        @keyHandlers   = [        @konsole @editor]
        
        @t.on 'key'    @onKey
        @t.on 'mouse'  @onMouse
        @t.on 'wheel'  @onWheel
        @t.on 'resize' @redraw
        @t.on 'paste'  @onPaste
                                    
        if valid args.options
            @loadFile args.options[0]
        else
            @editor.state.syntax.ext = 'txt'
            @editor.state.loadLines ['']
            @t.setCursor 0 0
            @redraw()
        
    # 00000000   000   000  000   000  
    # 000   000  000   000  0000  000  
    # 0000000    000   000  000 0 000  
    # 000   000  000   000  000  0000  
    # 000   000   0000000   000   000  
    
    @run: -> new KED()
                
    onException: err =>

        @t?.quit()
        error err
        @logfile.close -> process.exit 1
        # process.exitCode = 1
            
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
        
    reloadFile: => @loadFile @status.file
        
    loadFile: p ○=>
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @status.file = slash.tilde  p
        else
            @status.file = slash.normalize p

        text =○ nfs.read slash.untilde(p)
        
        lines = util.linesForText text
        
        @editor.state.syntax.ext = slash.ext p
        @editor.state.loadLines lines
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
        @redraw()
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    saveFile: ○=>
        
        text = @editor.state.s.lines.asMutable().join '\n'
        
        if valid @status.file
            ○ nfs.write slash.untilde(@status.file) text
            @reloadFile()
            
    saveAs: => lfc 'saveAs'
    
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    onPaste: text => 
    
        @editor.state.insert text
        @redraw()
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: type sx sy event =>
        
        if type == 'wheel'
            
            for handler in @wheelHandlers
                handler.onWheel sx sy event.dir event.mods
        
        else
        
            for handler in @mouseHandlers
                if handler.onMouse type sx sy event
                    break
                
        @redraw()
                
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        # lc 'key' key
        
        switch key
            
            'alt+q' 'ctrl+q'             ➜ @t.quit(); process.exit(0)
            'alt+r' 'ctrl+r' 'cmd+r'     ➜ ⮐ @reloadFile()
            'ctrl+s' 'cmd+s'             ➜ ⮐ @saveFile()
            'shift+cmd+s' 'shift+ctrl+s' ➜ ⮐ @saveAs()
            
        for handler in @keyHandlers
            break if handler.onKey key event
                
        @redraw()
                                
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    onViewSize: name x y => @viewSizes[name] = [x y]
    
    redraw: =>
        
        start = process.hrtime()
        
        w = @t.cols()
        h = @t.rows()
        
        s = 1
        k = @viewSizes.konsole[1]
        g = @editor.state.gutterWidth()
        @status.gutter = g
        
        if false # scrollbar on right side
            @scroll.cells.init w-s 0     s     h-k-1
            @gutter.cells.init 0   0     g     h-k-1
            @status.cells.init 0   h-1   w     1
            @editor.init       g   0     w-g-s h-k-1
            @konsole.init      0   h-k-1 w-g-s k
        else
            @scroll.cells.init 0   0     s     h-k-1 
            @gutter.cells.init s   0     g     h-k-1
            @status.cells.init 0   h-1   w     1
            @editor.init       g+s 0     w-g-s h-k-1    
            @konsole.init      0   h-k-1 w-g-s k
                        
        @screen.init()
        @gutter.draw()
        @scroll.draw()
        @status.draw()
        @editor.draw()
        @konsole.draw()
        @screen.render()
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))

export KED.run

◆main
    log '◆main'
    KED.run()

