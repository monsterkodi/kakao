###
000   000   0000000   00000000   000      0000000  
000 0 000  000   000  000   000  000      000   000
000000000  000   000  0000000    000      000   000
000   000  000   000  000   000  000      000   000
00     00   0000000   000   000  0000000  0000000  
###

use ../kxk ▪ $ drag stopEvent prefs post fade randRange randInt randIntRange

use ◆ gee tweaky tube

{cos, sin, PI} = Math
TAU = 2*PI

COL_SHADOW  = [0 0 0 0.1]
COL_BG      = [0.15 0.15 0.15 1]
COL_GRID    = [0 0 0 0.5]
COL_TUBE    = [0.5 0.5 0.5 1]
COL_PLANT   = [0 0.5 0 1]
COL_LEAF    = [0 0.5 0 1]
COL_EGG     = [1 1 1 1]
COL_CRITTER = [1 0.5 0 1]
COL_STARVE  = [0.25 0.25 0.25 1]
COL_EGG_DOT = [0 0 0 0.5]

CRIT_MOVE_TIME = 4.0
CRIT_DIE_TIME  = 2.3
EGG_FADE_TIME  = 6.0

threshMold  = p n m -> parseInt(p/m) != parseInt(n/m)

function world

    @: -> 
        
        @main =$ 'main'
        @pause = false
        @speed = 1
        
        @ws = 30
        
        @main.focus()
        
        @plants   = []
        @tubes    = []
        @eggs     = []
        @critters = []
        
        @numLeaves      = 6
        @critterMaxAge  = 1024*1024
        @critterEggTime = 137
        @eggMaxAge      = 27
        @leafMaxAge     = 17
        
        @critterEatTime    = 9
        @critterStarveTime = 13
        
        # @leavesForFood = []
        
        @addEgg @ws/2 @ws/2
        
        @g = new gee @main
        
        @g.camScale = 0.08
        @g.camPosX  = 1 / @g.camScale
        @g.camPosY  = 1 / @g.camScale
        
        @main.addEventListener 'mousemove' @onMouseMove
        
        @g.updateCamera()
        
        @tweaky = new tweaky @main
         
        @tweaky.init 
            speed:      min: 1    max:100    step:1      value:@speed,     cb: (@speed) =>
            
        window.addEventListener 'wheel'       @onWheel
        @main.addEventListener  'contextmenu' @onContextMenu
        
        s = 82/4096
        @tubeUV = [
            [ s*1 s*2 s*2 s*3 ] # right / left
            [ s*2 s*0 s*3 s*1 ] # right down / up left
            [ s*2 s*1 s*3 s*2 ] # down / up
            [ s*2 s*2 s*3 s*3 ] # down left / right up
            [ s*0 s*2 s*1 s*3 ] # down right / left up
            [ s*0 s*0 s*1 s*1 ] # up right / left down
            ]
            
        @quadUV   = [ (4096-80)/4096, (4096-80)/4096, (4096-2)/4096, (4096-2)/4096 ]
        @circleUV = [ s*3.5, s*0.5, s*5.5, s*2.5 ]
        @circleTopUV = [ s*3.5, s*0.5, s*5.5, s*1.5 ]
        @pieUV = [
            [ s*3.5, s*0.5, s*4.5, s*1.5 ]
            [ s*4.5, s*0.5, s*5.5, s*1.5 ]
            [ s*4.5, s*1.5, s*5.5, s*2.5 ]
            [ s*3.5, s*1.5, s*4.5, s*2.5 ]
        ]
        
        @critterUV = [ (4096-80)/4096, (4096-80)/4096, (4096-2)/4096, (4096-2)/4096 ]
        @eggUV     = @circleUV
                
        @drag = new drag 
            target:  @g.canvas
            onStart: @onDragStart
            onMove:  @onDragMove
            onStop:  @onDragStop
            cursor: 'pointer'
        
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: event =>

        if event.ctrlKey or event.metaKey
            
            # log '●'  @g.camPosX, @g.camPosY
            
            @g.camScale -= event.deltaY/(event.metaKey ? 40000 : 4000)
            @g.camScale = clamp 0.01 0.2 @g.camScale
            
        else
            
            @g.camPosX += event.deltaX / (4000 * @g.camScale) 
            @g.camPosY -= event.deltaY / (4000 * @g.camScale) 
            
        @g.camPosX = clamp 0, @ws, @g.camPosX
        @g.camPosY = clamp 0, @ws, @g.camPosY
        
        @g.updateCamera()
        
        # log '◂' @g.camPosX, @g.camPosY
        
    eventPos: event => x:event.clientX - @g.br.left, y:event.clientY - @g.br.top
        
    onMouseMove: event =>
        
        winPos = @eventPos event
        
        @mouse = 
            grid: @win2Grid winPos
            pos:  @win2Pos winPos
            win:  winPos
        
        # log @mouse
        
    # 0000000    00000000    0000000    0000000   
    # 000   000  000   000  000   000  000        
    # 000   000  0000000    000000000  000  0000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000   0000000   
    
    win2Pos: winPos =>
        
        x = (((winPos.x - @g.br.left) / @g.br.width - 0.5) *  2 ) / (@g.camScale * @g.aspect) + @g.camPosX
        y = (((winPos.y - @g.br.top) / @g.br.height - 0.5) * -2 ) /  @g.camScale + @g.camPosY
        
        [x,y]
    
    win2Grid: winPos =>
        
        [x, y] = @win2Pos winPos
        
        x = clamp 0 @ws-1, Math.round x
        y = clamp 0 @ws-1, Math.round y
        
        [x,y]
        
    mouseInWorld: => @isInWorld @mouse.pos
        
    isInWorld: p => p[0] >= 0 and p[1] >= 0 and p[0] < @ws and p[1] < @ws
    isEmpty:   p =>
        
        for o in @critters ➜ ⮐ false if o.x == p[0] and o.y == p[1] 
        for o in @eggs     ➜ ⮐ false if o.x == p[0] and o.y == p[1] 
        for o in @plants   ➜ ⮐ false if o.x == p[0] and o.y == p[1] 
        true
        
    buildingAtPos: p =>
        
        for o in @plants   ➜ ⮐ true if o.x == p[0] and o.y == p[1] 
        false
        
    emptyNeighbor: o =>
        
        en = []
        
        for x in -1..1
            for y in -1..1
                continue if x == y == 0
                c = [o.x+x, o.y+y]
                continue if not @isInWorld c
                if @isEmpty c
                    en.push x:c[0], y:c[1]
                    
        if en.length
            ⮐ en[randInt(en.length)]
        null
    
    validNeighbors: o =>
        
        vn = []
        for x in -1..1
            for y in -1..1
                continue if x == y == 0
                c = [o.x+x, o.y+y]
                if @isInWorld c
                    vn.push c
        vn
        
    neighbors: o =>
        
        n = [] 
        for x in -1..1
            for y in -1..1
                continue if x == y == 0
                n.push [o.x+x, o.y+y]
        n
        
    plantAt: p =>
        
        for pl in @plants
            if pl.x == p[0] and pl.y == p[1]
                ⮐ pl
        null
        
    leafToEatAt: p =>
        
        if pl = @plantAt p
            for l in pl.leaves
                if l.age > @leafMaxAge
                    ⮐ l
        null
                        
    neighborLeaf: o =>
        
        nl = []
        for vn in @neighbors o
            if l = @leafToEatAt vn
                nl.push l
                    
        if nl.length
            ⮐ nl[randInt(nl.length)]
        null
        
    randomOffset: c =>
        
        o = [[-1 1], [0, 1], [1, 1], [-1 0], [1 0], [-1 -1], [0, -1], [1, -1]][randInt 8]
        [c.x+o[0], c.y+o[1]]

    randomOffsetCross: c =>
        
        o = [[0, 1], [-1 0], [1 0], [0, -1]][randInt 4]
        [c.x+o[0], c.y+o[1]]
        
    onDragStart: drag event =>
        
        ⮐ if not @mouseInWorld()
        
        if 1
            p = @win2Grid drag.pos
            ⮐ if @buildingAtPos p
            @addPlant p[0], p[1]
        else
            @dragPath = [@win2Grid(drag.pos), @win2Grid(drag.pos)]
        
    onDragMove: drag event =>
        
        if 1
            p = @win2Grid drag.pos
            ⮐ if @buildingAtPos p
            @addPlant p[0], p[1]
        
        ⮐ if not @dragPath
        
        l = @dragPath[-1]
        p = @dragPath[-2]
        g = @win2Grid drag.pos
        
        if g[0] == l[0] == p[0] and g[1] == l[1] == p[1] and @dragPath.length > 2
            @dragPath.pop()
        else if l[0] == p[0] == g[0]
            l[1] = g[1]
        else if l[1] == p[1] == g[1]
            l[0] = g[0]
        else
            @dragPath.push g
            if l[0] != g[0] and l[1] != g[1]
                if l[0] == p[0]
                    l[1] = g[1]
                else
                    l[0] = g[0]
                    
    onDragStop: drag event =>
        
        if @dragPath
            tube.path @dragPath, @addTube
            delete @dragPath
            
    onContextMenu: (event) => stopEvent event
        
    togglePause:  => @pause = not @pause; post.emit 'pause'
    toggleValues: => 
        
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: tickInfo ->
        
        ⮐ if @pause and not @oneStep
        ⮐ if isNaN tickInfo.delta
        
        # ● simulate
                
        sec = @speed * tickInfo.delta / 1000
        
        # log sec, @eggs
        
        for e in @eggs
            
            e.age += sec
            
            if e.age > @eggMaxAge and e.age-sec <= @eggMaxAge
                @addCritter e.x, e.y
                
            if e.age > @eggMaxAge+EGG_FADE_TIME
                @eggs.splice @eggs.indexOf(e), 1
                
        for c in @critters
            
            c.age += sec
            c.eat -= sec
                        
            if c.age > @critterMaxAge or c.eat < -@critterStarveTime
                c.df ?= 0
                c.df += sec / CRIT_DIE_TIME
                if c.df > 1
                    @critters.splice @critters.indexOf(c), 1
                continue
                
            if c.eat < 0
                if l = @neighborLeaf c
                    c.eat = @critterEatTime
                    l.age = 0
                continue
            
            if Math.floor(c.age / @critterEggTime) > c.eggs
                if n = @emptyNeighbor c
                    @addEgg n.x, n.y
                    c.eggs++

            if c.sf > 0
                c.sf -= sec/CRIT_MOVE_TIME
                c.sf  = max 0 c.sf
                c.tx = fade c.x, c.sx, c.sf
                c.ty = fade c.y, c.sy, c.sf
                continue
                          
            if randInt(3) == 0 or c.age < 1
                c.sx = c.x
                c.sy = c.y
                c.sf = 0.5
                continue
                
            n = @randomOffsetCross c
            if @isInWorld(n) and @isEmpty n
                c.sx = c.x
                c.sy = c.y
                c.sf = 1
                c.x = n[0]
                c.y = n[1]
                
        for p in @plants
                        
            for l in p.leaves
                
                l.age += sec
                
                # if l.age > @leafMaxAge and l.age-sec <= @leafMaxAge
#                     
                    # @leavesForFood.push l
                    
    singleStep: => @oneStep = true; @pause = true; post.emit 'pause'
    
    #  0000000   0000000    0000000      
    # 000   000  000   000  000   000    
    # 000000000  000   000  000   000    
    # 000   000  000   000  000   000    
    # 000   000  0000000    0000000      
    
    addEgg: x y => @eggs.push x:x, y:y, age:0
    
    addCritter: x y => @critters.push x:x, y:y, age:0, sx:0, sy:0, sf:0, eggs:0, eat:@critterEatTime
    
    addTube: x y idx =>
        
        @tubes.push [x, y, idx]
        
    addPlant: x y =>
        
        leaves = []
        for l in 0...@numLeaves
            leaves.push age:-l*@leafMaxAge/@numLeaves
        
        @plants.push x:x, y:y, leaves:leaves
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    drawPlant: p =>
        
        s = 0.25
        @g.addQuad p.x, p.y, s, s, COL_PLANT, @circleUV, 0 0
        
        s = 0.15
        r = 0.4
        for li in 0...p.leaves.length
            l = p.leaves[li]
            af = l.age/@leafMaxAge
            ls = s*clamp 0 1 af
            col = [((af>1) ? 1 : 0), ((af>1) ? 1 : COL_LEAF[1]), COL_LEAF[2], COL_LEAF[3]]
            @g.addQuad p.x+cos(-li*TAU/@numLeaves+PI)*r, p.y+sin(-li*TAU/@numLeaves+PI)*r, ls, ls, col, @circleUV, 0 1
    
    drawTube: x y idx =>

        @g.addQuad x+0.2, y-0.2,  1 1   COL_SHADOW, @tubeUV[idx], 0 0
        @g.addQuad x,     y,      1 1   COL_TUBE,   @tubeUV[idx], 0 1
        
    drawEgg: e =>
        
        ageFac = e.age / @eggMaxAge
        s = fade 0.02 0.3 ageFac
        a = 1
        if e.age > @eggMaxAge
            a = fade 1.0 0.0 (e.age-@eggMaxAge)/EGG_FADE_TIME
        @g.addQuad e.x, e.y, s, s, [COL_EGG[0], COL_EGG[1], COL_EGG[2], a], @eggUV, 0 1

    drawCritter: c =>
        
        sx = sy = fade 0.2 1 c.age / @critterMaxAge
        
        col = COL_CRITTER
        
        if c.df
            sx *= 1 - c.df
            sy *= 1 - c.df
            col = COL_STARVE
            
        else if c.eat < 0
            h = clamp 0 1 -c.eat / @critterStarveTime
            col = [
                fade(COL_CRITTER[0], COL_STARVE[0], h), 
                fade(COL_CRITTER[1], COL_STARVE[1], h),
                fade(COL_CRITTER[2], COL_STARVE[2], h), 1
                ]
        
        if c.sf > 0
            cx = c.tx
            cy = c.ty
        else
            cx = c.x
            cy = c.y
            
        @g.addQuad cx, cy+0.25*sy, sx, sy*(1/2), col, @circleTopUV, 0 1
        
        @g.addQuad cx-(1/4)*sx,  cy-0.0*sy, 0.5*sx, 0.5*sy, col, @circleUV, 0 1    
        @g.addQuad cx+(1/12)*sx, cy-0.0*sy, (1/6)*sx, (1/6)*sy, col, @circleUV, 0 1    
        @g.addQuad cx+(3/12)*sx, cy-0.0*sy, (1/6)*sx, (1/6)*sy, col, @circleUV, 0 1    
        @g.addQuad cx+(5/12)*sx, cy-0.0*sy, (1/6)*sx, (1/6)*sy, col, @circleUV, 0 1    
            
        thrd = 1/3
        se = 0.6
        for e in 0...c.eggs
            @g.addQuad cx+[-thrd, 0, thrd][e]*se*sx, cy+[0.15, 0.25, 0.15][e]*sx, [1, 1.25, 1][e]*thrd*sx*se, [1, 1.25, 1][e]*thrd*se*sy, COL_EGG_DOT, @circleUV, 0 1    
        
    roundedQuadRect: x0 y0 x1 y1 color layer=0 =>
        
        [x0, x1] = [min(x0, x1), max(x0, x1)]
        [y0, y1] = [min(y0, y1), max(y0, y1)]
        
        @g.addQuad x0, y0, 1 1  color, @pieUV[3], 0 layer
        @g.addQuad x1, y0, 1 1  color, @pieUV[2], 0 layer
        @g.addQuad x1, y1, 1 1  color, @pieUV[1], 0 layer
        @g.addQuad x0, y1, 1 1  color, @pieUV[0], 0 layer
        
        @g.addQuad (x0+x1)/2, (y0+y1)/2, (x1-x0)-1, (y1-y0)+1, color, @quadUV, 0 layer 
        @g.addQuad  x0,       (y0+y1)/2, 1,         (y1-y0)-1, color, @quadUV, 0 layer 
        @g.addQuad  x1,       (y0+y1)/2, 1,         (y1-y0)-1, color, @quadUV, 0 layer 
        
    gridQuadRect: x0 y0 x1 y1 color layer=0 w=0.02 =>
        
        [x0, x1] = [min(x0, x1), max(x0, x1)]
        [y0, y1] = [min(y0, y1), max(y0, y1)]
        
        sx = x1 - x0
        sy = y1 - y0
        
        for x in 0..sx
            @g.addQuad x, sx/2, w, sx, [0 0 0 0.15], @quadUV, 0 layer

        for y in 0..sy
            @g.addQuad sy/2, y, sy, w, [0 0 0 0.15], @quadUV, 0 layer 
        
    # 000000000  000   0000000  000   000  
    #    000     000  000       000  000   
    #    000     000  000       0000000    
    #    000     000  000       000  000   
    #    000     000   0000000  000   000  
    
    tick: @tickInfo ->
        
        @simulate @tickInfo
        
        @roundedQuadRect  0    -0.5  @ws-0.5  @ws-1,   COL_SHADOW
        @roundedQuadRect -0.25 -0.25 @ws-0.75 @ws-0.75 COL_BG
        @gridQuadRect     0     0    @ws-1,   @ws-1,   COL_GRID
                
        if @dragPath ➜ tube.path @dragPath, @drawTube
            
        for t in @tubes    ➜ @drawTube t[0], t[1], t[2]
        for p in @plants   ➜ @drawPlant p
        for c in @critters ➜ @drawCritter c
        for e in @eggs     ➜ @drawEgg e
                    
        @g.draw @tickInfo.time
        
        delete @oneStep
        
export world
