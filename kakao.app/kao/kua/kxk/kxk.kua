
# ███   ███  ███   ███  ███   ███
# ███  ███    ███ ███   ███  ███ 
# ███████      █████    ███████  
# ███  ███    ███ ███   ███  ███ 
# ███   ███  ███   ███  ███   ███

_G.iter = from to step=1 ->

    if step != 0
        step = math.abs step
        if from > to ➜ step = -step
        i = from - step
        ⮐  ->
            i = i + step
            if i >= to and step < 0 or i <= to and step > 0
                ⮐  i
    -> nil
    
_G.empty = v ->

    switch type(v)
    
        "table"  ➜ 
            ⮐  false if v.len >= 1
            ⮐  false if type(v["len"]) == "function" and v∙len() >= 1
            ⮐  v.len <= 0 and not dict.isdict(v)
        "string" ➜ ⮐  v == ""
        "nil"    ➜ ⮐  true
        
    false
    
_G.valid = v -> not empty v
    
_G.max      = math.max
_G.min      = math.min
_G.int      = math.floor
_G.floor    = math.floor
_G.round    = math.round
_G.ceil     = math.ceil
_G.sqrt     = math.sqrt
_G.Infinity = math.huge
_G.clamp    = l h v -> min(max(l v) h)
_G.round    = x -> x >= 0 and floor(x + 0.5) or ceil(x - 0.5)

_G.slice = a first last ->

    switch type(a)
    
        "string" ➜ ⮐  string.sub a first last
        "table"
            if last == nil ➜ last = a.len
            s = {}
            for i in first..last
                s[s.len+1] = a[i]
            ⮐  s
        
_G.sleep = s ->

    t = os.clock()
    while os.clock() - t <= s ➜ _ = 1
    
_G.is = v c ->

    vt = type(v)
    ct = type(c)
    if v and vt == "table" 
        ⮐  false if ct == "table" and c.static and c != v.class
        ⮐  false if vt == ct and v.class != c.class and v.class != c
        ⮐  true if type(v.is) == "function" and v∙is(c)
    ⮐  true if vt == ct
    ⮐  true if vt == c and ct == "string"
    false

_G.write = ... ->

    s = ""
    for _ v in ipairs {...}
        s &= $v
    s &= "\27[0m\n"
    ffi.C.write 1 s s.len
    # log s
    
timers = {}
    
_G.profileStart = msg ->
    if not timers[msg]
        timers[msg] = os.clock()
    else
        log "[WARNING] Duplicate profileStart for '#{msg}'"

_G.profileStop = msg ->
    
    if not timers[msg]
        log "[ERROR] profileStop for unknown label '#{msg}'"
        ⮐  

    tick = os.clock()
                
    write ◌b msg " " ◌m tick-timers[msg]
    timers[msg] = nil

_G.class     = require "kxk.class"
_G.inspect   = require "kxk.inspect"
_G.immutable = require "kxk.immutable"
_G.slash     = require "kxk.slash"
_G.array     = require "kxk.array"
_G.dict      = require "kxk.dict"
_G.kstr      = require "kxk.kstr"
_G.kseg      = require "kxk.kseg"
_G.strg      = require "kxk.strg"
_G.test      = require "kxk.test"
_G.events    = require "kxk.events"
_G.util      = require "kxk.util"
_G.noon      = require "kxk.noon"

⮐  {}
