###
    0000000    00000000  000      000000000  
    000   000  000       000         000     
    0000000    0000000   000         000     
    000   000  000       000         000     
    0000000    00000000  0000000     000     
###

use ../../../kxk ▪ kstr kseg
use ◆ text edit salt

function belt

    @sum: arrays -> 
        
        sum = []
        for n in 0...arrays[0].length ➜ sum.push 0
        for array in arrays
            for n,i in array
                sum[i] += n
        sum

    #  0000000  00000000  000      000       0000000  
    # 000       000       000      000      000       
    # 000       0000000   000      000      0000000   
    # 000       000       000      000           000  
    #  0000000  00000000  0000000  0000000  0000000   
    
    @cells: cols rows ->
    
        lines = []
        for l in 0...rows
            cells = []
            for c in 0...cols
                cells.push bg:[] fg:[] char:' '
            lines.push cells
        lines

    @cellsForLines: lines ->
        
        width = @widthOfLines lines
        cells = @cells width lines.length
        
        @stampLines cells lines

        cells
        
    @cellSize: cells -> [cells[0].length cells.length]
        
    @stampLines: cells lines x=0 y=0 ->
    
        ⮐ if empty lines
    
        [x y] = @pos x y
        
        for line,li in lines
            for char,ci in line
                cells[li][ci].char = char

    @wrapCellRect: cells x1 y1 x2 y2 ->

        [cols rows] = @cellSize cells
        
        x1 = cols + x1 if x1 < 0
        x2 = cols + x2 if x2 < 0

        y1 = rows + y1 if y1 < 0
        y2 = rows + y2 if y2 < 0
        
        [x1 y1 x2 y2]
        
    @clampCellRect: cells x1 y1 x2 y2 ->
        
        [cols rows] = @cellSize cells
        
        x1 = clamp 0 cols-1 x1
        x2 = clamp 0 cols-1 x2
        
        y1 = clamp 0 rows-1 y1
        y2 = clamp 0 rows-1 y2
        
        [x1 y1 x2 y2]

    @cellsWithChar: cells char ->
        
        res = []
        for row,y in cells
            for cell,x in row
                if cell.char == char
                    res.push pos:[x y] cell:cells[y][x]
        res
        
    @cellsInRect: cells x1 y1 x2 y2 ->
        
        # [x1 y1 x2 y2] = @wrapCellRect cells x1 y1 x2 y2
        [x1 y1 x2 y2] = @clampCellRect cells x1 y1 x2 y2
        
        res = []
        for y in y1..y2
            for x in x1..x2
                res.push pos:[x y] cell:cells[y][x]
        res
        
    @cellNeighborsAtPos: cells x y xd=1 yd=1->
        
        [x1 y1 x2 y2] = @clampCellRect cells x-xd y-yd x+xd y+yd
        
        @cellsInRect cells x1 y1 x2 y2
        
    # 00000000    0000000    0000000
    # 000   000  000   000  000     
    # 00000000   000   000  0000000 
    # 000        000   000       000
    # 000         0000000   0000000 

    @pos: x y -> (x is arr and empty y) ? x : [x y]
    
    @samePos: a b -> a[0] == b[0] and a[1] == b[1]
    
    @normalizePositions: posl maxY ->
        
        ⮐ [] if empty posl 
        
        posl = posl.map (a) -> [max(0 a[0]) clamp(0 maxY a[1])]
        posl = @sortPositions posl
        posl = @removeDuplicatePositions posl
        
    @sortPositions: posl -> posl.sort (a b) -> a[1] == b[1] ? a[0] - b[0] : a[1] - b[1]
        
    @removeDuplicatePositions: posl ->
        
        ⮐ posl if posl.length <= 1
        
        for i in posl.length-1..1
            if @samePos posl[i] posl[i-1]
                posl.splice i 1
        posl
        
    @indexOfPosInPositions: pos posl ->
        
        ⮐ -1 if empty posl
        posl.findIndex (p) -> pos eql p
        
    @lineIndicesForPositions: posl ->
        
        set = new Set()
        for pos in posl
            set.add pos[1]
        Array.from set
        
    @positionInDirection: pos dir ->
        
        [x y] = pos
        
        switch dir
            'up'    ➜ [x y-1]
            'down'  ➜ [x y+1]
            'left'  ➜ [x-1 y]
            'right' ➜ [x+1 y]
            
    @movePositionsInDirection: posl dir ->
        
        posl.map (p) => @positionInDirection(p dir)
            
    @traversePositionsInDirection: posl pos dir ->

        while next = @neighborPositionInDirection posl pos dir
            pos = next
        pos
        
    @neighborPositionInDirection: posl pos dir ->
        
        nbp = @positionInDirection pos dir
        if @positionsContain posl nbp
            posl[@indexOfPosInPositions nbp posl]

    @positionsContain: posl pos ->
        
        for p in posl
            ⮐ true if p eql pos
        false
        
    @positionsOutsideRange: posl rng ->
        
        posl.filter (p) => @isPosOutsideRange(p rng)
        
    @deltaOfPosToRect: p r ->
        
        dx = if
            p[0] < r[0] ➜ r[0]-p[0]
            p[0] > r[2] ➜ p[0]-r[2]
                        ➜ max r[0]-p[0] p[0]-r[2]
        dy = if
            p[1] < r[1] ➜ r[1]-p[1]
            p[1] > r[3] ➜ p[1]-r[3]
                        ➜ max r[1]-p[1] p[1]-r[3]
            
        [dx dy]
    
    @columnPositionsMap: posl ->
    
        map = {}
        for p in posl
            map[p[0]] ?= []
            map[p[0]].push p
        map
        
    @neighborPositionGroups: posl ->
        
        groups = []
        for p in posl
            if groups[-1]?[-1][1] == p[1]-1
               groups[-1].push p
            else
                groups.push [p]
        groups
        
    @positionColumns: posl ->
    
        columns = []
        for key,pl of @columnPositionsMap posl
            columns = columns.concat @neighborPositionGroups(pl)
        columns
                
    # 00000000    0000000   000   000   0000000   00000000  
    # 000   000  000   000  0000  000  000        000       
    # 0000000    000000000  000 0 000  000  0000  0000000   
    # 000   000  000   000  000  0000  000   000  000       
    # 000   000  000   000  000   000   0000000   00000000  
    
    @isPosInsideRange: pos rng ->
        
        ⮐ false if @isPosBeforeRange pos rng 
        ⮐ false if @isPosAfterRange  pos rng 
        true
        
    @isPosOutsideRange: pos rng -> not @isPosInsideRange pos rng

    @isPosBeforeRange: pos rng ->
    
        pos[1] < rng[1] or (pos[1] == rng[1] and pos[0] < rng[0])
    
    @isPosAfterRange: pos rng ->
    
        # pos[1] > rng[3] or (pos[1] == rng[3] and pos[0] >= rng[2])
        pos[1] > rng[3] or (pos[1] == rng[3] and pos[0] > rng[2])
        
    @isPosTouchingRange: pos rng ->
        
        ⮐ true if @isPosInsideRange pos rng
        ⮐ true if pos eql @endOfRange rng
        ⮐ true if pos eql @startOfRange rng
        false

    @rangeContainsPos:   rng pos -> @isPosInsideRange pos rng
    @rangeContainsRange: rng ins -> @isPosInsideRange(@startOfRange(ins) rng) and @isPosInsideRange(@endOfRange(ins) rng)
    @rangeTouchesPos:    rng pos -> @isPosTouchingRange pos rng
        
    @rangeForPos: pos -> [pos[0] pos[1] pos[0] pos[1]]
    @rangeForSpan: span -> [span[0] span[1] span[2] span[1]]
    @rangeFromStartToEnd: start end -> [start[0] start[1] end[0] end[1]]
    
    @isEmptyRange: rng -> rng[0] == rng[2] and rng[1] == rng[3]
    @isRangeEmpty: rng -> rng[0] == rng[2] and rng[1] == rng[3]

    @startOfRange: rng -> [rng[0] rng[1]]
    @endOfRange:   rng -> [rng[2] rng[3]]
    
    @rangeGrownBy:     rng  delta -> [rng[0]-delta rng[1] rng[2]+delta rng[3]]
    @rangeShrunkenBy:  rng  delta -> [rng[0]+delta rng[1] rng[2]-delta rng[3]]
    @rangesShrunkenBy: rngs delta -> rngs.filter((r) -> r[2]-r[0]>=2*delta).map((r) => @rangeShrunkenBy(r delta))
    @rangesGrownBy:    rngs delta -> rngs.map((r) => @rangeGrownBy(r delta))
        
    #  0000000  00000000    0000000   000   000  
    # 000       000   000  000   000  0000  000  
    # 0000000   00000000   000000000  000 0 000  
    #      000  000        000   000  000  0000  
    # 0000000   000        000   000  000   000  
 
    @isSameSpan:  a b -> a eql b
    @isSameRange: a b -> a eql b
    
    @isPosInsideSpan: pos span ->

        ⮐ false if @isPosBeforeSpan pos span
        ⮐ false if @isPosAfterSpan pos span
        true
        
    @isPosBeforeSpan: pos span ->
        
        pos[1] < span[1] or (pos[1] == span[1] and pos[0] < span[0])

    @isPosAfterSpan: pos span ->
        
        pos[1] > span[1] or (pos[1] == span[1] and pos[0] >= span[2])
        
    @isPosBeforeOrInsideSpan: pos span ->
        
        @isPosBeforeSpan(pos span) or @isPosInsideSpan(pos span)

    @startOfSpan: s -> [s[0] s[1]]
    @endOfSpan:   s -> [s[2] s[1]]
    
    @nextSpanAfterPos: spans pos ->
        
        ⮐ if empty spans
        
        pos = [0 0] if @isPosAfterSpan pos spans[-1]
        
        ⮐ spans[0] if @isPosBeforeSpan pos spans[0]
            
        for span,index in spans
            if @isPosAfterSpan pos span
                if index+1 < spans.length and @isPosBeforeOrInsideSpan pos spans[index+1]
                    ⮐ spans[index+1]

    @prevSpanBeforePos: spans pos ->
        
        ⮐ if empty spans
        ⮐ spans[-1] if @isPosBeforeSpan pos spans[0]
        ⮐ spans[-1] if @isPosInsideSpan pos spans[0]
            
        for index in spans.length-1..0
            span = spans[index]
            if @isPosAfterSpan pos span
                ⮐ span
                    
    @normalizeSpans: spans ->
        
        ⮐ [] if empty spans
        
        spans = spans.map (a) -> if a[0] > a[2] ➜ [a[2] a[1] a[0]] else a
        spans.sort (a b) -> if a[1] == b[1] ➜ a[0] - b[0] else a[1] - b[1]
        spans = spans.filter (a) -> a[0] != a[2]
        
    # 00000000    0000000   000   000   0000000   00000000   0000000  
    # 000   000  000   000  0000  000  000        000       000       
    # 0000000    000000000  000 0 000  000  0000  0000000   0000000   
    # 000   000  000   000  000  0000  000   000  000            000  
    # 000   000  000   000  000   000   0000000   00000000  0000000   
    
    @rangesContainLine: rngs lineIndex -> 
        
        for rng in rngs
            ⮐ true if rng[1] <= lineIndex <= rng[3]
        false
        
    @rangesContainSpan: rngs span -> @rangesContainRange rngs @rangeForSpan(span)
    @rangesContainRange: rngs range -> 
        
        for rng in rngs
            ⮐ true if rng eql range
        false
                
    @normalizeRanges: rngs ->
        
        ⮐ [] if empty rngs or not rngs is arr
        
        rngs = rngs.map (a) -> if a[1] > a[3] ➜ [a[2] a[3] a[0] a[1]] else a
        rngs = rngs.map (a) -> if a[1] == a[3] and a[0] > a[2] ➜ [a[2] a[1] a[0] a[3]] else a
        rngs.sort (a b) -> if a[1] == b[1] ➜ a[0] - b[0] else a[1] - b[1]
        rngs.filter (a) -> a[1] != a[3] or a[0] != a[2] 
        
    @startPositionsOfRanges: rngs -> rngs.map (r) => @startOfRange r
    @endPositionsOfRanges:   rngs -> rngs.map (r) => @endOfRange r
        
    @removeTrailingEmptyRange: rngs ->
        
        if @isEmptyRange rngs[-1]
            rngs[0..-2]
        else
            rngs

    ###
    returns a list of ranges for lines split by positions.
    the range up to the first position is included, as well as the
    one from the last position up to the end of text.
    ###        
    @rangesForLinesSplitAtPositions: lines posl ->
        
        ⮐ [] if empty posl
        ⮐ [[0 0 kseg.width(lines[-1]) lines.length-1] [kseg.width(lines[-1]) lines.length-1 kseg.width(lines[-1]) lines.length-1]] if posl[0][1] >= lines.length
        rngs = [[0 0 posl[0][0] posl[0][1]]]
        for pos,idx in posl
            rngs.push [posl[idx-1][0] posl[idx-1][1] pos[0] pos[1]] if idx > 0
        rngs.push [pos[0] pos[1] kseg.width(lines[-1]) lines.length-1]
        rngs

    @rangeInRangesContainingPos: rngs pos ->
        
        for rng in rngs
            if @rangeContainsPos rng pos
                ⮐ rng

    @rangeInRangesTouchingPos: rngs pos ->
        
        for rng in rngs
            if @rangeTouchesPos rng pos
                ⮐ rng   

    # 000      000  000   000  00000000         000  000   000  0000000    000   0000000  00000000   0000000  
    # 000      000  0000  000  000              000  0000  000  000   000  000  000       000       000       
    # 000      000  000 0 000  0000000          000  000 0 000  000   000  000  000       0000000   0000000   
    # 000      000  000  0000  000              000  000  0000  000   000  000  000       000            000  
    # 0000000  000  000   000  00000000         000  000   000  0000000    000   0000000  00000000  0000000   
    
    @lineIndicesForRangesOrPositions: rngs posl ->

        indices = @lineIndicesForRanges rngs
        indices = @lineIndicesForPositions posl if empty indices
        indices

    @lineIndicesForRangesAndPositions: rngs posl ->

        indices = kxk.util.uniq @lineIndicesForRanges(rngs).concat(@lineIndicesForPositions(posl))
        indices.sort()
        indices
        
    @lineIndicesForSpans: spans ->
        
        kxk.util.uniq spans.map((s) -> s[1])
        
    @lineIndicesForRange: rng ->
        
        indices = []
        
        for li in rng[1]..rng[3]
            if li != rng[3] or rng[2] > 0
                indices.push li
        
        indices
        
    @lineIndicesForRanges: rngs ->
        
        indices = []
        
        for rng in rngs
            indices = indices.concat @lineIndicesForRange(rng)
            
        indices
        
    # 0000000    000       0000000    0000000  000   000  
    # 000   000  000      000   000  000       000  000   
    # 0000000    000      000   000  000       0000000    
    # 000   000  000      000   000  000       000  000   
    # 0000000    0000000   0000000    0000000  000   000  
    
    @blockRangesForRangesAndPositions: lines rngs posl ->
        
        blocks = []
        
        indices = @lineIndicesForRangesAndPositions rngs posl
        
        ⮐ blocks if empty indices
        
        block = [0 indices[0] -1 -1]
        for index,ii in indices
            block[3] = index
            if indices[ii+1] == index+1
                continue 
            block[2] = lines[index].length 
            blocks.push block
            block = [0 indices[ii+1] -1 -1]
            
        blocks
                
    # 00     00  00000000  00000000    0000000   00000000  
    # 000   000  000       000   000  000        000       
    # 000000000  0000000   0000000    000  0000  0000000   
    # 000 0 000  000       000   000  000   000  000       
    # 000   000  00000000  000   000   0000000   00000000  
    
    @mergeLineRanges: lines rngs ->
        
        ⮐ [] if empty rngs or not rngs is arr
        
        rngs = @normalizeRanges rngs
        
        mrgd = []
        for s,i in rngs
            if empty mrgd or 
                s[1] > tail[3]+1 or 
                s[1] == tail[3] and s[0] > tail[2] or 
                s[1] == tail[3]+1 and (s[0] > 0 or tail[2] < lines[tail[3]].length)
                    mrgd.push s
                    tail = s
            else if s[3] > tail[3] or s[3] == tail[3] and s[2] > tail[2]
                tail[2] = s[2] 
                tail[3] = s[3]

        mrgd

# merge methods of text and edit into this class
        
for mod in [text edit salt]
    for key,val of mod
        belt[key] = val

export belt
