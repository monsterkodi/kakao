###
 0000000   0000000   000       0000000   00000000 
000       000   000  000      000   000  000   000
000       000   000  000      000   000  0000000  
000       000   000  000      000   000  000   000
 0000000   0000000   0000000   0000000   000   000
###

use ../kxk ▪ matchr

class Color

    @: ->
        
        cfg = 
            '(sin|cos|a?tan|exp|log|hex)': 'function'
            '0x[0-9a-f]*':  'hex'
            '=':            'equals'
            'e[-+]':        'exponent'
            '[\\.]':        'dot'
            '[\\(\\)]':     'bracket'
            '\\d+':         'digit' 
            '°':            'digit' 
            'i':            'complex'
            'NaN':          'nan'
            '[π∞ϕ]':        'constant'
            '[∡√^]':        'op0'
            '[*/]':         'op1'
            '[+-]':         'op2'
            
        cfg[symbol.euler] = 'constant'
            
        @config = matchr.config cfg
    
    colorize: text => 
        
        rngs = matchr.ranges @config, text
                
        colorized = ''
        index = 0
        for rng in rngs
            while index < rng.start
                index += 1
                colorized += "&nbsp;"
            if index > rng.start
                continue
            clss = rng.clss ? 'text'
            if clss == 'hex'
                colorized += "<span class=\"hex prefix\">0x</span>"
                colorized += "<span class=\"hex digit\">#{rng.match[2..]}</span>"
            else
                colorized += "<span class=\"#{clss}\">#{rng.match}</span>"
            index = rng.start + rng.match.length
        while index < text.length
            index += 1
            colorized += "&nbsp;"
        return colorized

export (new Color()).colorize
