# █████████  ███   ███  ███   ███  ███████
#    ███     ███  ███   ████  ███     ███ 
#    ███     ███████    ███ █ ███    ███  
#    ███     ███  ███   ███  ████   ███   
#    ███     ███   ███  ███   ███  ███████

import kxk/kxk
export kxk

enum tok*
        
    ◂name
    ◂if
    ◂when
    ◂then               = "➜"
    ◂elif
    ◂else
    ◂switch
    ◂while
    ◂for
    ◂in
    ◂notin
    ◂is
    ◂break
    ◂continue
    ◂discard
    ◂enum
    ◂class
    ◂struct
    ◂from
    ◂import
    ◂template
    ◂macro
    ◂quote
    ◂converter
    ◂type  
    ◂use
    ◂try
    ◂catch
    ◂let                
    ◂var                
    ◂not                = "!" 
    ◂and                = "&&" 
    ◂or                 = "||" 
    ◂true               = "✔"  
    ◂false              = "✘"  
    ◂null               = "nil"
    ◂func               = "->"
    ◂method             = "=>"
    ◂proc               
    ◂return             = "⮐"
    
    ◂number
    ◂string
    ◂string_start       = "'"
    ◂string_end
    ◂stripol_start      = "#" & "{"
    ◂stripol_end
    
    ◂comment_start      = "#"
    ◂comment
    ◂comment_end
    
    ◂val_type           = "◇"
    ◂var_type           = "◆"
    ◂paren_open         = "("
    ◂paren_close        = ")"       
    ◂bracket_open       = "{"
    ◂bracket_close      = "}"       
    ◂mod                = "{."
    ◂square_open        = "["       
    ◂square_close       = "]"        
    ◂comma              = ","
    ◂colon              = ":"
    ◂semicolon          = ";"
    ◂dot                = "."
    ◂doubledot          = ".."
    ◂tripledot          = "..."
    ◂minus              = "-"  
    ◂plus               = "+"  
    ◂increment          = "++" 
    ◂decrement          = "--" 
    ◂ampersand          = "&"
    ◂dollar             = "$"
    ◂qmark              = "?"
    ◂divide             = "/"
    ◂multiply           = "*"
    ◂assign             = "="
    ◂match              = "=~"
    ◂plus_assign        = "+="
    ◂minus_assign       = "-="
    ◂divide_assign      = "/="
    ◂multiply_assign    = "*="
    ◂ampersand_assign   = "&="
    ◂qmark_assign       = "?="
    ◂equal              = "=="
    ◂not_equal          = "!="
    ◂less_equal         = "<="
    ◂greater_equal      = ">="
    ◂greater            = ">"
    ◂less               = "<"
    ◂test               = "▸"
    ◂  # block
    ◂verbatim
    ◂indent
    ◂eof
        
keywords = initTable[string, tok]()
for kt in { ◂if..◂return }
    keywords[symbolName(kt)[3..^1]] = kt
keywords["nil"] = ◂null

punct = initTable[string, tok]()
for kt in { ◂if..◂test }
    if symbolName(kt) != $kt
        punct[$kt] = kt
punct["\""]     = ◂string_start
punct["\"\"\""] = ◂string_start

const 
    openToks  = { ◂paren_open  ◂bracket_open  ◂square_open  }
    closeToks = { ◂paren_close ◂bracket_close ◂square_close }
    closeOpen = { 
            ◂paren_close:   ◂paren_open
            ◂bracket_close: ◂bracket_open
            ◂square_close:  ◂square_open }.toTable()
        
# █████████  ███   ███  ███   ███  ███████  ████████ 
#    ███     ███  ███   ████  ███     ███   ███   ███
#    ███     ███████    ███ █ ███    ███    ███████  
#    ███     ███  ███   ███  ████   ███     ███   ███
#    ███     ███   ███  ███   ███  ███████  ███   ███

struct Token*

    tok  : tok
    str  : string
    line : int
    col  : int
    
    @: ◇tok tok ◇string str line=-1 col=-1 ->
        
        @tok  = tok
        @str  = str 
        @line = line
        @col  = col
        
tkn* = ◇tok tok ◇string str line=-1 col=-1 ➜ Token -> 
    t = Token()
    t.init(tok str line col)
    
tkn* =  tok=◂name           line=-1 col=-1 ➜ Token -> 
    t = Token()
    t.init(tok ""  line col)

class Tknzr

    tokens      : seq[Token]
    openStack   : seq[tok]
    token       : Token
    inStripol   : bool
    delimiter   : string
    lang        : string
    segi        : int
    segs        : seq[string]
    bol         : int # segi at start of current line
    eol         : int # segi at end of current line
    line        : int # current line index

    $: ➜string ->
    
        "◂▸ #{@line} #{@token} #{@bol} #{@segi} #{@eol} #{@segs}"
    
    char:        ➜char   -> @segs[@segi][0]
    char: ◇int n ➜char   -> @segs[@segi+n][0]
    peek: ◇int n ➜string -> @segs[@segi+n]
    incr: ◇int n         -> @segi += n
    col:         ➜int    -> @segi - @bol
    
    peekSafe: ◇int n ➜string ->
    
        if @segi >= 0 and @segi+n < @segs.len 
            @segs[@segi+n]
        else
            ""
            
    charSafe: ◇int n ➜char -> 
    
        if @segi >= 0 and @segi+n < @segs.len 
            @segs[@segi+n][0]
        else
            "\x0"[0]
            
    isConnectedLeft: n=0 ➜bool ->
    
        lt = @peekSafe(n-1)
        ct = @peekSafe(n)
        lt != "" and ct != "" and lt notin [" " "\n"]

    isConnectedRight: n=0 ➜bool ->
    
        ct = @peekSafe(n)
        rt = @peekSafe(n+1)
        rt != "" and ct != "" and rt notin [" " "\n"]
        
    isConnectedLeftAndRight: n=0 ➜bool ->
    
        @isConnectedLeft(n) and @isConnectedRight(n)
        
    nextLine: ->
    
        assert @segs[@segi] == "\n"
        @incr 1
        @line += 1
        @bol = @segi
        @eol = @bol
        
        while @eol < @segs.len and @segs[@eol] != "\n"
            @eol += 1
            
    lineIncr: ◇string c ->
    
        if c == "\n"
            @nextLine()
        else
            @incr 1
    
    srng: ◇int n ➜string ->
    
        e = if n >= 0 ➜ @segi + n ➜ @eol
        ⮐  "" if e > @segs.len
        @segs[@segi...e].join("")
        
    scmp: ◇string s ➜bool ->
    
        ss = kseg s
        for n in 0...ss.len
            ⮐  false if @segi+n >= @segs.len
            ⮐  false if @segs[@segi+n] != ss[n]
        true
        
    advance: ◇int n ->
    
        for s in 0..<n 
            @token.str &= @peek(0)
            @incr 1
    
    advance: ◇set[char] charset ->
        
        while @segi < @segs.len and @peek(0)[0] in charset
            @advance(1)
            
    advanceUntil: ◇string stop ->
    
        while @segi < @segs.len and not @scmp(stop)
            @token.str &= @peek(0)
            @incr 1
    
    advanceMulti: ◇string stop ->
    
        while @segi < @segs.len and not @scmp(stop)
            let c = this.peek(0)
            @token.str &= c
            @lineIncr c
        
    pushToken: str="" tk=◂name incr=0 ->
    
        if @token.str.len
            @tokens.add @token
        @token = tkn(tk str @line @col)
        @incr incr
        
    push: ◇tok tk ->
    
        @token.tok = tk
        @pushToken()
        
    commit: str="" tk=◂name incr=0 ->
        
    #  ███████  █████████  ████████   ███  ███   ███   ███████ 
    # ███          ███     ███   ███  ███  ████  ███  ███      
    # ███████      ███     ███████    ███  ███ █ ███  ███  ████
    #      ███     ███     ███   ███  ███  ███  ████  ███   ███
    # ███████      ███     ███   ███  ███  ███   ███   ███████ 
    
    `string`: ->
    
        topTok = @tokens[^1]
        
        assert topTok.tok in {◂string_start ◂stripol_end}
        
        ampersand = false
        stripolStart = "#" & "{"
        
        switch topTok.tok
            ◂string_start
                @delimiter = topTok.str
                if @tokens.len > 1 and @tokens[^2].tok == ◂ampersand
                    if @tokens[^2].col == @tokens[^1].col-1
                        @tokens.delete @tokens.len-2..@tokens.len-2
                        stripolStart = "{"
                        ampersand = true
            ◂stripol_end
                @token.tok = ◂string
            ➜ 
                discard
    
        isAtStringEnd = ➜bool ->
            if @delimiter.len == 1 and @segi >= @eol
                ⮐  true
            if @segi >= @segs.len
                ⮐  true
            @scmp @delimiter

        @token.tok = ◂string
        if @peek(0) == "\\"
            @advance 2
                        
        while not isAtStringEnd()
        
            @token.tok = ◂string
            
            c = @peek(0)
            if c == "\\"
                @advance 2
                continue
            
            if @delimiter in ["\"" "\"\"\""]
                if @scmp stripolStart
                    @commit stripolStart ◂stripol_start stripolStart.len
                    @inStripol = true  
                    return
    
            @token.str &= c
            @lineIncr c
            
        if @segi <= @eol-1
            @commit @delimiter ◂string_end @delimiter.len
        
    # ███   ███  ███   ███  ██     ██  ███████    ████████  ████████ 
    # ████  ███  ███   ███  ███   ███  ███   ███  ███       ███   ███
    # ███ █ ███  ███   ███  █████████  ███████    ███████   ███████  
    # ███  ████  ███   ███  ███ █ ███  ███   ███  ███       ███   ███
    # ███   ███   ███████   ███   ███  ███████    ████████  ███   ███
    
    number: ->
    
        @pushToken "" ◂number
    
        l = @segs.len
        
        if @segi < l-1 and @segs[@segi] == "0" 
            if @segs[@segi+1] == "x"
                @advance 2
                @advance {'0'..'9' 'a'..'f' 'A'..'F'}
                @pushToken()
                ⮐   
            if @segs[@segi+1] == "b"
                @advance 2
                @advance {'0' '1'}
                @pushToken()
                ⮐   
            if @segs[@segi+1] == "o"
                @advance 2
                @advance {'0'..'7' }
                @pushToken()
                ⮐   
                
        @advance {'0'..'9'}
            
        if @segi < l-1 and @char == '.' and @char(1) in {'0'..'9'}
            @advance 1
            @advance {'0'..'9'}
    
        if @segi < l-1 and @char == 'e' and @char(1) in {'0'..'9' '+' '-'}
            @advance 2
            @advance {'0'..'9'}
        
        @pushToken()
        
    #  ███████   ███████   ██     ██  ██     ██  ████████  ███   ███  █████████
    # ███       ███   ███  ███   ███  ███   ███  ███       ████  ███     ███   
    # ███       ███   ███  █████████  █████████  ███████   ███ █ ███     ███   
    # ███       ███   ███  ███ █ ███  ███ █ ███  ███       ███  ████     ███   
    #  ███████   ███████   ███   ███  ███   ███  ████████  ███   ███     ███   
    
    comment: ->
    
        if @scmp "##"
            @tokens[^1].str &= "##"
            @incr 2
            @token.col += 2
            @token.tok = ◂comment
            @advanceMulti "###"
            if @scmp "###"
                @commit "###" ◂comment_end 3
            else
                @pushToken "" ◂comment
            ⮐  
    
        @advanceUntil "\n"
        @push ◂comment
        
    modbracket: ->
    
        @pushToken()
        @token.tok = ◂mod
        @advance 1
        @advanceUntil ".}"
        @advance 2
        @pushToken()
        
    verbatim: ->
    
        @advanceUntil "\n"
        @push ◂verbatim
    
    #  ███████   ███████   ██     ██  ██     ██  ███  █████████
    # ███       ███   ███  ███   ███  ███   ███  ███     ███   
    # ███       ███   ███  █████████  █████████  ███     ███   
    # ███       ███   ███  ███ █ ███  ███ █ ███  ███     ███   
    #  ███████   ███████   ███   ███  ███   ███  ███     ███   
    
    commit: str="" tk=◂name incr=0 ->
    
        @pushToken str tk incr
        @pushToken()
        
        switch tk
            ◂comment_start
                @comment()
            ◂string_start 
            ◂stripol_end
                @string()
            ◂mod
                @modbracket()
            ➜ 
                discard
    
    # █████████  ███   ███  ███   ███  ███████
    #    ███     ███  ███   ████  ███     ███ 
    #    ███     ███████    ███ █ ███    ███  
    #    ███     ███  ███   ███  ████   ███   
    #    ███     ███   ███  ███   ███  ███████
    
    tknz: ◇seq[string] segs ◇string lang ➜seq[Token] ->
    
        # profileScope "tknz"
    
        @segs = segs
        @lang = lang
        
        while @segi < @segs.len and @segs[@segi] in ["\n" " "]
            @lineIncr @segs[@segi]
    
        while @eol < @segs.len and @segs[@eol] != "\n"
            @eol += 1
            
        while @segi < @segs.len
            
            if @segs[@segi] == "\n"
            
                if @tokens.len > 1 and @tokens[^1].tok == ◂multiply and @tokens[^2].tok == ◂name
                    @tokens.pops()
                    @tokens[^1].str &= "*"
            
                @nextLine()
                if @segi >= @segs.len
                    break
                @token = tkn ◂indent "" @line @col
                while @peekSafe(0) == " "
                    @advance 1
                if @segi >= @segs.len
                    break
                if @tokens[^1].tok == ◂indent
                    @tokens.pops()
                @tokens.add @token
                continue
                    
            @token = tkn ◂name "" @line @col
            
            while @segi < @eol
                                        
                char = @peek 0
                
                if char == " "
                    if @segi > 0 and @peek(-1) != " "
                        @pushToken()
                else
                    
                    if @col > 0 and @peek(-1) == " "
                        @token.col = @col
                    
                    triple = @srng 3
                    
                    if triple == "..<"
                        @commit "..." ◂tripledot 3
                        continue
                    
                    if punct.hasKey triple
                        @commit triple punct[triple] 3
                        if @tokens[^1].tok == ◂string_start
                            @token.tok = ◂string
                        continue
                    
                    double = @srng 2
                    if punct.hasKey double
                        if punct[double] == ◂mod
                            @modbracket()
                        else
                            @commit double punct[double] 2
                        continue
                            
                    if punct.hasKey char
                    
                        if punct[char] in openToks
                            @openStack.push punct[char]
                        elif punct[char] in closeToks
                            if @openStack.len and @openStack[^1] == closeOpen[punct[char]]
                                @openStack.pops()
                            elif punct[char] == ◂bracket_close and @inStripol
                                @inStripol = false
                                @commit char ◂stripol_end 1
                                continue
                                
                        if punct[char] == ◂test
                            if @peek(1) notin [" " "\n"]
                                @token.tok = ◂name
                                @advance 1
                                continue
                            if @tokens.len == 0 or @tokens[^1].tok == ◂indent and @peek(1) == " " 
                                while @segi <= @eol-1
                                    @advance 1
                                @push ◂test
                                continue
                         
                        if char == ":"
                            if @lang == "lua" and @isConnectedLeftAndRight() and @charSafe(1) in {'a'..'z' 'A'..'Z'}
                                if @token.str.len == 0 ➜ @token = @tokens.pop()
                                @advance 1
                                continue
                                
                        if @tokens.len > 0 and @tokens[^1].tok == ◂multiply and punct[char] in {◂assign ◂colon ◂paren_open ◂var_type ◂val_type}
                            if punct[char] != ◂paren_open or @tokens[^2].tok in {◂proc ◂template ◂macro}
                                @tokens.pops()
                                @tokens[^1].str &= "*"
                    
                        @commit char punct[char] 1
                        continue
                    else
                        if @token.str.len == 0 and @char in {'0'..'9'}
                            @number()
                            continue
                        
                        @advance 1
                        
                        if @peekSafe(0) == " "
                            switch @token.str 
                                "case"
                                    @token.str = "switch"
                                    @push ◂switch
                                    continue
                                "of"
                                    @token.str = ""
                                    continue
                                "quote"
                                    if @scmp " do:"
                                        @incr 4
                                        @push ◂quote
                                        continue
                                ➜ discard
                         
                        if keywords.hasKey(@token.str) and (@segi >= @eol or @peek(0) == " " or punct.hasKey(@peek(0)))
                            switch keywords[@token.str]
                                ◂type
                                    if @peek(0) != "("
                                        @verbatim()
                                    else
                                        @push ◂name
                                ◂proc ◂from ◂import ◂macro ◂template ◂converter
                                    @verbatim()
                                ➜   @push keywords[@token.str]
                        continue
                @incr 1
            
            if @token.str.len
                if keywords.hasKey @token.str
                    @token.tok = keywords[@token.str]
                @tokens.add @token
                    
        ⮐  @tokens
    
tokenize* = ◇seq[string] segs ◇string lang ➜seq[Token] -> Tknzr.new.tknz segs lang
tokenize* = ◇string text ◇string lang ➜seq[Token] -> tokenize kseg(text) lang

    
    
