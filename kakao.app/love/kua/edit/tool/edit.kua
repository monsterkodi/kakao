###
    00000000  0000000    000  000000000
    000       000   000  000     000   
    0000000   000   000  000     000   
    000       000   000  000     000   
    00000000  0000000    000     000   
###

class edit
    
    # 000  000   000   0000000  00000000  00000000   000000000
    # 000  0000  000  000       000       000   000     000   
    # 000  000 0 000  0000000   0000000   0000000       000   
    # 000  000  0000       000  000       000   000     000   
    # 000  000   000  0000000   00000000  000   000     000   
    
    @insertTextAtPositions: lines text posl ->
           
        ⮐  (lines posl) if empty text
        
        # log "insertTextAtPositions lines " noon lines
        # log "insertTextAtPositions text  " noon text
        # log "insertTextAtPositions posl  " noon posl
                
        if text == '\t'
            pos  = posl[1]
            text = kstr.lpad 4-((pos[1]-1%4)+1) ' '
            
        text   = kstr.detab text
        txtls  = belt.seglsForText text
        newls  = []                
        newpl  = []
        line   = kseg()                
        rngs   = belt.rangesForLinesSplitAtPositions lines posl
        before = []
        # log ◌b "INSERT ------------- " rngs
        for idx rng in rngs
            # log ◌y "INSERT ------------- " idx, rng       
            after = belt.seglsForRange lines rng
            # log ◌y "INSERT ------------- " idx
            if empty(after) or empty(after[1])
                if posl[posl∙len()][2] > lines∙len()
                    before∙push [] 
            # log ◌y "INSERT ------------- " idx
            if idx > 1
                x = posl[idx-1][1]
                
                if valid before ➜ line = before∙pop()
                else              line = newls∙pop() 
                
                if x-1 > kseg.width(line) and text != '\n'
                    line += kstr.split kstr.lpad(x-1-line.len) ''
                    
                if txtls∙len() > 1
                    if posl∙len() > 1 and text != '\n'
                        insertLineIndex = ((idx-2) % txtls∙len())+1
                        before∙push line + txtls[insertLineIndex]
                        newpl∙push [kseg.width(before[before∙len()]) newls∙len()+before∙len()-1]
                        before∙push before∙pop() + after∙shift()
                    else
                        posLineIndent = belt.numIndent line
                        indent = kseg(kstr.lpad(posLineIndent))
                        before∙push line + txtls[1]
                        
                        for insl lidx in txtls∙slice(2)∙each()
                            if insl.len > 0 or text == '\n'
                                # write "PUSH |#{insl}|"
                                before∙push indent + insl
                        if x-1 > posLineIndent
                            newpl∙push [kseg.width(before[before∙len()])+1 newls∙len()+before∙len()]
                            before∙push before∙pop() + after∙shift()
                        else
                            after∙unshift indent + after∙shift()
                            before∙pop() if text == '\n'
                            newpl∙push [kseg.width(indent)+1 newls∙len()+before∙len()+1] 
                    newls += before
                            
                else
                    newpl∙push [kseg.width(line)+kseg.width(txtls[1])+1 newls∙len()+before∙len()+1]
                    line  += txtls[1]
                    line  += after∙shift()
                    newls += before      
                    newls∙push line                  
            # log ◌y "INSERT <------------ " idx
            before = after
        
        # log ◌y "INSERT <<-----------" posl∙len(), lines∙len()
        if posl∙len() >= 1 and posl[posl∙len()][2] <= lines∙len()
            newls += before 
        # log ◌y "INSERT <<◂----------" noon newls 
        # log ◌y "INSERT ◂◂◂----------" newpl 
        (newls newpl)
        
    #  0000000  000   000  00000000   00000000    0000000   000   000  000   000  0000000    
    # 000       000   000  000   000  000   000  000   000  000   000  0000  000  000   000  
    # 0000000   000   000  0000000    0000000    000   000  000   000  000 0 000  000   000  
    #      000  000   000  000   000  000   000  000   000  000   000  000  0000  000   000  
    # 0000000    0000000   000   000  000   000   0000000    0000000   000   000  0000000    
    
    @insertSurroundAtRanges: lines rngs trigger pair ->
        
        begl = belt.startPositionsOfRanges rngs
        
        (lines begl) = belt.insertTextAtPositions lines pair[0] begl
        
        endl = []
        for pos,idx in begl
            endl∙push [pos[0]+rngs[idx][2]-rngs[idx][0] pos[1]]
            
        (lines endl) = belt.insertTextAtPositions lines pair[1] endl
        
        if pair[0][0] == trigger and pair[0] != pair[1]
            (lines begl)
        else
            (lines endl)

    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    @deleteLineRangesAndAdjustPositions: lines rngs posl ->
        
        if lines.arr is "function"
            lines = lines∙arr false
        else
            lines = array.from lines
            
        posl = array.from posl
        
        ⮐  (lines posl) if empty rngs
        ⮐  (lines posl) if rngs∙len() < 1
        
        for ri in rngs∙len()..1
        
            rng = rngs[ri]
            
            if rng == nil
                write "nil range at index #{ri}?"
                ⮐  (lines posl)
            
            if rng[2] > lines∙len() or rng[4] > lines∙len()
                write "range out of bounds?" rng
                ⮐  (lines posl)
            
            posl = belt.adjustPositionsForDeletedLineRange posl lines rng
            
            if rng[2] == rng[4]
                
                # write ◌y "RNG -------------------------------- #{rng}"
                
                if rng[1] == 1 and rng[3] > lines[rng[2]]∙len()
                    lines∙splice rng[2] 1
                else
                    slcl = lines[rng[2]]∙slice(1 rng[1]-1)
                    # write ◌b "slcl " slcl 
                    slcr = lines[rng[2]]∙slice(rng[3])
                    # write ◌b "slcr " slcr 
                    repl = slcl + slcr
                    # write ◌g "repl " repl
                    # write ◌r "SPLICE" rng 
                    lines∙splice rng[2] 1 repl
                    # write ◌y "SPLICE" lines
                    
            else
                partialLast = false        
                if rng[3] == lines[rng[4]]∙len()
                    lines∙splice rng[4] 1                           
                else
                    lines∙splice rng[4] 1 lines[rng[4]]∙slice(rng[3])
                    partialLast = true                              
                                                                    
                if rng[4]-rng[2] >= 2                               
                    lines∙splice rng[2]+1 rng[4]-rng[2]-1           
                                                                    
                if rng[1] == 1                                      
                    lines∙splice rng[2] 1                           
                else
                    lines∙splice rng[2] 1 lines[rng[2]]∙slice(1 rng[1]-1)
                    
                    if partialLast                                  
                        lines∙splice rng[2] 2 lines[rng[2]] + lines[rng[2]+1]
        # write ◌m "LINES " lines ◌c "\nPOSL " posl       
        (lines posl)
        
    @adjustPositionsForDeletedLineRange: posl lines rng ->
        
        ⮐  posl if empty posl
        
        for pi in posl.len..1
            pos = posl[pi]
            
            if belt.isPosTouchingRange pos rng
                pos[1] = rng[1] 
                pos[2] = rng[2]
            elif belt.isPosAfterRange pos rng
                if pos[2] == rng[4]
                    pos[1] -= rng[3] - rng[1]
                    if rng[2] < rng[4]
                        pos[2] -= rng[4] - rng[2]
                else
                    pos[2] -= belt.numFullLinesInRange(lines rng)
            else
                break
                    
        belt.removeDuplicatePositions posl
        
    @moveCursorsInSameLineBy: cursors cursor delta ->
    
        ci = cursors∙find cursor
    
        while true
            
            cursors[ci][1] += delta
            ci += 1
            
            ⮐  if ci >= cursors.len
            ⮐  if cursors[ci][2] > cursor[2]
            
    #  0000000   0000000    0000000          00000000    0000000   000   000   0000000   00000000   0000000  
    # 000   000  000   000  000   000        000   000  000   000  0000  000  000        000       000       
    # 000000000  000   000  000   000        0000000    000000000  000 0 000  000  0000  0000000   0000000   
    # 000   000  000   000  000   000        000   000  000   000  000  0000  000   000  000            000  
    # 000   000  0000000    0000000          000   000  000   000  000   000   0000000   00000000  0000000   
    
    @addLinesBelowPositionsToRanges: lines posl rngs ->
    
        newp = []
        newr = rngs∙arr()
    
        addLineAtIndex = c i ->

            range = belt.rangeOfLine lines i
            if belt.isEmptyRange range
                range[2] += 1 
            newr∙push range
            newp∙push belt.endOfRange(range)
            
        for c in posl∙each()
            if not belt.rangesContainLine(rngs c[2])
                addLineAtIndex c c[2]
            elif c[2] < lines∙len()
                addLineAtIndex c c[2]+1 

        ⮐  (posl rngs) if empty newp

        (newp newr)
    
    # 00000000   00000000  00     00   0000000   000   000  00000000     00000000   000   000   0000000    0000000    
    # 000   000  000       000   000  000   000  000   000  000          000   000  0000  000  000        000         
    # 0000000    0000000   000000000  000   000   000 000   0000000      0000000    000 0 000  000  0000  0000000     
    # 000   000  000       000 0 000  000   000     000     000          000   000  000  0000  000   000       000    
    # 000   000  00000000  000   000   0000000       0      00000000     000   000  000   000   0000000   0000000     
    
    @removeLinesAtPositionsFromRanges: lines posl rngs ->
        
        newp = []
        newr = belt.splitLineRanges lines rngs
        
        for pos in posl
            rng = belt.rangeInRangesTouchingPos newr pos
            if rng
                idx = newr.indexOf rng
                if idx > 0
                    newp∙push belt.endOfRange(newr[idx-1])
                else
                    newp∙push belt.endOfRange(newr[idx])
                newr∙splice idx 1
            else
                newp∙push pos
        (newp newr)
        
    @rangeForJoiningLine: lines idx -> [lines[idx]∙len()+1 idx 1 idx+1]
        
    @rangesForJoiningLines: lines idxs -> 
    
        idxs∙map((idx) -> belt.rangeForJoiningLine(lines idx))
    
    # 00     00   0000000   000   000  00000000         000      000  000   000  00000000   0000000  
    # 000   000  000   000  000   000  000              000      000  0000  000  000       000       
    # 000000000  000   000   000 000   0000000          000      000  000 0 000  0000000   0000000   
    # 000 0 000  000   000     000     000              000      000  000  0000  000            000  
    # 000   000   0000000       0      00000000         0000000  000  000   000  00000000  0000000   
    
    @moveLineRangesAndPositionsAtIndicesInDirection: lines rngs posl indices dir ->
        
        if empty(indices) or dir == 'down' and indices[indices∙len()] >= lines∙len() or dir == 'up' and indices[1] <= 1
            ⮐  (lines rngs posl)
        
        newLines = lines∙arr()
        newRngs  = rngs∙arr()
        newPosl  = posl∙arr()
        
        (rs re) = switch dir
            'down' ➜ (indices∙len() 1)
            'up'   ➜ (1 indices∙len())

        d = switch dir
            'down' ➜  1
            'up'   ➜ -1
            
        for ii in rs..re
            index = indices[ii]
            
            switch dir 
                'down' ➜ newLines∙splice index   2 newLines[index+1] newLines[index] 
                'up'   ➜ newLines∙splice index-1 2 newLines[index]   newLines[index-1]
                
            for pos in newPosl
                if pos[2] == index 
                    pos[2] += d

            for rng in newRngs
                if rng[2] == index 
                    rng[2] += d
                    rng[4] += d
        
        (newLines newRngs newPosl)

    #  0000000  000       0000000   000   000  00000000        000      000  000   000  00000000   0000000  
    # 000       000      000   000  0000  000  000             000      000  0000  000  000       000       
    # 000       000      000   000  000 0 000  0000000         000      000  000 0 000  0000000   0000000   
    # 000       000      000   000  000  0000  000             000      000  000  0000  000            000  
    #  0000000  0000000   0000000   000   000  00000000        0000000  000  000   000  00000000  0000000   
    
    @cloneLineBlockRangesAndMoveRangesAndPositionsInDirection: lines blocks rngs posl dir ->
        
        if empty(blocks) or dir == 'down' and blocks[blocks∙len()][4] > lines∙len() or dir == 'up' and blocks[1][2] <= 1
            ⮐  (lines rngs posl)
        
        newLines = lines∙arr()
        newRngs  = rngs∙arr()
        newPosl  = posl∙arr()
        
        (rs re) = switch dir
            'down' ➜ (blocks.len 1)
            'up'   ➜ (1 blocks.len)

        d = switch dir
            'down' ➜ 1
            'up'   ➜ -1
            
        for bi in rs..re
            block = blocks[bi]
  
            text = belt.textForLineRange newLines block
            text &= '\n'

            insidx = if dir == 'up' ➜ block[2] ➜ block[4]+1

            (newLines posl) = belt.insertTextAtPositions newLines text [[1 insidx]]

            if dir == 'down'
                d = block[4]-block[2]+1
                
                for pos in newPosl
                    if belt.rangeContainsPos block pos
                        pos[2] += d                
    
                for rng in newRngs
                    if belt.rangeContainsRange block rng
                        rng[2] += d
                        rng[4] += d
        
        (newLines newRngs newPosl)
        
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000   0000000  
    # 000       000   000  000   000  000   000  000       0000  000     000     000       
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     0000000   
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000          000  
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     0000000   
    
    @toggleCommentsInLineRangesAtIndices: lines rngs posl indices ->
        
        ⮐  (lines rngs posl) if empty indices
        
        newLines = lines∙arr()
        newRngs  = rngs∙arr()
        newPosl  = posl∙arr()
        
        comStart  = kseg '#'
        minIndent = Infinity
             
        for index in indices
            
            (indent line) = belt.splitLineIndent newLines[index]
            if not kseg.startsWith(line comStart)
                comment = comStart
                minIndent = min indent.len minIndent
        
        comIndent = ''    
        if comment
            comIndent = kseg.rep(minIndent) 
                
        for _ index in ipairs indices
            
            (indent line) = belt.splitLineIndent newLines[index]
            if comment
                indent  = kseg.rep indent.len-minIndent
                newLine = kseg.join comIndent comment indent ' ' line
            else
                d = if line[comStart.len] == ' ' ➜ 1 ➜ 0
                newLine = kseg.join indent line∙slice(comStart∙len()+d)
            newLines∙splice index 1 newLine
        
        (newLines newRngs newPosl)
        
    @toggleCommentTypesInLineRangesAtIndices: lines rngs posl indices ->
        
        ⮐  (lines rngs posl) if empty indices
        
        newLines = lines∙map((l) -> l)
        newRngs  = rngs #.asMutable()
        newPosl  = posl #.asMutable()
        
        log "todo: toggleCommentTypes #{indices}"
        
        (newLines newRngs newPosl)
        
    # 0000000    00000000  000  000   000  0000000    00000000  000   000  000000000  
    # 000   000  000       000  0000  000  000   000  000       0000  000     000     
    # 000   000  0000000   000  000 0 000  000   000  0000000   000 0 000     000     
    # 000   000  000       000  000  0000  000   000  000       000  0000     000     
    # 0000000    00000000  000  000   000  0000000    00000000  000   000     000     
    
    @deindentLineRangesAndPositionsAtIndices: lines rngs posl indices ->
        
        ⮐  (lines rngs posl) if empty indices  
        
        newLines = lines∙arr()
        newRngs  = rngs∙arr()
        newPosl  = posl∙arr()
        
        for index in indices
            
            (indent line) = belt.splitLineIndent newLines[index]
        
            if indent.len
                
                sc = min 4 indent∙len()
                newLines∙splice index 1 kseg.join(indent∙slice(sc) line)
                
                for pos in newPosl
                    if pos[2] == index 
                        pos[1] = max 1 pos[1] - sc
                        
                for rng in newRngs
                    if rng[2] == index 
                        rng[1] = max 1 rng[1] - sc
                        rng[3] = max 1 rng[3] - sc
        
        (newLines newRngs newPosl)

    # 000  000   000  0000000    00000000  000   000  000000000  
    # 000  0000  000  000   000  000       0000  000     000     
    # 000  000 0 000  000   000  0000000   000 0 000     000     
    # 000  000  0000  000   000  000       000  0000     000     
    # 000  000   000  0000000    00000000  000   000     000     
    
    @indentLineRangesAndPositionsAtIndices: lines rngs posl indices ->
        
        ⮐  (lines rngs posl) if empty indices  
        
        newLines = lines∙arr()
        newRngs  = rngs∙arr()
        newPosl  = posl∙arr()
        
        for index in indices
            
            (indent line) = belt.splitLineIndent newLines[index]
        
            newLines[index] = kseg.join kseg.rep(4) newLines[index]
            
            for pos in newPosl
                if pos[2] == index 
                    pos[1] += 4
                    
            for rng in newRngs
                if rng[2] == index 
                    rng[1] += 4
                    rng[3] += 4
        
        (newLines newRngs newPosl)
        
    # 00000000  000   000  000000000  00000000  000   000  0000000          00000000   000   000   0000000    0000000  
    # 000        000 000      000     000       0000  000  000   000        000   000  0000  000  000        000       
    # 0000000     00000       000     0000000   000 0 000  000   000        0000000    000 0 000  000  0000  0000000   
    # 000        000 000      000     000       000  0000  000   000        000   000  000  0000  000   000       000  
    # 00000000  000   000     000     00000000  000   000  0000000          000   000  000   000   0000000   0000000   
    
    @extendLineRangesFromPositionToPosition: lines rngs start pos ->

        if empty rngs ➜ ⮐  [belt.rangeFromStartToEnd(start pos)]

        newRngs = rngs∙arr()
        
        rng = belt.rangeInRangesTouchingPos newRngs start
        if rng
            if belt.isPosAfterRange pos rng
                rng[3] = pos[1]
                rng[4] = pos[2]
            elif belt.isPosBeforeRange pos rng
                rng[1] = pos[1]
                rng[2] = pos[2]
        else
            newRngs∙push belt.rangeFromStartToEnd(start pos)

        newRngs
    
    @extendLineRangesByMovingPositionsInDirection: lines rngs posl dir opt ->
        
        newRngs = rngs∙arr()
        newPosl = posl∙arr()
        
        for pi pos in newPosl
            
            line = lines[pos[2]]
            rng = [pos[1] pos[2] pos[1] pos[2]]
            newRngs∙push rng
            nc = 0
            switch dir
                'left'  
                'right'     ➜ nc = belt.numCharsFromPosToWordOrPunctInDirection(lines pos dir opt); pos[1] += nc
                'up'        ➜ pos[2] -= 1
                'down'      ➜ pos[2] += 1
                'eol'       ➜ pos[1] = line∙len()
                'bol'       ➜ pos[1] = 1
                'bof'       ➜ pos[1] = 1; pos[2] = 1
                'eof'       ➜ pos[2] = lines∙len(); pos[1] = lines[lines∙len()]∙len()

                'ind_bol'   ➜ ind = belt.numIndent(line); pos[1] = if pos[1] > ind ➜ ind ➜ 1
                'ind_eol'   ➜ ind = belt.numIndent(line); pos[1] = if pos[1] < ind ➜ ind ➜ line∙len()
                
            switch dir
                'left'      ➜ rng[1] = rng[1]+nc
                'right'     ➜ rng[3] = rng[3]+nc
                'up'        ➜ rng[2] = max 1 rng[2]-1
                'down'      ➜ rng[4] = min lines∙len() rng[4]+1
                'eol'       ➜ rng[3] = Infinity
                'bol'       ➜ rng[1] = 1
                'bof'       ➜ rng[1] = 1; rng[2] = 1
                'eof'       ➜ rng[4] = lines∙len(); rng[3] = lines[lines∙len()]∙len()

                'ind_bol'   ➜ ind = belt.numIndent(line); rng[1] = if rng[1] > ind ➜ ind ➜ 1
                'ind_eol'   ➜ ind = belt.numIndent(line); rng[3] = if rng[3] < ind ➜ ind ➜ line∙len()
            
            if rng[2] <= lines∙len()
                rng[1] = clamp 1 lines[rng[2]]∙len()+1 rng[1] 
            if rng[4] <= lines∙len()
                rng[3] = clamp 1 lines[rng[4]]∙len()+1 rng[3] 
        
        (newRngs newPosl)
        
⮐  edit
