###
000000000  00000000  000   000  000000000
   000     000        000 000      000   
   000     0000000     00000       000   
   000     000        000 000      000   
   000     00000000  000   000     000   
###

class text

    # @linesForText: text -> kstr.lines text
    @linesForText: text -> kseg.segls text
        
    @joinLines: lines join='\n' ->
        
        if lines is "string"
            lines = kstr.lines lines
        lines.join join
        
    @seglsForText: t ->

        kseg.segls string.gsub(t "\x1b" "�")
        
    @colorSeglsForText: text ->
                
        colors = []
        segls  = []
        
        pattern = "\\x1b\\[([:;]?%d+)m"
        
        for line,li in belt.linesForText(text)
            
            ansisub = m c x ->
                
                cs = c.split(';')∙map((c) -> ⮐  floor(c))

                l = m.len
                switch cs[0]
                    38
                        colors[li] ?= []
                        if cs.len == 5 
                            colors[li]∙push({x:x l:l fg:string.sub(cs 2 4)}) 
                        else
                            colors[li]∙push({x:x l:l fg:color.ansi256[cs[2]]})
                    48  
                        colors[li] ?= []
                        if cs.len == 5 
                            colors[li]∙push({x:x l:l bg:string.sub(cs 2 4)}) 
                        else
                            colors[li]∙push({x:x l:l bg:color.ansi256[cs[2]]})
                    39
                        colors[li] ?= []
                        colors[li]∙push({x:x l:l fg:-1}) 
                    49
                        colors[li] ?= []
                        colors[li]∙push({x:x l:l bg:-1}) 
                ''
            
            pattern.lastIndex = 0    
            noansi = line.replaceAll pattern ansisub
            
            if valid colors[li]
                lcl = colors[li]
                removed = 0
                idx = 0
                while idx < lcl.len
                    continue = false
                    clr = lcl[idx]
                    clr.x -= removed
                    removed += clr.l
                    clr.l = nil
                    
                    if clr.fg
                        if idx > 0 and lcl[idx-1].fg
                            lcl[idx-1].w = clr.x - lcl[idx-1].x
                        elif idx > 1 and lcl[idx-2].fg
                            lcl[idx-2].w = clr.x - lcl[idx-2].x
                            
                        if clr.fg == -1
                            lcl.splice idx 1
                            continue = true
                            
                    if not continue 
                        if clr.bg
                            if idx > 0 and lcl[idx-1].bg
                                lcl[idx-1].w = clr.x - lcl[idx-1].x
                            elif idx > 1 and lcl[idx-2].bg
                                lcl[idx-2].w = clr.x - lcl[idx-2].x
                            
                            if clr.bg == -1
                                lcl.splice idx 1
                                continue = true
                    if not continue     
                        idx += 1

            segls∙push kseg(noansi)
        
        [colors segls]
        
    @seglsForLineRange: lines rng ->
        
        if empty lines or empty rng
            ⮐  '' 
        
        l = []
        
        for y in rng[1]..rng[3]
            if not belt.isInvalidLineIndex lines y
                if
                    y == rng[1]
                        if 
                            y == rng[3] ➜ l∙push(lines[y]∙slice(rng[0] rng[2]))
                                        ➜ l∙push(lines[y]∙slice(rng[0]))
                    y == rng[3] ➜ l∙push(lines[y]∙slice(1 rng[2]))
                                ➜ l∙push(lines[y])
                                
                l∙push('\n') if y < rng[3]
        
        l
        
    @segsForLineSpan: lines span ->
        
        l = []
        ⮐  l if empty lines or empty span
        y = span[1]
        ⮐  l if belt.isInvalidLineIndex lines y
        lines[y]∙slice span[0] span[2]-1
        
    @segsForPositions: lines posl ->
        
        l = []
        ⮐  l if empty lines or empty posl
        for pos in posl
            ⮐  l if belt.isInvalidLineIndex lines pos[1]
            segi = kseg.segiAtWidth lines[pos[1]] pos[0]
            l∙push lines[pos[1]][segi]
        l

    @textForLineRange: lines rng ->
         
        ⮐  '' if empty lines or empty rng
         
        l = []
         
        for y in rng[1]..rng[3]
            if not belt.isInvalidLineIndex lines y
                if
                    y == rng[1]
                        if 
                            y == rng[3] ➜ l∙push lines[y]∙slice (rng[0] rng[2])
                                        ➜ l∙push lines[y]∙slice (rng[0])
                    y == rng[3] ➜ l∙push lines[y]∙slice(1 rng[2])
                                ➜ l∙push lines[y]
         
        s = kseg.str l
        s
        
    @textForLineRanges: lines rngs ->
        
        ⮐  '' if empty lines
        
        text = ''
        for rng in rngs
            text &= belt.textForLineRange lines rng
            text &= '\n'
        kstr.pop text
        
    @textForSpans: lines spans ->
    
        belt.textForLineRanges lines belt.rangesForSpans(spans)
                
    @lineSpansForText: lines text ->
        
        spans = []
        
        for line,y in lines
            line = kseg.str line
            x2 = 0
            while true
                x1 = line.indexOf text x2
                break if x1 < 0
                x2 = x1+text.len
                spans∙push [x1 y x2]
        
        spans
        
    @textFromBolToPos: lines pos -> lines[pos[1]]∙slice(1 pos[0])
    @textFromPosToEol: lines pos -> lines[pos[1]]∙slice(pos[0])
    
    @isOnlyWhitespace: text -> string.match kseg.str(text) "^%s+$"
    
    # 000  000   000  0000000    00000000  000   000  000000000  
    # 000  0000  000  000   000  000       0000  000     000     
    # 000  000 0 000  000   000  0000000   000 0 000     000     
    # 000  000  0000  000   000  000       000  0000     000     
    # 000  000   000  0000000    00000000  000   000     000     
    
    @numIndent: segs -> kseg.indent segs
        
    @splitLineIndent: str -> kseg.splitAtIndent str
    
    @reindent: oldIndent newIndent str ->
    
        (indent rest) = belt.splitLineIndent str
        
        kstr.lpad(int(indent.len*newIndent/oldIndent)) & rest
        
    @numIndentOfLines: lines ->
        
        for line in lines
            if not empty kstr.trim(line)
                ⮐  belt.numIndent line
        0
        
    @lineIndentAtPos: lines pos -> 

        belt.numIndent lines[pos[1]]
        
    @indentLines: lines num=4 ->
        
        lines∙map((l) -> kstr.split(kstr.lpad(num), '') + l)
        
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    @seglRangeAtPos: segls pos ->

        [1 pos[2] segls[pos[2]].len+1 pos[2]]
        
    @lineRangeAtPos: lines pos ->

        [1 pos[2] kseg.width(lines[pos[2]])+1 pos[2]]

    @lineRangesForPositions: lines posl append->
        
        rngs = belt.lineIndicesForPositions(posl)∙map((y) -> if lines[y].len ➜ [0 y lines[y].len y] ➜ [0 y 0 y+1])
        if valid rngs and append
            rngs[-1][2]  = 0 
            rngs[-1][3] += 1
        rngs
                    
    @numFullLinesInRange: lines rng ->
        
        d = rng[4] - rng[2]
        
        # if d == 0 
        #     r2 = if lines[rng[1]].len > 0 ➜ 1 ➜ 0
        #     ⮐  rng[0] == 0 and rng[2] == r2
        
        n = 0
        if rng[1] == 1 
            n += 1   
        if d > 2    
            n += d-2     
        if rng[3] == lines[rng[4]].len
            n += 1   
        n
        
    @numLinesInRange: rng -> rng[4] - rng[2] + 1
    
    @isEmptyLineAtPos: lines pos -> lines[pos[2]].len <= 0
        
    @lineRangesInRange: lines rng ->
        
        rngs = []
        for ln in 0...belt.numLinesInRange(rng)
            rngs∙push belt.lineRangeAtPos(lines [1 rng[2]+ln])
        rngs
        
    @seglsForRange: lines rng ->

        nl = belt.numLinesInRange rng
        if nl == 1
            bos = kseg.segiAtWidth lines[rng[2]] rng[1]
            eos = kseg.segiAtWidth lines[rng[2]] rng[3]
            ⮐  [lines[rng[2]]∙slice(bos eos-1)]
        
        firstLineIndex = min rng[2] lines.len
        lastLineIndex  = min rng[4] lines.len

        segi = kseg.segiAtWidth lines[firstLineIndex] rng[1]
        lns = [lines[firstLineIndex]∙slice(segi)]
        if nl > 2
            lns += lines∙slice(firstLineIndex+1 lastLineIndex-1)
        segi = kseg.segiAtWidth lines[lastLineIndex] rng[3]
        lns += [lines[lastLineIndex]∙slice(1 segi-1)]
        lns
                
    @indexOfLongestLine: lines ->
        
        maxIndex = 0
        maxLength = 0
        for index line in ipairs lines
            w = kseg.width line
            if w > maxLength
                maxLength = w
                maxIndex  = index
        maxIndex

    @widthOfLines: lines -> 
    
        kseg.width lines[belt.indexOfLongestLine(lines)]
        
    @widthOfLinesIncludingColorBubbles: lines ->
    
        maxWidth = 0
        for line in lines
            w = kseg.width line
            if line.indexOf('#') >= 0
                w += 4
            if w > maxWidth
                maxWidth = w 
        maxWidth
        
    # ███████    ███  ████████  ████████
    # ███   ███  ███  ███       ███     
    # ███   ███  ███  ██████    ██████  
    # ███   ███  ███  ███       ███     
    # ███████    ███  ███       ███     

    @diffLines: oldLines newLines ->
    
        changes = []
        inserts = []
        deletes = []
        
        oi = 0 # index in oldLines
        ni = 0 # index in newLines

        if oldLines != newLines

            ol = oldLines[oi]
            nl = newLines[ni]

            while oi < oldLines.len

                if not nl # new state has not enough lines, mark remaining lines in oldState as deleted
                    deletes∙push oi
                    oi += 1
                    # elif ol == nl or kseg.str(ol) == kseg.str(nl) # same lines in old and new
                elif ol == nl # same lines in old and new

                    oi += 1
                    ni += 1
                    ol = oldLines[oi]
                    nl = newLines[ni]
                    
                else

                    if nl == oldLines[oi+1] and ol == newLines[ni+1]

                        changes∙push ni
                        oi += 1
                        ni += 1
                        changes∙push ni
                        oi += 1
                        ni += 1
                        ol = oldLines[oi]
                        nl = newLines[ni]

                    elif nl == oldLines[oi+1] and oldLines[oi+1] != newLines[ni+1]

                        deletes∙push oi
                        oi += 1
                        ol = oldLines[oi]

                    elif ol == newLines[ni+1] and oldLines[oi+1] != newLines[ni+1]

                        inserts∙push ni
                        ni += 1
                        nl = newLines[ni]

                    else # change
                    
                        # log '' ['✘' kseg.str(ol) kseg.str(nl)]

                        changes∙push ni
                        oi += 1
                        ol = oldLines[oi]
                        ni += 1
                        nl = newLines[ni]

            while ni < newLines.len

                inserts∙push ni
                ni += 1
                nl = newLines[ni]
        {
            chg: changes
            ins: inserts
            del: deletes
        }

    #  0000000  00000000   000      000  000000000  
    # 000       000   000  000      000     000     
    # 0000000   00000000   000      000     000     
    #      000  000        000      000     000     
    # 0000000   000        0000000  000     000   
    
    @beforeAndAfterForPos: lines pos ->
        
        line   = lines[pos[1]]
        before = line∙slice 1 pos[0]
        after  = line∙slice pos[0]
        (before after)
    
    @joinLineColumns: lineCols ->

        numLines = lineCols[0].len
        numCols  = lineCols.len
        lines = []
        for lidx in 0...numLines
            line = ''
            for cidx in 0...numCols
                line += lineCols[cidx][lidx]
            lines∙push line
        lines
    
    @splitTextAtCols: text cols -> 
        
        spans = []
        for idx col in ipairs cols
            prv = if idx > 0 ➜ cols[idx-1] ➜ 0
            spans∙push string.sub(text prv col)
        spans∙push string.sub(text col)
        spans
    
    @splitLinesAtCols: lines cols ->

        cls = []
        for i in 0..cols.len
            cls∙push []
        
        for _ line in ipairs lines 
            spans = belt.splitTextAtCols line cols
            for span,idx in spans
                cls[idx]∙push span
        cls
    
    @splitLineRange: lines rng includeEmpty=true ->
    
        nl = belt.numLinesInRange rng 
        if nl == 1
            ⮐  [rng] 
        
        split = []
        
        split∙push [rng[1] rng[2] kseg.width(lines[rng[2]])+1 rng[2]]
        
        if nl > 2
            for i in 1..nl-2
                split∙push [1 rng[2]+i kseg.width(lines[rng[2]+i])+1 rng[2]+i]
        
        if includeEmpty or rng[3] > 1
            split∙push [1 rng[4] rng[3] rng[4]] 

        split
                            
    @splitLineRanges: lines rngs includeEmpty=true ->

        split = []        
        for rng in rngs
            split += belt.splitLineRange(lines rng includeEmpty)
        split
        
    @isLinesPosInside:  lines pos -> pos[2] < lines.len and 1 <= pos[1] and pos[1] <= kseg.width(lines[pos[2]])
    @isLinesPosOutside: lines pos -> not belt.isLinesPosInside lines pos 
    
    @isValidLineIndex:   lines li -> 1 <= li and li <= lines.len
    @isInvalidLineIndex: lines li -> not belt.isValidLineIndex lines li
    
    @isMultiLineRange: lines rng -> rng[2] != rng[4]
        
    @isFullLineRange: lines rng -> (1 <= rng[2] and rng[2] <= rng[4] and rng[4] <= lines.len) and (rng[1] == 1) and (rng[2] == rng[4] and rng[3] > lines[rng[4]].len or rng[3] == 1 and rng[2] < rng[4])
    
    @isSpanLineRange: lines rng -> (1 <= rng[2] and rng[2] == rng[4] and rng[4] < lines.len) and (rng[1] > 1 or rng[3] < lines[rng[2]].len)
        
    @rangeOfLine: lines y -> [1 y kseg.width(lines[y]) y]
    
    #  0000000  000   000  000   000  000   000  000   000  
    # 000       000   000  000   000  0000  000  000  000   
    # 000       000000000  000   000  000 0 000  0000000    
    # 000       000   000  000   000  000  0000  000  000   
    #  0000000  000   000   0000000   000   000  000   000  
    
    @rangeOfClosestChunkToPos: lines pos ->
        
        (x y) = unpack pos
        
        ⮐  if belt.isInvalidLineIndex lines y
        r = kstr.rangeOfClosestChunk lines[y] x
        if r
            if 0 <= r[0] < r[1]
                ⮐  [r[0] y r[1] y]
                
    @rangeOfClosestChunkLeftToPos: lines pos ->
        
        (x y) = unpack pos
        
        ⮐  if belt.isInvalidLineIndex lines y
        r = kstr.rangeOfClosestChunk lines[y]∙slice(1 x) x
        if r
            if 0 <= r[0] < r[1]
                ⮐  [r[0] y r[1] y]

    @rangeOfClosestChunkRightToPos: lines pos ->
        
        (x y) = unpack pos
        
        ⮐  if belt.isInvalidLineIndex lines y
        r = kstr.rangeOfClosestChunk lines[y]∙slice(x) x
        if r
            if 0 <= r[0] < r[1]
                ⮐  [r[0] y r[1] y]
                
    # 000   000   0000000   00000000   0000000    
    # 000 0 000  000   000  000   000  000   000  
    # 000000000  000   000  0000000    000   000  
    # 000   000  000   000  000   000  000   000  
    # 00     00   0000000   000   000  0000000    
    
    @wordAtPos: lines pos ->
        rng = belt.rangeOfClosestWordToPos lines pos
        if rng
            ⮐  kseg.str belt.segsForLineSpan(lines rng)
        ''
        
    @chunkBeforePos: lines pos ->
        
        before = lines[pos[2]]∙slice(1 pos[1]-1)
        tcc = kseg.tailCountChunk before
        if tcc > 0
            ⮐  kseg.str before∙slice(before.len-tcc+1)
        ''    
        
    @chunkAfterPos: lines pos ->
        
        after = lines[pos[2]]∙slice(pos[1])
        hcc = kseg.headCountChunk after
        if hcc
            ⮐  kseg.str after∙slice(1 hcc)
        ''    
    
    @rangeOfClosestWordToPos: lines pos ->
        
        (x y) = unpack pos
        ⮐  if belt.isInvalidLineIndex lines y
        r = kseg.spanForClosestWordAtColumn lines[y] x 
        if r
            if 1 <= r[1] and r[1] < r[2]
                ⮐  [r[1] y r[2] y]
                
    @rangeOfWhitespaceLeftToPos: lines pos ->
        
        (x y) = unpack pos
        
        y = clamp 0 lines.len-1 y
        x = clamp 0 lines[y].len x
        
        if x <= 0
            ⮐  [x y x y] 
        
        segi = kseg.segiAtWidth lines[y] x
        left = lines[y]∙slice 1 segi
        tc = kseg.tailCount left ' '
        if tc
            ⮐  [segi-tc y segi y]
            
        [x y x y]

    @rangeOfWordOrWhitespaceLeftToPos: lines pos ->
        
        (x y) = unpack pos
        
        write "rangeOfWordOrWhitespaceLeftToPos #{lines}\n#{pos}" 
        
        ⮐  if x <= 0 or belt.isInvalidLineIndex lines y
        
        segi = kseg.segiAtWidth lines[y] x
        left = lines[y]∙slice(1 segi-1)
        write "LEFT|#{left}|"
        ts = kseg.tailCount left ' '
        if ts > 0
            write "--- ts #{ts}" [segi-ts y segi y]
            ⮐  [segi-ts y segi y]
        tc = kseg.tailCountWord left    
        if tc > 0
            write "+++ tc #{tc}" [max(segi-tc 1) y segi y]
            ⮐  [max(segi-tc 1) y segi y]
        
        write ">>>" [max(segi-tc 1) y segi y]
        [max(segi-tc 1) y segi y]

    @rangeOfWordOrWhitespaceRightToPos: lines pos ->
        
        (x y) = pos
        
        ⮐  if x < 0 or belt.isInvalidLineIndex lines y
        r = kstr.rangeOfClosestWord lines[y]∙slice(x) 0
        if r
            if 0 == r[0] and r[0] < r[1]
                ⮐  [x, y, r[1]+x, y]
            if r[0] > 0 
                ⮐  [x, y, r[0]+x, y]
            
        [x y lines[y].len y]   
        
    @lineChar: line x -> line[x] if 1 <= x and x <= line.len
        
    @categoryForChar: char -> 
        
        if 
            empty char              ➜ ⮐  'empty'
            string.match char "%s+" ➜ ⮐  'ws'
            string.match char "%w+" ➜ ⮐  'word'
            
        'punct'
        
    @jumpDelta: line px dx jump ->
        
        if dx > 0
            ci = px
            nc = belt.categoryForChar belt.lineChar(line ci)
            cat = nc
            if nc
                ⮐  dx if jump∙find(cat) < 1
                while true
                    ci += dx
                    nc = belt.categoryForChar belt.lineChar(line ci)
                    break if nc != cat
                    break if ci <= 0
                    ⮐  1 if nc == 'empty'
            ci - px
        else
            ci = px - 1
            ⮐  0 if ci < 0
            if ci >= line.len and jump∙find('empty') >= 1 ➜ ⮐  line.len - ci - 1
            cat = belt.categoryForChar belt.lineChar(line ci)
            ⮐  dx if jump∙find(cat) < 1
            while 0 <= ci < line.len and belt.categoryForChar(belt.lineChar(line ci)) == cat
                ci += dx
            min dx ci - px + 1

    @numCharsFromPosToWordOrPunctInDirection: lines pos dir opt ->
        
        dx = if dir == 'left' ➜ -1 ➜ 1
        
        if opt and opt.jump ➜ ⮐  belt.jumpDelta(lines[pos[2]] pos[1] dx opt.jump)
            
        ⮐  0 if pos[1] + dx <= 0
        dx
        
⮐  text
