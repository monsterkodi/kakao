###
 0000000  000   000  000   000  000000000   0000000   000   000
000        000 000   0000  000     000     000   000   000 000 
0000000     00000    000 0 000     000     000000000    00000  
     000     000     000  0000     000     000   000   000 000 
0000000      000     000   000     000     000   000  000   000
###

use ../../kxk   ◆ matchr kstr kseg
use ../../kolor ◆ kulur
use ../theme    ◆ theme

function syntax

    @: -> 
        @ext  = 'txt' 
        @clear()
        
    clear: => 
        @diss = []  
        @hash = {}  
        @liha = {}
        
    setExt: @ext =>
    
    setRgxs: rgxs => @config = matchr.config rgxs 'u'
    
    setLines: lines => @setSegls kseg.segls(lines) 
        
    setSegls: segls =>
        
        if valid @config
            @diss = []
            for segs in segls
                dss = matchr.ranges(@config kseg.str(segs) 'u')
                @diss.push dss
        else
            ⮐  if @partialUpdate segls
        
            @clear()
            
            @diss = kulur.dissect segls @ext
            for segl,idx in segls
                hsh = kseg.hash(segl)
                @hash[hsh] = @diss[idx]
                @liha[idx] = hsh
            
    partialUpdate: segls ->
        
        ⮐  if @diss.length != segls.length
        ⮐  if empty @hash
        
        newHash = {}
        
        for segl,idx in segls
        
            hsh = kseg.hash segl
            if @hash[hsh]
                newHash[hsh] = @hash[hsh]
            else
                newHash[hsh] = kulur.dissect([segl] @ext)[0]
                
            if @liha[idx] != hsh
                @diss.splice idx 1 newHash[hsh]
                
        @hash = newHash
            
    addSegl: segl ext =>
    
        @diss = @diss.concat kulur.dissect([segl] ext)
        
    appendSegls: segls ext =>
    
        # @diss = @diss.concat kulur.dissect(segls ext)
        for segl in segls
            @addSegl segl ext
            
    getClass: x y =>
        
        for dss in @diss[y]
            if dss.start <= x < dss.start+dss.length
                ⮐ dss.clss
        'text'
        
    getColor: x y =>
        
        if x is num
            clss = @getClass x y
        else
            clss = x
        
        theme.syntax[clss] ? '#ff0000'
        
    getChar: x y char =>
        
        clss = @getClass x y
        ⮐ '█' if 'header' in clss
        char
        
export syntax
