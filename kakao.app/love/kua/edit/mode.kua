###
    ██     ██   ███████   ███████    ████████
    ███   ███  ███   ███  ███   ███  ███     
    █████████  ███   ███  ███   ███  ███████ 
    ███ █ ███  ███   ███  ███   ███  ███     
    ███   ███   ███████   ███████    ████████

    stores modes per editor state
    
    modes handle input and text insertion:

    brckts   insert and highlight matching surround 
    replex   replaces certain input strings with others
    salter   ascii-headers
    unype    unicode type writer
###

# use ../../kxk ▪ kseg slash post
# use ../../kxk ◆ nfs
# use ../theme  ◆ theme
 
class mode

    @active:  {} # maps editor state names to active mode instances
    @modes:   {} # maps mode names to mode classes
    @pending: [] # list of editors that requested autostart before modes were loaded
    
    @names: -> 
    
        n = []
        for k v in pairs mode.modes
            n∙push k
        n
    
    # 000       0000000    0000000   0000000        00     00   0000000   0000000     000   000  000      00000000   0000000  
    # 000      000   000  000   000  000   000      000   000  000   000  000   000   000   000  000      000       000       
    # 000      000   000  000000000  000   000      000000000  000   000  000   000   000   000  000      0000000   0000000   
    # 000      000   000  000   000  000   000      000 0 000  000   000  000   000   000   000  000      000            000  
    # 0000000   0000000   000   000  0000000        000   000   0000000   0000000      0000000   0000000  00000000  0000000   
    
    # @loadModules: ->

    #         list = nfs.list slash.path(slash.cwd() 'mode')
    #         
    #         for item in list
    #             file = item.path
    #             continue if slash.ext(file) != 'js'
    # 
    #             try
    #                 moduleJS    = './' + slash.relative(file ◆dir)
    #                 moduleExport = import(moduleJS)
    #             catch err
    #                 error "import of #{moduleJS} failed" err
    #                 continue
    #                 
    #             moduleName  = slash.name file
    #             moduleClass = moduleExport.default
    #             mode.modes[moduleName] = moduleClass
    #             
    #         post.emit 'modes.loaded'
    #         
    #         while valid mode.pending
    #             mode.autoStartForEditor mode.pending.shift()
        
    #  0000000   000   000  000000000   0000000    0000000  000000000   0000000   00000000   000000000  
    # 000   000  000   000     000     000   000  000          000     000   000  000   000     000     
    # 000000000  000   000     000     000   000  0000000      000     000000000  0000000       000     
    # 000   000  000   000     000     000   000       000     000     000   000  000   000     000     
    # 000   000   0000000      000      0000000   0000000      000     000   000  000   000     000     
    
    @autoStartForEditor: editor ->
        
        if empty(mode.modes)
            ⮐  mode.pending∙push editor

        for name in mode.names()
            if editor.feats[name] and mode.modes[name].autoStart
                mode.start editor.state name

    #  ███████  █████████   ███████   ████████   █████████
    # ███          ███     ███   ███  ███   ███     ███   
    # ███████      ███     █████████  ███████       ███   
    #      ███     ███     ███   ███  ███   ███     ███   
    # ███████      ███     ███   ███  ███   ███     ███   
    
    @start: state name ->
    
        ⮐  if @isActive state name
        
        @active[state.name] ?= []
        @active[state.name].push new mode.modes[name] state
        
    @stop: state name ->
        
        m = @get state name
        
        @active[state.name].splice @active[state.name].indexOf(m) 1
        
        m.stop() if m.stop is func
        
    @toggle: state name ->
        
        if @isActive state name
            @stop state name
        else
            @start state name
        
    #  ███████    ███████  █████████  ███  ███   ███  ████████
    # ███   ███  ███          ███     ███  ███   ███  ███     
    # █████████  ███          ███     ███   ███ ███   ███████ 
    # ███   ███  ███          ███     ███     ███     ███     
    # ███   ███   ███████     ███     ███      █      ████████

    @isActive: state name -> valid @get(state name)
        
    @get: state name ->
    
        if @active[state.name]
            for m in @active[state.name]∙each()
                ⮐  m if m.name == name

    @insert: state text ->
        
        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.insert is "function"
                    text = m.insert text
        text
        
    @postInsert: state ->
        
        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.postInsert is "function"
                    m.postInsert()
        
    @deleteSelection: state ->
        
        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.deleteSelection is "function"
                    ⮐  true if m.deleteSelection()
        false        
        
    @handleKey: state key event ->

        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.handleKey is "function"
                    ⮐  if m.handleKey(key event) != 'unhandled'
        'unhandled'
        
    @cursorsSet: state editor ->

        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.cursorsSet is "function"
                    m.cursorsSet editor
                
        if not @isActive state 'salter'
            if mode.modes['salter']
                mode.modes['salter']∙checkCursorsSet state
        
    @themeColor: state colorName defaultColor ->
    
        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.themeColor is "function"
                    ⮐  m.themeColor colorName defaultColor
            
        defaultColor
        
    @preDrawLines: state lines ->

        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.preDrawLines is "function"
                    lines = m.preDrawLines(lines)
        lines
        
    @postDraw: state ->
    
        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.postDraw is "function"
                    m.postDraw()
                
    @fileLoaded: state file row col view ->
        
        if @active[state.name]
            for m in @active[state.name]∙each()
                if m.fileLoaded is "function"
                    m.fileLoaded file row col view
        nil
            
# ███   ███  ███  ██     ██  ████████   ███      ████████
# ███   ███  ███  ███   ███  ███   ███  ███      ███     
#  ███ ███   ███  █████████  ████████   ███      ███████ 
#    ███     ███  ███ █ ███  ███        ███      ███     
#     █      ███  ███   ███  ███        ███████  ████████

# class vimple
#     
#     @: state -> @state = state; @name = 'vimple'

# ███   ███  ███   ███  ███  ███   ███   ███████ 
# ███   ███  ████  ███  ███  ███  ███   ███   ███
# ███   ███  ███ █ ███  ███  ███████    ███   ███
# ███   ███  ███  ████  ███  ███  ███   ███   ███
#  ███████   ███   ███  ███  ███   ███   ███████ 

# class uniko
# 
#     @: state -> @state = state; @name = 'uniko'
        
# 00000000   00000000   0000000   0000000   00000000   0000000    
# 000   000  000       000       000   000  000   000  000   000  
# 0000000    0000000   000       000   000  0000000    000   000  
# 000   000  000       000       000   000  000   000  000   000  
# 000   000  00000000   0000000   0000000   000   000  0000000    

# class record
# 
#     @: state -> @state = state; @name = 'record'
    
# mode.loadModules()
    
⮐  mode
