###
 0000000   000   000  000   0000000  000   000  000   000
000   000  000   000  000  000       000  000    000 000
000 00 00  000   000  000  000       0000000      00000
000 0000   000   000  000  000       000  000      000
 00000 00   0000000   000   0000000  000   000     000
###

use ../../kxk ▪ kstr slash post noon
use ../../kxk ◆ nfs
use ../util ◆ prjcts
use ..      ◆ editor theme
use         ◆ cells input choices

import rgxs from './quicky.json' with { type: "json" }

int = parseInt

function quicky

    @: @screen ->

        @name    = 'quicky'

        @cells   = new cells   @screen

        @input   = new input   @screen 'quicky_input'
        @choices = new choices @screen 'quicky_choices'

        @choices.state.syntax.setRgxs rgxs

        @input.on 'changed' @onInputChanged

    #  0000000  000   000   0000000   000   000
    # 000       000   000  000   000  000 0 000
    # 0000000   000000000  000   000  000000000
    #      000  000   000  000   000  000   000
    # 0000000   000   000   0000000   00     00

    show: =>

        @layout()
        @input.grabFocus()

    layout: =>

        x = int @screen.cols/4
        y = int @screen.rows/4
        w = int @screen.cols/2
        h = int @screen.rows/2

        c = min h @choices.num()

        @input.init    x+2   y+1   w-4  1
        @choices.init  x+2   y+3   w-3  c
        @cells.init    x     y     w    c+4

        # lf 'layout' c @choices.items.length

    hide:   => @cells.rows = 0; post.emit 'focus' 'editor'; post.emit 'redraw'; true
    hidden: -> @cells.rows <= 0
    visible: -> @cells.rows > 0

    #  0000000   00000000   00000000  000   000
    # 000   000  000   000  000       0000  000
    # 000   000  00000000   0000000   000 0 000
    # 000   000  000        000       000  0000
    #  0000000   000        00000000  000   000

    toggle: currentFile -> if @hidden() then @open(currentFile) else @hide()
    open:   currentFile -> @gotoFile currentFile
        
    #  0000000    0000000   000000000   0000000   00000000  000  000      00000000  
    # 000        000   000     000     000   000  000       000  000      000       
    # 000  0000  000   000     000     000   000  000000    000  000      0000000   
    # 000   000  000   000     000     000   000  000       000  000      000       
    #  0000000    0000000      000      0000000   000       000  0000000  00000000  
    
    gotoFile: @currentFile ->

        lf 'quicky.gotoFile' @currentFile

        items = prjcts.files @currentFile
        @currentDir = slash.dir @currentFile
        items = items.map (i) => slash.relative i @currentDir

        ccol = int(@screen.cols/2) - 5

        maxind = 0
        indents = []
        for item in items
            indent = slash.dir(item).length
            indent += 1 if indent
            maxind = max maxind indent
            indents.push indent

        items = items.map (i n) => rpad ccol lpad(maxind-indents[n])+i

        weight = item ->

            p = slash.parse item

            w = 0
            w += item.split('/').length * 256
            w += kstr.weight p.name
            w

        items.sort (a b) -> weight(a) - weight(b)

        @input.set '' # previously opened file?
        @choices.set items
        @choices.state.selectLine 0
        @choices.state.setMainCursor @choices.state.s.lines[0].length 0
        @choices.state.setView [0 0]
        @show()
        
    #  0000000    0000000   000000000   0000000   0000000    000  00000000   
    # 000        000   000     000     000   000  000   000  000  000   000  
    # 000  0000  000   000     000     000   000  000   000  000  0000000    
    # 000   000  000   000     000     000   000  000   000  000  000   000  
    #  0000000    0000000      000      0000000   0000000    000  000   000  
    
    gotoDirectory: dir ○=>
        
        ⮐ if empty dir

        @currentDir = slash.untilde dir
        
        # lf 'quicky.gotoDirectory' @currentDir

        items =○ nfs.list @currentDir recursive:false
        
        for item in items
            tilde = slash.tilde item.path
            item.tilde = tilde == '~' ? item.path : tilde
            
        parent = slash.dir @currentDir
        if valid parent
            items.push
                type: 'dir'
                file: slash.name(parent)
                path: parent
                tilde: '..'

        # lf 'items' items
        
        weight = item ->

            p = slash.parse item.tilde

            w = 0
            w += item.tilde.split('/').length * 256
            w += kstr.weight(p.name)
            w

        items.sort (a b) -> weight(a) - weight(b)

        @input.set '..'
        @input.selectAll()
        
        @choices.set items 'tilde'
        @choices.state.selectLine 0
        @choices.state.setMainCursor @choices.state.s.lines[0].length 0
        @choices.state.setView [0 0]
        @show()
        
    # 00000000  000  000      00000000   0000000   00000000   0000000    000  00000000   
    # 000       000  000      000       000   000  000   000  000   000  000  000   000  
    # 000000    000  000      0000000   000   000  0000000    000   000  000  0000000    
    # 000       000  000      000       000   000  000   000  000   000  000  000   000  
    # 000       000  0000000  00000000   0000000   000   000  0000000    000  000   000  
    
    gotoFileOrDirectory: path ○=>
        
        # lf 'gotoFileOrDirectory' path
        
        isDir =○ nfs.dirExists path
        
        # lf 'isDir?' isDir
        
        if isDir
            ○ @gotoDirectory path
        else
            isFile =○ nfs.fileExists path
            if isFile
                @openFileInEditor path
            
    openFileInEditor: file =>
        
        # lf 'quicky.openFileInEditor' file
       
        @cells.rows = 0
        post.emit 'focus' 'editor'
        post.emit 'quicky' file
        redraw:false
        
    # 000  000   000  00000000   000   000  000000000  
    # 000  0000  000  000   000  000   000     000     
    # 000  000 0 000  00000000   000   000     000     
    # 000  000  0000  000        000   000     000     
    # 000  000   000  000         0000000      000     
    
    onInputChanged: text =>

        @choices.filter text
        @choices.state.selectLine 0
        @choices.state.setMainCursor @choices.state.s.lines[0].length 0
        @layout()

    # 00000000    0000000    0000000  000000000  00000000   00000000   0000000  000   000  000      000000000  
    # 000   000  000   000  000          000     000   000  000       000       000   000  000         000     
    # 00000000   000   000  0000000      000     0000000    0000000   0000000   000   000  000         000     
    # 000        000   000       000     000     000   000  000            000  000   000  000         000     
    # 000         0000000   0000000      000     000   000  00000000  0000000    0000000   0000000     000     
    
    postResult: ->
        
        # lf ">#{@input.current()}<" 
        
        switch @input.current()
            
            '/'  ➜ ⮐ @gotoDirectory '/'
            '~'  ➜ ⮐ @gotoDirectory '~'
            '.'  ➜ ⮐ @gotoDirectory @currentDir
            '..' ➜ ⮐ @gotoDirectory slash.dir(@currentDir)
            
        current = @choices.current()
        # lf 'current choice' current
        
        if empty current and valid @input.current()
            
            ⮐ @gotoFileOrDirectory @input.current()
        
        if current.tilde
            
            ⮐ @gotoFileOrDirectory current.tilde
    
        @returnToEditor()
                     
    returnToEditor: ->

        # lf 'returnToEditor'
        @cells.rows = 0
        post.emit 'focus' 'editor'

        if @choices.num()
            post.emit 'quicky' @currentChoice()
            redraw:false
        else
            redraw:true
            
    currentChoice: -> trim @choices.current()

    # 0000000    00000000    0000000   000   000
    # 000   000  000   000  000   000  000 0 000
    # 000   000  0000000    000000000  000000000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000  00     00

    draw: ->

        ⮐ if @hidden()

        fg = theme.quicky_frame_fg
        bg = theme.quicky_frame_bg

        @cells.draw_frame 0 0 -1 -1 fg:fg bg:bg hdiv:[2]

        @input.draw()
        @choices.draw()

    #  0000000  00000000  000      00000000   0000000  000000000
    # 000       000       000      000       000          000
    # 0000000   0000000   000      0000000   000          000
    #      000  000       000      000       000          000
    # 0000000   00000000  0000000  00000000   0000000     000

    moveSelection: dir ->

        switch dir
            'down'  ➜ @choices.state.selectNextLine()
            'up'    ➜ @choices.state.selectPrevLine()

        @input.set @choices.state.selectedText()
        @input.selectAll()

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    onKey: key event =>

        ⮐ if @hidden()

        switch event.combo
            'esc'       ➜ ⮐ @hide()
            'return'    ➜ ⮐ @postResult()
            'up' 'down' ➜ ⮐ @moveSelection event.combo if @input.state.hasFocus

        ⮐ true if @input.onKey key event
        ⮐ true if @choices.onKey key event
        true

    onMouse: type sx sy event =>

        ⮐ if @hidden()
        ⮐ true if @input.onMouse type sx sy event
        ⮐ true if @choices.onMouse type sx sy event
        true

    onWheel: event =>

        ⮐ if @hidden()

        ⮐ true if @input.onWheel event
        ⮐ true if @choices.onWheel event
        true

export quicky
