###
00     00   0000000   0000000    00000000
000   000  000   000  000   000  000     
000000000  000   000  000   000  0000000 
000 0 000  000   000  000   000  000     
000   000   0000000   0000000    00000000

    the class stores modes per editor state
    the instances handle input and text insertion

    vimple   simple vi
    salter   ascii-header 
    uniko    unicode drawing
    unype    unicode type writer
    record   
###

use ../../kxk ◆ kseg

import fonts from '../util/fonts.json' with { type: "json" }

function mode

    @active: {} # maps editor state names to active mode instances
    @modes: {}  # maps mode names to mode subclasses

    @: @name -> # log "mode: #{@name}"
    
    @names: -> Object.keys mode.modes

    #  ███████  █████████   ███████   ████████   █████████
    # ███          ███     ███   ███  ███   ███     ███   
    # ███████      ███     █████████  ███████       ███   
    #      ███     ███     ███   ███  ███   ███     ███   
    # ███████      ███     ███   ███  ███   ███     ███   
    
    @start: state name ->
    
        ⮐ if @isActive state name
        
        log "mode.start #{name}"
        
        @active[state.name] ?= []
        @active[state.name].push new mode.modes[name] state
        
        log "mode.start" @active[state.name].map((m) -> m.name)
            
    @stop: state name ->
        
        log "mode.stop #{name}"
        
        m = @get state name
        m.stop() if m.stop is func
        
        @active[state.name].splice @active[state.name].indexOf(m) 1
        
        log "mode.stop" @active[state.name].map((m) -> m.name)

    @toggle: state name ->
        
        if @isActive state name
            @stop state name
        else
            @start state name
        
    #  ███████    ███████  █████████  ███  ███   ███  ████████
    # ███   ███  ███          ███     ███  ███   ███  ███     
    # █████████  ███          ███     ███   ███ ███   ███████ 
    # ███   ███  ███          ███     ███     ███     ███     
    # ███   ███   ███████     ███     ███      █      ████████
    
    @isActive: state name -> valid @get(state name)
        
    @get: state name ->
        
        for m in @active[state.name]
            ⮐ m if m.name == name

    # 000  000   000   0000000  00000000  00000000   000000000  
    # 000  0000  000  000       000       000   000     000     
    # 000  000 0 000  0000000   0000000   0000000       000     
    # 000  000  0000       000  000       000   000     000     
    # 000  000   000  0000000   00000000  000   000     000     
    
    @insert: state text ->
        
        # log "@mode.insert #{text}"
        
        for mode in @active[state.name]
            # log "active #{mode.name}"
            if mode.insert is func
                # log "and func #{mode.name}"
                text = mode.insert text
        
        text
        
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    @handleKey: state key event ->
        
        for mode in @active[state.name]
            if mode.handleKey is func
                ⮐ if mode.handleKey(key event) != 'unhandled'
        'unhandled'
            
# ███   ███  ███  ██     ██  ████████   ███      ████████
# ███   ███  ███  ███   ███  ███   ███  ███      ███     
#  ███ ███   ███  █████████  ████████   ███      ███████ 
#    ███     ███  ███ █ ███  ███        ███      ███     
#     █      ███  ███   ███  ███        ███████  ████████

function vimple extends mode
    
    @: -> super 'vimple'

#  ███████   ███████   ███      █████████  ████████  ████████ 
# ███       ███   ███  ███         ███     ███       ███   ███
# ███████   █████████  ███         ███     ███████   ███████  
#      ███  ███   ███  ███         ███     ███       ███   ███
# ███████   ███   ███  ███████     ███     ████████  ███   ███

function salter extends mode

    @: @state -> 
    
        super 'salter'
        @start()
    
    start: -> 
    
        @state.setMainCursor @state.mainCursor()
        @state.expandCursors 'down'
        @state.expandCursors 'down'
        @state.expandCursors 'down'
        @state.expandCursors 'down'
            
    stop: ->
    
        @state.setMainCursor @state.mainCursor()
    
    handleKey: key event ->
        
        switch key
            'esc' ➜ mode.stop @state @name
        
        'unhandled'

# ███   ███  ███   ███  ███  ███   ███   ███████ 
# ███   ███  ████  ███  ███  ███  ███   ███   ███
# ███   ███  ███ █ ███  ███  ███████    ███   ███
# ███   ███  ███  ████  ███  ███  ███   ███   ███
#  ███████   ███   ███  ███  ███   ███   ███████ 

function uniko extends mode

    @: -> super 'uniko'
    
# ███   ███  ███   ███  ███   ███  ████████   ████████
# ███   ███  ████  ███   ███ ███   ███   ███  ███     
# ███   ███  ███ █ ███    █████    ████████   ███████ 
# ███   ███  ███  ████     ███     ███        ███     
#  ███████   ███   ███     ███     ███        ████████

function unype extends mode
    
    @map: {}
    
    @: -> 
    
        super 'unype'
        
        if empty unype.map
            def = fonts.default.join ' '
            for font,text of fonts
                continue if font=='default'
                unype.map[font] = {}
                for char,idx in kseg(text.join(' '))
                    if def[idx] != ' '
                        unype.map[font][def[idx]] = char
            unype.map['full width'][' '] = '　'
    
    insert: text ->
    
        if repl = unype.map['crazy'][text]
            text = repl
        text
    
function record extends mode

    @: -> super 'record'
    
mode.modes = 
    vimple: vimple
    salter: salter
    uniko:  uniko
    unype:  unype
    record: record
    
export mode
