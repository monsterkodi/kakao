
kstr = {}

kstr.splice = s i n ... ->
    
    if i < 0 ➜ i = s.len+i+1
    if i > 1
        ⮐  string.sub(s 1 i-1) & (table.concat({...} '')) & string.sub(s i+n)
    elif i == 1
        ⮐  (table.concat({...} '')) & string.sub(s i+n)
        
kstr.slice  = s f t -> string.sub s f t
        
kstr.shift  = s n=1        -> kstr.splice s 1 n
kstr.pop    = s n=1        -> kstr.splice s,-n n

kstr.lpad   = s n=1 c=" "  ->
kstr.lpad   = l s="" c=' ' ->
    while s.len < l ➜ s = c & s
    s
    
kstr.rpad   = l s="" c=' ' ->  
    while s.len < l ➜ s = s & c
    s
    
kstr.endsWith   = s o -> o == string.sub s s.len-o.len+1 s.len
kstr.startsWith = s o -> o == string.sub s 1 o.len

kstr.rtrim = s c=' ' ->
    while s.len > 0 and (kstr.endsWith(s c) or kstr.endsWith(s "\n"))
        s = kstr.pop s
    s
kstr.ltrim = s c=' ' -> 
    while s.len > 0 and (kstr.startsWith(s c) or kstr.startsWith(s "\n"))
        s = string.sub s 2
    s
kstr.trim = s c=' ' -> kstr.ltrim kstr.rtrim(s,c) c

kstr.chars = s ->

    result = []
    for i in 1..s.len
        result∙push s∙sub(i i)
    result
   
kstr.split = s sep limit ->
    
    if sep == nil ➜ ⮐  { s }
    if sep == ""  ➜ ⮐  kstr.chars s
    
    result = {}
    start = 1
    count = 0
    
    while true
        pos = s∙find(sep start true)

        if limit and count >= limit or not pos
            table.insert result s∙sub(start)
            break
                
        table.insert result s∙sub(start pos - 1)
        start = pos + sep.len
        count = count + 1
    
    result

kstr.find = s c -> string.find(s c 1 true) or -1
    
kstr.rfind = s c ->

    i = s.len+1-c.len
    while i > 0 and string.sub(s i i+c.len-1) != c
        i -= 1
    i >= 1 and i or -1

kstr.index = i ->

    if i is "number"
        switch i
            1 ➜ ⮐  "1st"
            2 ➜ ⮐  "2nd"
            3 ➜ ⮐  "3rd"
              ➜ ⮐  $i & "th"
    i
    
kstr.count = s c ->

    ⮐  0 if empty s
    cnt = 0
    for i in 1..s.len
        if kstr.find(c s∙sub(i i)) >= 0
            cnt += 1
    cnt
    
⮐  kstr