###
 0000000  000000000   0000000   000000000  00000000  
000          000     000   000     000     000       
0000000      000     000000000     000     0000000   
     000     000     000   000     000     000       
0000000      000     000   000     000     00000000  
###

use ../kxk ◆ immutable kstr
use ./act ◆ del insert select join indent
use ◆ syntax 
use ./util ◆ util
use child_process

function state
    
    @: @cells ->
        
        for act in [del insert select join indent]
            for k,v of act
                @[k] = v.bind @
        
        @syntax = new syntax
    
        @s = immutable
            lines:       ['']
            selections:  []
            highlights:  []
            cursor:      [0 0]
            view:        [0 0]
            
        @h = [@s] # undo states (history)
        @r = []   # redo states
            
        @setCursor 0 0
        
    #  0000000  00000000  000000000  
    # 000       000          000     
    # 0000000   0000000      000     
    #      000  000          000     
    # 0000000   00000000     000     
    
    set: item arg =>
        
        switch item 
            'highlights' ➜ arg = util.normalizeSpans arg
            'selections' ➜ arg = util.mergeRanges arg
        
        @s = @s.set item arg
        @h.pop()
        @h.push @s
        @
    
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    clearLines: => 
        
        @setLines ['']
        @setCursor 0 0
    
    setLines: lines =>
        
        @syntax.setLines lines
        
        @s = @s.set 'lines' lines        
        
        @r = []
        @h.push @s
        
    loadLines: lines =>
        
        @r = []
        @h = []
        @setLines lines
        
    isValidLineIndex:   li => 0 <= li < @s.lines.length
    isInvalidLineIndex: li => not @isValidLineIndex li
        
    # 000   000  000   000  0000000     0000000   
    # 000   000  0000  000  000   000  000   000  
    # 000   000  000 0 000  000   000  000   000  
    # 000   000  000  0000  000   000  000   000  
    #  0000000   000   000  0000000     0000000   
    
    undo: =>
        
        ⮐ if @h.length <= 1
        @r.push @h.pop()
        @s = @h[-1]
        @syntax.setLines @s.lines.asMutable()
        
    redo: =>
        
        ⮐ if empty @r
        @h.push @r.pop()
        @s = @h[-1]
        @syntax.setLines @s.lines.asMutable()
        
    begin: => @beginIndex = @h.length
        
    end: => 
        
        if valid @beginIndex
            
            @h.splice @beginIndex @h.length-@beginIndex-1
    
            delete @beginIndex
        
    isDirty: => @h.length > 1
    hasRedo: => @r.length > 0
                
    gutterWidth: => max 4 2 + Math.ceil(Math.log10(@s.lines.length+1))
                
    #  0000000  000   000  000000000  
    # 000       000   000     000     
    # 000       000   000     000     
    # 000       000   000     000     
    #  0000000   0000000      000     
    
    cut: =>
        
        if empty @s.selections
            @selectLine()
            @cut() if valid @s.selections
            ⮐ 
        @copy()
        @deleteSelection()
        
    #  0000000   0000000   00000000   000   000  
    # 000       000   000  000   000   000 000   
    # 000       000   000  00000000     00000    
    # 000       000   000  000           000     
    #  0000000   0000000   000           000     
    
    copy: =>
        
        ⮐ if empty @s.selections
            
        proc = child_process.spawn 'pbcopy'
        proc.stdin.write @textForSelection()
        proc.stdin.end()
            
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    paste: => @insert child_process.execSync('pbpaste').toString("utf8")
        
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
        
    setCursor: x y =>
        
        [x y] = util.pos x y
        
        y = clamp 0 @s.lines.length-1 y
        x = max 0 x
                        
        @set 'cursor' [x y]
        
        view = @s.view.asMutable()
        
        if y >= view[1] + @cells.rows - 1
            view[1] = y - @cells.rows + 1
        else if y < view[1]
            view[1] = y
            
        if view[1] > 0 and @s.lines.length < @cells.rows
            view[1] = 0

        view[0] = max 0 x - @cells.cols + 1
            
        @setView view
            
    moveCursor: dir steps=1 =>
        
        c = @s.cursor.asMutable() 
        
        switch dir
            'left'  ➜ c[0] -= 1
            'right' ➜ c[0] += 1
            'up'    ➜ c[1] -= steps
            'down'  ➜ c[1] += steps 
            'eol'   ➜ c[0] = @s.lines[c[1]].length
            'bol'   ➜ c[0] = 0
            'eof'   ➜ c[1] = @s.lines.length-1; c[0] = @s.lines[c[1]].length
        
        @setCursor c[0] c[1]
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    moveCursorAndSelect: dir =>
        
        selections = @s.selections.asMutable()
        selection = [@s.cursor[0] @s.cursor[1] @s.cursor[0] @s.cursor[1]]
        selections.push selection 
        
        @moveCursor dir 1
        
        switch dir
            'left'  ➜ selection[0] = selection[0]-1
            'right' ➜ selection[2] = selection[2]+1
            'up'    ➜ selection[1] = max 0 selection[1]-1
            'down'  ➜ selection[3] = min @s.lines.length-1 selection[3]+1
            'eol'   ➜ selection[2] = Infinity
            'bol'   ➜ selection[0] = 0
            'bof'   ➜ selection[1] = 0; selection[0] = 0
            'eof'   ➜ selection[3] = @s.lines.length-1; selection[2] = @s.lines[@s.lines.length-1].length
            
        selection[0] = clamp 0 @s.lines[selection[1]].length selection[0]
        selection[2] = clamp 0 @s.lines[selection[3]].length selection[2]
        
        @set 'selections' selections
        @
        
    #  0000000   0000000  00000000    0000000   000      000      
    # 000       000       000   000  000   000  000      000      
    # 0000000   000       0000000    000   000  000      000      
    #      000  000       000   000  000   000  000      000      
    # 0000000    0000000  000   000   0000000   0000000  0000000  
    
    scrollView: dir steps=1 =>
        
        sx = sy = 0
        
        switch dir
            'left'  ➜ sx = -1
            'right' ➜ sx =  1
            'up'    ➜ sy = -steps
            'down'  ➜ sy =  steps 
        
        view = @s.view.asMutable()
        
        view[0] += sx
        view[1] += sy
        
        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows) view[1]
        view[0] = max 0 view[0]
            
        @setView view
        
    adjustView: =>
        
        view = @s.view.asMutable()
        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows) view[1]
        view[0] = max 0 view[0]
        
        @setView view
        
    setView: view => 
    
        @set 'view' view
        @
                
    rangeForVisibleLines: =>
        
        [@s.view[0] @s.view[1] @s.view[0]+@cells.cols-1 @s.view[1]+@cells.rows-1]
                                    
export state
