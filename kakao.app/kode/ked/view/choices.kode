###
 0000000  000   000   0000000   000   0000000  00000000   0000000
000       000   000  000   000  000  000       000       000
000       000000000  000   000  000  000       0000000   0000000
000       000   000  000   000  000  000       000            000
 0000000  000   000   0000000   000   0000000  00000000  0000000
###

use ../../kxk ▪ kstr slash krzl
use ..        ◆ editor theme

function choices extends editor

    @: screen name ->

        super screen name ['scrllr' 'mapview']
        
    set: @items @key -> 
        
        @fuzzied = @items
        
        lines = @key ? @items.map(@extract) : @items
        
        @state.loadLines lines

    num: -> @fuzzied.length

    current: -> @fuzzied[@state.mainCursor()[1]]
    
    selectNext: -> @state.selectNextLine() ; @frontCursor()
    selectPrev: -> @state.selectPrevLine() ; @frontCursor()
    
    frontCursor: -> 
        
        @state.setMainCursor 0 @state.mainCursor()[1]
    
    extract: item => @key and item is obj ? item[@key] : item        
        
    weight: item text =>

        item = @extract item
        p = slash.parse item

        idx = item.indexOf text
        idx = item.length*2 if idx < 0
        w  = 0
        w += idx
        w += kstr.levensthein p.name text
        w += kstr.levensthein p.dir  text
        w += kstr.levensthein p.ext  text
        w

    filter: text =>

        ⮐ if empty @items

        if empty text
            ⮐ @set @items @key

        fuzz = new krzl values:@items extract:@extract
        
        @fuzzied = fuzz.filter text

        @fuzzied.sort (a b) => @weight(a text) - @weight(b text)
        
        lines = @fuzzied.map @extract

        lines = [''] if empty lines

        @state.loadLines lines
        
export choices
