###
    ██     ██   ███████   ████████    ███████   ███████  ████████   
    ███   ███  ███   ███  ███   ███  ███       ███       ███   ███  
    █████████  █████████  ████████   ███████   ███       ███████    
    ███ █ ███  ███   ███  ███             ███  ███       ███   ███  
    ███   ███  ███   ███  ███        ███████    ███████  ███   ███  

    scrollable source map to the right of the fileeditor
###

# use                 ◆ mapview
use view.editor.mapview

class mapscr extends mapview

    @: editor ->
    
        @editor = editor
        
        mapview.init @ @editor.state
        
        @state∙on 'view.changed' @drawKnob @
        
        @pointerType = 'pointer'
        
        # @knobId = @imgId+0xeeee
        
        @topLine    = 1 # index of first visible line
        @botLine    = 0 # index of last visible line
        @knobHeight = 0 # height of the knob in pixels
        @mapWidth   = 0 # width of the map in pixels
        @mapHeight  = 0 # height of the map in pixels
        @linesInMap = 0 # number of lines that fit into map
        
        @setColor 'bg'        theme.editor.mapscr
        @setColor 'highlight' theme.highlight.map
        @setColor 'selection' theme.selection.map
        @setColor 'fullysel'  theme.selection.mapfully
        
        # @screen.t∙on 'preResize' @clearImages @
        
        post∙on 'greet.show' @hide @
        post∙on 'greet.hide' @show @
        post∙on 'popup.hide' @show @
        post∙on 'popup.show' @onPopup @
        
        @editor.state∙on 'lines.changed' @onLinesChanged @
        
        @calcView()
        
    onPopup: name ->
    
        @hide() if ['differ' 'searcher']∙has(name)
        @show() if name == 'finder'
        
    # ███      ███  ███   ███  ████████   ███████         ███████  ███   ███   ███████   ███   ███   ███████   ████████  ███████  
    # ███      ███  ████  ███  ███       ███             ███       ███   ███  ███   ███  ████  ███  ███        ███       ███   ███
    # ███      ███  ███ █ ███  ███████   ███████         ███       █████████  █████████  ███ █ ███  ███  ████  ███████   ███   ███
    # ███      ███  ███  ████  ███            ███        ███       ███   ███  ███   ███  ███  ████  ███   ███  ███       ███   ███
    # ███████  ███  ███   ███  ████████  ███████          ███████  ███   ███  ███   ███  ███   ███   ███████   ████████  ███████  

    onLinesChanged: diff ->
        
        if diff.del.length == 0 == diff.chg.length
            @reload()
        else
            if diff.chg.length and diff.del.length == 0 == diff.ins.length
                for cli in diff.chg
                    @updateLine cli
            else
                minLine = @state.s.lines.length
                if diff.ins.length
                    minLine = min minLine diff.ins[1] 
                if diff.del.length
                    minLine = min minLine diff.del[1] 
                for cli in diff.chg
                    break if cli >= minLine
                    @updateLine cli
                @updateFromLine minLine
        
    getSegls:  -> @state.segls
    getSyntax: -> @state.syntax
    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event ->
        
        mapview.onMouse @ event
        
        switch event.type
            
            'press'
            
                if @hover
                    @doDrag = true
                    post∙emit 'pointer''grabbing'
                    ⮐  @scrollToPixel event.pixel
                    
            'drag'
            
                if @doDrag
                    post∙emit 'pointer''grab'
                    ⮐  @scrollToPixel event.pixel
                    
                @hover = false
                
            'release'
            
                if @doDrag
                    @doDrag = nil
                    if @hover
                        post∙emit 'pointer''pointer' 
                    ⮐  true
        @hover
    
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: ->
        
        # @csz = @cells.screen.t.cellsz
        
        # ⮐  if empty @csz
        
        @calcView()
        @redraw = true
        
    #  0000000   0000000  00000000    0000000   000      000      000000000   0000000   
    # 000       000       000   000  000   000  000      000         000     000   000  
    # 0000000   000       0000000    000   000  000      000         000     000   000  
    #      000  000       000   000  000   000  000      000         000     000   000  
    # 0000000    0000000  000   000   0000000   0000000  0000000     000      0000000   
    
    scrollToPixel: pixel ->
        
        view = @state.s.view∙arr()
        
        li   = @topLine + int((pixel[2] - @mapY) / @pixelsPerRow)
        
        view[2] = li
        view[2] -= 5 # offset so that clicking inside a header scrolls it into view
        
        maxY = @state.s.lines∙len() - @cells.rows
        if maxY > 0
            view[2] = min maxY view[2] 
        view[2] = max 1 view[2]
        
        mc = @state.mainCursor()
        
        if view eql @state.s.view
            if li != mc[2]
                @state.setCursors [[mc[1] li+5]] {main:1 adjust:false}
                ⮐  true
            ⮐  
        
        @state.setView view
        @state.setCursors [[mc[1] li+5]] {main:1 adjust:false}
        
        @drawKnob()
        true
        
    #  ███████   ███████   ███       ███████  ███   ███  ███  ████████  ███   ███
    # ███       ███   ███  ███      ███       ███   ███  ███  ███       ███ █ ███
    # ███       █████████  ███      ███        ███ ███   ███  ███████   █████████
    # ███       ███   ███  ███      ███          ███     ███  ███       ███   ███
    #  ███████  ███   ███  ███████   ███████      █      ███  ████████  ██     ██

    calcView: ->
        
        cw = _G.screen.cw
        ch = _G.screen.ch
        
        @mapX       = @cells.x*cw
        @mapY       = @cells.y*ch
        
        @mapHeight  = @cells.rows * ch
        @mapWidth   = @cells.cols * cw
        
        @mapBot     = @mapY + @mapHeight - @pixelsPerRow
        
        @linesInMap = int @mapHeight / @pixelsPerRow
        @knobHeight = @state.cells.rows * @pixelsPerRow
        
        editorLinesHeight = @state.s.lines∙len() * @pixelsPerRow
        if editorLinesHeight > @mapHeight and @state.s.view[2] > 0
            maxOffset  = @state.s.lines∙len() - @linesInMap
            viewFactor = @state.s.view[2] / (@state.s.lines∙len() - @cells.rows)
            @topLine   = int viewFactor * maxOffset
        else
            @topLine = 1 
            
        @botLine = min @state.s.lines∙len() @topLine+@linesInMap 

    lineOffset: y -> (y-@topLine)*@pixelsPerRow
        
    pixelPos: pos -> (@mapX + pos[1]*@pixelsPerCol, @mapY + @lineOffset(pos[2]))
    
    maxLinesToLoad: -> 2000
    
    ###
    ███████    ████████    ███████   ███   ███
    ███   ███  ███   ███  ███   ███  ███ █ ███
    ███   ███  ███████    █████████  █████████
    ███   ███  ███   ███  ███   ███  ███   ███
    ███████    ███   ███  ███   ███  ██     ██
    ###
    
    draw: ->
        
        ⮐  if @hidden() or @collapsed()
        
        mapview.draw @
        
        if @csz
        
            @drawCursors()    
            @drawHighlights() 
            
        @render()

    # ███  ██     ██   ███████    ███████   ████████   ███████
    # ███  ███   ███  ███   ███  ███        ███       ███     
    # ███  █████████  █████████  ███  ████  ███████   ███████ 
    # ███  ███ █ ███  ███   ███  ███   ███  ███            ███
    # ███  ███   ███  ███   ███   ███████   ████████  ███████ 

    drawImages: ->
        
        # t = @cells.screen.t
        
        ⮐  if @hidden() or @collapsed()
        
        for y in @topLine..@botLine
            log "draw map line #{y}"
            # id = @images[y]
            # t.placeLineImage id @cells.x @cells.y @lineOffset(y) @pixelsPerRow
            
        # if @topLine
        #     t.hideImagesInRange @images[1] @images[@topLine-1]
        # if @botLine < @images.length
        #     t.hideImagesInRange @images[@botLine] @images[-1]
        
        @drawKnob()
                
    # ███   ███  ███   ███   ███████   ███████  
    # ███  ███   ████  ███  ███   ███  ███   ███
    # ███████    ███ █ ███  ███   ███  ███████  
    # ███  ███   ███  ████  ███   ███  ███   ███
    # ███   ███  ███   ███   ███████   ███████  

    drawKnob: ->
    
        @calcView()
                
        ⮐  if empty @csz or @hidden() or @collapsed()
        
        ky = @lineOffset @state.s.view[2]
        
        # @cells.screen.t.placeImageOverlay @knobId @cells.x @cells.y ky @mapWidth @knobHeight

    hide: ->
    
        ⮐  if @hidden()
        
        # @cells.screen.t.hideImageOverlay @knobId
        
        mapview.hide @
        
    #  ███████  ███   ███  ████████    ███████   ███████   ████████    ███████
    # ███       ███   ███  ███   ███  ███       ███   ███  ███   ███  ███     
    # ███       ███   ███  ███████    ███████   ███   ███  ███████    ███████ 
    # ███       ███   ███  ███   ███       ███  ███   ███  ███   ███       ███
    #  ███████   ███████   ███   ███  ███████    ███████   ███   ███  ███████ 

    drawCursors: ->
        
        for idx pos in @state.s.cursors
        
            (sx sy) = @pixelPos pos 
            
            if sy >= @mapY and sy <= @mapBot and sx >= @mapX and sx <= @mapX + @mapWidth
        
                if idx == @state.s.main
                    fg = theme.cursor.main
                    sw = @pixelsPerCol*2
                    sx -= int @pixelsPerCol/2
                else
                    fg = theme.cursor.multi
                    sw = @pixelsPerCol
                    
                # squares.place sx sy sw @pixelsPerRow fg
                
                # if idx == @state.s.main
                #     squares.place @cells.x*@csz[0]+@mapWidth-@pixelsPerCol*4 sy @pixelsPerCol*4 @pixelsPerRow fg 2002

    # 000   000  000   0000000   000   000  000      000   0000000   000   000  000000000   0000000  
    # 000   000  000  000        000   000  000      000  000        000   000     000     000       
    # 000000000  000  000  0000  000000000  000      000  000  0000  000000000     000     0000000   
    # 000   000  000  000   000  000   000  000      000  000   000  000   000     000          000  
    # 000   000  000   0000000   000   000  0000000  000   0000000   000   000     000     0000000   
    
    drawHighlights: ->
        
        mc = @state∙mainCursor()
        
        xoff = @mapX + @mapWidth
        selw = @pixelsPerCol*16
        hlw  = @pixelsPerCol*8
        sels = @state.s.selections∙arr()
        for li in belt.lineIndicesForRanges(sels)∙each()
                
            sy = @mapY + @lineOffset(li)
            
            if sy >= @mapY and sy <= @mapBot
            
                if @state.isSpanSelectedLine li 
                    clr = @color.selection
                else
                    clr = @color.fullysel
                    
                # squares.place xoff-selw sy selw @pixelsPerRow clr 2000
    
        hils = @state.s.highlights∙arr()
        for li in belt.lineIndicesForSpans(hils)∙each()
        
            sy = @mapY + @lineOffset(li) 
            if sy >= @mapY and sy <= @mapBot
                _ = nil
                # squares.place xoff-hlw sy hlw @pixelsPerRow @color.highlight 2001

⮐  mapscr
