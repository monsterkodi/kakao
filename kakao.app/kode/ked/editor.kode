###
00000000  0000000    000  000000000   0000000   00000000 
000       000   000  000     000     000   000  000   000
0000000   000   000  000     000     000   000  0000000  
000       000   000  000     000     000   000  000   000
00000000  0000000    000     000      0000000   000   000
###

use ../kxk ◆ events matchr kstr kseg post
use ./util ◆ util color
use ./view ◆ view scroll gutter mapscr mapview
use        ◆ state theme

function editor extends view

    @: screen name features ->
        
        super screen name features
        
        @state = new state @cells @name
        
        post.on 'focus' @onFocus
        
        if @name == 'editor'
            post.on 'finder.apply' @onFinderApply 
        
        if @feats.scrllr  ➜ @scroll = new scroll  @screen @state
        if @feats.scroll  ➜ @scroll = new scroll  @screen @state
        if @feats.gutter  ➜ @gutter = new gutter  @screen @state
        if @feats.mapscr  ➜ @mapscr = new mapscr  @screen @state; @mapscr.show()
        if @feats.mapview ➜ @mapscr = new mapview @screen @state
                
    # 000  000   000  000  000000000  
    # 000  0000  000  000     000     
    # 000  000 0 000  000     000     
    # 000  000  0000  000     000     
    # 000  000   000  000     000     
    
    layout: x y w h =>
        
        g = m = s = 0
        sl = sr = 0
        
        if @scroll
            s = 1
            if @feats.scrllr
                sr = s
                @scroll.layout x+w-sr y   s   h 
            else
                sl = s
                @scroll.layout x      y   s   h 
            
        if @gutter
            g = @state.gutterWidth()
            @gutter.layout    x+sl    y   g   h
            
        if @mapscr
            m = @mapscr.visible() ? 10 : 0
            r = @mapscr.visible() ? h : 0
            # lf 'editor.layout.mapscr' @name @mapscr.visible() x+w-sr-10 y m r
            @mapscr.layout x+w-sr-10   y   m   r
            
        @cells.layout x+sl+g  y   w-s-g-m    h
        @state.initView()
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: =>
        
        ⮐ if @hidden()
                
        syntax     = @state.syntax
        s          = @state.s
        view       = s.view.asMutable()
        lines      = @state.allLines()
        mainCursor = @state.mainCursor()
        
        bg = theme[@name] ? theme['editor']
        
        for row in 0...@cells.rows
            
            y = row+view[1]
            break if y >= lines.length
            
            line  = lines[y]
            linel = kseg.width(line) - view[0]
            
            x = c = 0
            while x < @cells.cols
                
                ci = x+view[0]
                si = kseg.segiAtWidth line ci
                break if si >= line.length

                fg = syntax.getColor ci y
                ch = syntax.getChar ci y line[si]
                if ch == "#" ➜ checkColor = true
                c += @cells.add c row ch fg bg
                x += kseg.width(line[si]) ? 1
                    
            emptyColor = theme[@name + '_empty']
            
            if y == mainCursor[1]
                if linel > 0
                    @cells.bg_rect 0 row linel row theme[@name + '_cursor_main']
                @cells.bg_fill max(0 linel) row -1 row theme[@name + '_cursor_empty']
            else
                if linel > 0
                    @cells.bg_rect 0 row linel row theme[@name]
                @cells.bg_fill max(0 linel) row -1 row emptyColor
                
            @drawColors line row linel emptyColor if checkColor

        if lines.length - view[1] < @cells.rows # fill empty rows below last line
            for row in lines.length-view[1]...@cells.rows
                @cells.bg_fill 0 row -1 row emptyColor            
            
        bg = theme.highlight
        bg = color.darken bg if not @cells.screen.t.hasFocus
                                
        for highlight in s.highlights
            
            y = highlight[1]-view[1]
            
            break if y >= @cells.rows
                
            for x in highlight[0]...highlight[2]
                
                @cells.set_bg x-view[0] y bg
                @cells.set_char x-view[0] y color.ul_rgb('ffffff')+'\x1b[4:1m'+@cells.get_char(x-view[0] y)+'\x1b[4:0m'
                    
        for selection in s.selections
            
            for li in selection[1]..selection[3]
                
                y = li-view[1]
                
                break if y >= @cells.rows
                
                if li == selection[1]
                    xs = selection[0]
                else
                    xs = 0
                    
                if li == selection[3]
                    xe = selection[2]
                else
                    xe = kseg.width(lines[li])

                bg = util.isSpanLineRange(lines selection) ? theme.selection : theme.selection_line
                bg = color.darken bg if not @cells.screen.t.hasFocus
                
                for x in xs...xe
                    @cells.set_bg x-view[0] y bg 
                            
        fg = theme[@name + '_cursor_fg'] ? theme['editor_cursor_fg']
        bg = theme[@name + '_cursor_multi'] ? theme['editor_cursor_multi']
        bg = color.darken bg if not @cells.screen.t.hasFocus
        
        for cursor in s.cursors
 
            continue if cursor eql mainCursor
            
            if @isCursorVisible cursor
             
                x = cursor[0]-view[0]
                y = cursor[1]-view[1]
                 
                @cells.set_bg x y bg
                @cells.set_fg x y fg
                            
        if @isCursorVisible()
             
            fg  = theme[@name    + '_cursor_fg']
            fg ?= theme['editor' + '_cursor_fg']
            bg  = theme[@name    + (@hasFocus() ? '_cursor_bg' : '_cursor_blur')]
            bg ?= theme['editor' + (@hasFocus() ? '_cursor_bg' : '_cursor_blur')]
             
            x = mainCursor[0]-view[0]
            y = mainCursor[1]-view[1]
             
            if s.cursors.length <= 1
                if @isCursorInEmpty()
                    bg = color.darken bg 0.7
                else if ' ' == @cells.get_char(x y)
                    bg = color.darken bg 0.8
                     
            bg = color.darken bg if not @cells.screen.t.hasFocus
                 
            @cells.set_bg x y bg
            @cells.set_fg x y fg

        @scroll?.draw()
        @gutter?.draw()
        @mapscr?.draw()
        
        super()

    #  0000000   0000000   000       0000000   00000000    0000000  
    # 000       000   000  000      000   000  000   000  000       
    # 000       000   000  000      000   000  0000000    0000000   
    # 000       000   000  000      000   000  000   000       000  
    #  0000000   0000000   0000000   0000000   000   000  0000000   
    
    drawColors: line row linel emptyColor ->
        
        if rngs = kstr.colorRanges kseg.str(line)
            cx = max(0 linel)+1
            for rng,idx in rngs
                clr = color.rgb rng.color
                dta = 4
                if idx == 0             ➜ @cells.set cx row '' clr emptyColor; cx += 1; dta--
                if idx == rngs.length-1 ➜ dta--
                @cells.bg_rect cx row cx+dta row rng.match; cx += dta
                if idx == rngs.length-1 ➜ @cells.set cx row '' clr emptyColor
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        ⮐ true if @mapscr?.onMouse? event
        ⮐ true if @scroll?.onMouse  event
        ⮐ true if super             event
        
        [col row] = @cells.posForEvent event
        
        switch event.type
            
            'press'
            
                if @cells.isOutsideEvent event
                    ⮐ if not @gutter?.cells.isInsideEvent event
                        
                if event.count > 1

                    @state.deselect() if not event.shift
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    if event.count == 2
                        if event.alt
                            @state.selectChunk x y
                        else
                            @state.selectWord x y
                    else
                        @state.selectLine y
                        
                    @dragStart = copy @state.s.selections[0]
                    
                    true
                    
                else
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    @dragStart = [x y x]
                                        
                    @state.deselect() if not event.shift
                    @state.clearCursors() if not event.alt

                    if event.alt
                        @state.addCursor x y
                    else
                        if event.shift and @state.s.cursors.length == 1
                            @state.setMainCursorAndSelect x y
                        else
                            @state.setMainCursor x y
                    
                    @grabFocus()
                    
                    ⮐ true
                    
            'drag'
            
                if @dragStart
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    start = [@dragStart[0] @dragStart[1]]
                    
                    if y < @dragStart[1] 
                        start = [@dragStart[2] @dragStart[1]]
                    
                    if event.shift ➜ @state.addRangeToSelectionWithMainCursorAtEnd util.rangeFromStartToEnd(start [x y])
                    else             @state.select start [x y]
                        
                    ⮐ true
                    
            'release'
            
                delete @dragStart
                
            'move'
                
                if @cells.isInsideEvent event
                    post.emit 'pointer' 'text'
                else if @gutter?.cells.isInsideEvent event
                    post.emit 'pointer' 'vertical-text'
                
        false
                
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: event =>
        
        ⮐ if event.cell[1] >= @cells.y + @cells.rows
        
        if @name == 'editor' # this sucks! consider a separate main editor class
        
            steps  = 1 # should be 4 if not using a mouse pad -> config
            steps *= 2 if event.shift
            steps *= 2 if event.ctrl
            steps *= 2 if event.alt
            
            if @dragStart
                
                [x y] = @state.mainCursor()
                
                switch event.dir
                    'up'    ➜ y -= steps    
                    'down'  ➜ y += steps    
                    'left'  ➜ x -= 1    
                    'right' ➜ x += 1    
                    
                y = clamp 0 @state.s.lines.length-1 y
                x = clamp 0 @state.s.lines[y].length-1 x
                
                start = [@dragStart[0] @dragStart[1]]
                
                if y < @dragStart[1] 
                    start = [@dragStart[2] @dragStart[1]]
                
                if @state.select start [x y]
                    @redraw()
                ⮐ 
                
        
        [col row] = @cells.posForEvent event
        
                
        ⮐ if not @cells.isInsideEvent event
                
        switch event.dir
            'up' 'down' 'left' 'right' ➜ @state.scrollView event.dir steps
            
        @redraw()

    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
            
    isCursorInEmpty: cursor =>
        
        cursor ?= @state.mainCursor()
        
        util.isLinesPosOutside @state.s.lines cursor
        
    isCursorVisible: cursor =>
        
        cursor ?= @state.mainCursor()
                
        v = @state.s.view
        
        v[0] <= cursor[0] < v[0] + @cells.cols and v[1] <= cursor[1] < v[1] + @cells.rows
        
    # 00000000   0000000    0000000  000   000   0000000  
    # 000       000   000  000       000   000  000       
    # 000000    000   000  000       000   000  0000000   
    # 000       000   000  000       000   000       000  
    # 000        0000000    0000000   0000000   0000000   
    
    grabFocus: =>
    
        lf "grabFocus #{@name}"
        post.emit 'focus' @name
        @redraw()
        
    hasFocus: ->
        
        @state.hasFocus
        
    onFocus: name =>
        
        lf "onFocus #{@name} #{name}"
        
        @state.hasFocus = (name == @name)
        
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: => post.emit 'redraw'
    
    onFinderApply: text => 
    
        @state.highlightText text
        @state.moveCursorToNextHighlight()
                
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        ⮐ if not @hasFocus()
        
        # lc 'key' key
        
        if @state.s.cursors.length == 1
            
            switch key
                                
                'ctrl+alt+up'               ➜ ⮐ @state.moveCursors 'up'    count:8
                'ctrl+alt+down'             ➜ ⮐ @state.moveCursors 'down'  count:8
                'ctrl+alt+left'             ➜ ⮐ @state.moveCursors 'left'  count:8
                'ctrl+alt+right'            ➜ ⮐ @state.moveCursors 'right' count:8
        
                'shift+ctrl+alt+up'         ➜ ⮐ @state.moveCursors 'up'    count:16
                'shift+ctrl+alt+down'       ➜ ⮐ @state.moveCursors 'down'  count:16
                'shift+ctrl+alt+left'       ➜ ⮐ @state.moveCursors 'left'  count:16
                'shift+ctrl+alt+right'      ➜ ⮐ @state.moveCursors 'right' count:16
        
        switch key

            'up'                        ➜ ⮐ @state.moveCursors 'up'   
            'down'                      ➜ ⮐ @state.moveCursors 'down' 
            'left'                      ➜ ⮐ @state.moveCursors 'left' 
            'right'                     ➜ ⮐ @state.moveCursors 'right'
            
            'cmd+left'  'ctrl+left'     ➜ ⮐ @state.moveCursors ['bos' 'ind_bol']
            'cmd+right' 'ctrl+right'    ➜ ⮐ @state.moveCursors ['eos' 'ind_eol']
            
            'alt+left'                  ➜ ⮐ @state.moveCursors 'left'  jump:['ws' 'word' 'empty' 'punct']
            'alt+right'                 ➜ ⮐ @state.moveCursors 'right' jump:['ws' 'word' 'empty' 'punct']
            'shift+alt+right'           ➜ ⮐ @state.moveCursorsAndSelect 'right' jump:['ws' 'word' 'empty' 'punct']
            'shift+alt+left'            ➜ ⮐ @state.moveCursorsAndSelect 'left'  jump:['ws' 'word' 'empty' 'punct']
            
            'shift+up'                  ➜ ⮐ @state.moveCursorsAndSelect 'up'
            'shift+down'                ➜ ⮐ @state.moveCursorsAndSelect 'down'
            'shift+left'                ➜ ⮐ @state.moveCursorsAndSelect 'left'
            'shift+right'               ➜ ⮐ @state.moveCursorsAndSelect 'right'
            'shift+cmd+right'           ➜ ⮐ @state.moveCursorsAndSelect 'ind_eol'
            'shift+cmd+left'            ➜ ⮐ @state.moveCursorsAndSelect 'ind_bol'
            'shift+ctrl+h'              ➜ ⮐ @state.moveCursorsAndSelect 'bof'
            'shift+ctrl+j'              ➜ ⮐ @state.moveCursorsAndSelect 'eof'
                        
            'shift+alt+cmd+up'          ➜ ⮐ @state.moveMainCursorInDirection 'up'    keep:true # 'paint' cursors
            'shift+alt+cmd+down'        ➜ ⮐ @state.moveMainCursorInDirection 'down'  keep:true # 'paint' cursors
            'shift+alt+cmd+left'        ➜ ⮐ @state.moveMainCursorInDirection 'left'  keep:true # 'paint' cursors
            'shift+alt+cmd+right'       ➜ ⮐ @state.moveMainCursorInDirection 'right' keep:true # 'paint' cursors
            
            'alt+up'                    ➜ ⮐ @state.moveSelectionOrCursorLines 'up'
            'alt+down'                  ➜ ⮐ @state.moveSelectionOrCursorLines 'down'
            'shift+alt+up'              ➜ ⮐ @state.cloneSelectionAndCursorLines 'up'
            'shift+alt+down'            ➜ ⮐ @state.cloneSelectionAndCursorLines 'down'

            'cmd+up'   'ctrl+up'               ➜ ⮐ @state.expandCursors   'up'
            'cmd+down' 'ctrl+down'             ➜ ⮐ @state.expandCursors   'down'
            'shift+cmd+up'   'shift+ctrl+up'   ➜ ⮐ @state.contractCursors 'up'
            'shift+cmd+down' 'shift+ctrl+down' ➜ ⮐ @state.contractCursors 'down'

            'pageup'                    ➜ ⮐ @state.singleCursorPage 'up'
            'pagedown'                  ➜ ⮐ @state.singleCursorPage 'down'

            'home'                      ➜ ⮐ @state.singleCursorAtIndentOrStartOfLine()
            'end'                       ➜ ⮐ @state.singleCursorAtEndOfLine()
            
            'ctrl+h'                    ➜ ⮐ @state.setMainCursor 0 0
            'ctrl+j'                    ➜ ⮐ @state.setMainCursor @state.s.lines[@state.s.lines.length-1].length @state.s.lines.length-1
            
            'alt+d'                     ➜ ⮐ @state.delete 'next' true
            'shift+ctrl+k' 'entf'       ➜ ⮐ @state.delete 'next'
            'ctrl+k'                    ➜ ⮐ @state.delete 'eol'
            'delete'                    ➜ ⮐ @state.delete 'back'
            'ctrl+delete'               ➜ ⮐ @state.delete 'back' true
            'cmd+delete'                ➜ ⮐ @state.delete 'back' true
            
            'shift+tab'                 ➜ ⮐ @state.deindentSelectedOrCursorLines()
            'tab'                       ➜ ⮐ @state.insert '\t'
                                    
            'alt+x' 'cmd+x' 'ctrl+x'    ➜ ⮐ @state.cut()     
            'alt+c' 'cmd+c' 'ctrl+c'    ➜ ⮐ @state.copy()        
            'alt+v' 'cmd+v' 'ctrl+v'    ➜ ⮐ @state.paste()
                           
            'cmd+z' 'ctrl+z'            ➜ ⮐ @state.undo()
            'shift+cmd+z'
            'cmd+y' 'ctrl+y'            ➜ ⮐ @state.redo()
                        
            'cmd+a'       'ctrl+a'       ➜ ⮐ @state.selectAllLines()
            'cmd+j'       'ctrl+j'       ➜ ⮐ @state.joinLines()
            'cmd+l'       'ctrl+l'       ➜ ⮐ @state.selectMoreLines()
            'shift+cmd+l' 'shift+ctrl+l' ➜ ⮐ @state.selectLessLines()

            
            'cmd+e' 'ctrl+e'             ➜ ⮐ @state.highlightWordAtCursor_deselectCursorHighlight_moveCursorToNextHighlight()
            'cmd+d' 'ctrl+d'             ➜ ⮐ @state.selectWordAtCursor_highlightSelection_addNextHighlightToSelection()
            'cmd+g' 'ctrl+g'             ➜ ⮐ @state.selectWordAtCursor_highlightSelection_selectNextHighlight()
            
            'shift+cmd+e' 'shift+ctrl+e' ➜ ⮐ @state.highlightWordAtCursor_deselectCursorHighlight_moveCursorToPrevHighlight()
            'shift+cmd+d' 'shift+ctrl+d' ➜ ⮐ @state.selectWordAtCursor_highlightSelection_addPrevHighlightToSelection()
            'shift+cmd+g' 'shift+ctrl+g' ➜ ⮐ @state.selectWordAtCursor_highlightSelection_selectPrevHighlight()

            'alt+cmd+d' 'alt+ctrl+d'    ➜ ⮐ @state.selectWordAtCursor_highlightSelection_selectAllHighlights()

            'cmd+/' 'ctrl+/'            ➜ ⮐ @state.toggleCommentAtSelectionOrCursorLines()
            
            'esc'                       ➜ ⮐ @state.clearCursorsHighlightsAndSelections()

        if valid event.char
            @state.insert event.char
        else
            if key not in ['shift' 'ctrl' 'alt' 'cmd'] 
                lfc 'editor.onKey?' key

export editor
