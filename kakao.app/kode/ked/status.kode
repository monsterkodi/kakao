###
 0000000  000000000   0000000   000000000  000   000   0000000  
000          000     000   000     000     000   000  000       
0000000      000     000000000     000     000   000  0000000   
     000     000     000   000     000     000   000       000  
0000000      000     000   000     000      0000000   0000000   
###

use ◆ color

function status

    @: @cells @state ->
        
        @file = ''
        @drawTime = ''
        
    draw: =>
        
        y = @cells.t.rows()-1
        gutter = @state.s.gutter
        cursor = @state.s.cursor
        cols = @cells.cols
        
        @cells.set 0 y '' color.status_dark color.gutter
        
        colno = rpad gutter-1 cursor[0] + 1
        for x in 1...gutter
            fg = cursor[0] ? color.status_fg : color.column_fg
            if cursor[1] < @state.s.lines.length
                if cursor[0] > @state.s.lines[cursor[1]].length
                    fg = color.status_empty
            @cells.set x y (x < colno.length ? colno[x-1] : ' ') fg color.status_dark
                
        x = gutter
        @cells.set x y '' color.status color.status_dark
                
        if @state.isDirty()
            @cells.set gutter+1 y '' color.status_fg color.status
        else
            @cells.set gutter+1 y '' color.status_dark color.status
            
        @cells.set gutter+2 y ' ' color.status_fg color.status
            
        for x in gutter+3...gutter+1+@file.length+2
            char = (x-gutter-3 < @file.length) ? @file[x-gutter-3] : ' '
            @cells.set x y char color.status_fg color.status
                
        x = gutter+3+@file.length
        @cells.set x y '' color.status color.status_dark

        for x in gutter+4+@file.length...cols-1
            @cells.set x y ' ' null color.status_dark
                
        @cells.c[y][cols-1].bg = color.status_dark
                
        if valid @drawTime and cols-gutter+2+@file.length > @drawTime.length+1
            
            x = cols-@drawTime.length-2
            @cells.set x y '' color.status color.status_dark
            
            for i in 0...@drawTime.length
                x = cols-@drawTime.length+i-1
                fg = i < @drawTime.length-3 ? color.status_fg : color.status_fg_dim
                @cells.set x y @drawTime[i] fg color.status
        
        else
            x = cols-2
            @cells.set x y '' color.status color.status_dark
                
        x = cols-1
        @cells.set x y '' color.status color.editor_empty
            
        if @state.s.selections.length

            sel = "#{@state.s.selections.length} sel"
             
            for i in 0...sel.length
                x = cols-@drawTime.length+i-sel.length-3
                fg = i < sel.length-4 ? color.status_sel : color.status_fg_dim
                @cells.set x y sel[i] fg color.status_dark
            
export status

