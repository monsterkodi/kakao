###
    000   000  000   000  00000000   0000000    
    000  000   0000  000  000   000  000   000  
    0000000    000 0 000  0000000    000   000  
    000  000   000  0000  000   000  000   000  
    000   000  000   000  000   000  0000000    

    transpiles kode, noon, styl and pug files
###

use ../kode/kode
use ../kxk/slash ‚ñ™ tilde
use ../kxk ‚óÜ fs pug styl noon

kodeDir = slash.path ‚óÜdir, '/../../kode'
pygDir  = slash.path ‚óÜdir, '/../../pyg'
jsDir   = slash.path ‚óÜdir, '/../../js'

# 00000000   000   000  000      00000000   0000000  
# 000   000  000   000  000      000       000       
# 0000000    000   000  000      0000000   0000000   
# 000   000  000   000  000      000            000  
# 000   000   0000000   0000000  00000000  0000000   

rules =
    
    kode: 
        tgtExt:  'js'
        srcDir:  kodeDir
        tgtDir:  jsDir
        compile: (srcText, srcFile) -> k0de = new kode header:false; k0de.compile srcText, srcFile
    styl:
        tgtExt:  'css'
        srcDir:  pygDir
        tgtDir:  jsDir + '/css'
        compile: (srcText, srcFile) -> styl srcText
    pug:
        tgtExt:  'html'
        srcDir:  pygDir
        tgtDir:  jsDir
        compile: (srcText, srcFile) -> pug srcText
    noon:
        tgtExt:  'json'
        srcDir:  kodeDir
        tgtDir:  jsDir
        compile: (srcText, srcFile) -> JSON.stringify noon.parse(srcText), null, '  '
        
    ignore: [
        'kolor/lang.noon'
        'ko/help.noon'
    ]
    
#  0000000    0000000   000000000  000   000  00000000  00000000   
# 000        000   000     000     000   000  000       000   000  
# 000  0000  000000000     000     000000000  0000000   0000000    
# 000   000  000   000     000     000   000  000       000   000  
#  0000000   000   000     000     000   000  00000000  000   000  

gatherFiles = ‚óã->
    
    list  =‚óã fs.list kodeDir
    list  = list.concat ‚óã fs.list pygDir
    list  = list.filter (item) -> item.type == 'file'
    
    files = list.map (item) -> item.path
    files = files.filter (file) -> 
        for ignore in rules.ignore
            if file.endsWith ignore
                return false
        true
        
srcForFile = file ->
    
    srcFile = file
    if slash.isRelative srcFile
        srcFile = slash.path process.cwd(), srcFile
    srcFile
    
tgtForSrc = srcFile rule ->
    
    slash.swapExt srcFile.replace(rule.srcDir, rule.tgtDir), rule.tgtExt
    
# 000   000  000   000  00000000   0000000    
# 000  000   0000  000  000   000  000   000  
# 0000000    000 0 000  0000000    000   000  
# 000  000   000  0000  000   000  000   000  
# 000   000  000   000  000   000  0000000    

knrd = files=[] opt={} ‚óã->
       
    if files is str
        if slash.ext(files) in ['kode']
            files = [files]
        else
            files = []
            
    if files is arr
        if slash.ext(files[0]) not in ['kode']
            files = []
        
    opt.rerunWhenDirty ?= not opt.dryrun
    opt.verbose ?= false
    log 'opt'   opt   if opt.debug
    log 'files' files if opt.debug
    
    # ‚óè üî®
            
    files =‚óã gatherFiles() if empty files
    
    icon = opt.dryrun ? w4('ÔÅö  ') : 'üî® '
        
    log icon, b5(files.length) if not opt.quiet
    
    transpiled = 0
        
    for file in files
        
        skip = false
        for ignore in rules.ignore
            if file.endsWith ignore
                log w2('‚úò  '), w3 tilde file if opt.verbose
                skip = true
                break
                
        if skip ‚ûú continue
        
        if rule = rules[slash.ext file]
            
            srcFile = srcForFile file
            tgtFile = tgtForSrc  srcFile, rule
            
            srcText =‚óã fs.read srcFile
            tgtText =‚óã fs.read tgtFile
            compText = rule.compile srcText, srcFile
            
            log 'tgtText'  tgtFile, tgtText if opt.debug and opt.verbose
            log 'compText' compText         if opt.debug and opt.verbose
                
            if empty compText
                log y5('‚úò '), r5(tilde srcFile), r4('transpiles to empty!')
            else
                log g2('üîß'), m3 tilde srcFile if opt.verbose
                if tgtText != compText
                    transpiled++
                    
                    ‚óã fs.write tgtFile, compText if not opt.dryrun
                    log b5('‚úî '), g5 tilde tgtFile
        null
            
    if opt.rerunWhenDirty and transpiled
        
        knrd files, rerunWhenDirty:false
        
export knrd
