
#  ███████  ███       ███████    ███████  ███   ███
# ███       ███      ███   ███  ███       ███   ███
# ███████   ███      █████████  ███████   █████████
#      ███  ███      ███   ███       ███  ███   ███
# ███████   ███████  ███   ███  ███████   ███   ███

use ffi os io
use kxk.array kxk.kstr kxk.kseg

ffi.cdef """

    typedef void *FILE; 
    typedef struct DIR DIR;
    typedef int pid_t;
    
    struct dirent {
        unsigned long  d_ino;       
        unsigned long  d_seekoff;   
        unsigned short d_reclen;    
        unsigned short d_namlen;    
        unsigned char  d_type;      
        char           d_name[1024];
    };
    
    struct dirent *readdir(DIR *dirp);
    
    struct stat {
        uint32_t    st_dev;
        uint16_t    st_mode;
        uint16_t    st_nlink;
        uint64_t    st_ino;
        uint32_t    st_uid;               
        uint32_t    st_gid;                
        uint32_t    st_rdev;                
        int64_t     st_atime;        
        int64_t     st_atimensec;    
        int64_t     st_mtime;        
        int64_t     st_mtimensec;    
        int64_t     st_ctime;        
        int64_t     st_ctimensec;    
        int64_t     st_btime;    
        int64_t     st_btimensec;
        int64_t     st_size;                
        int64_t     st_blocks;              
        int32_t     st_blksize;             
        uint32_t    st_flags;               
        uint32_t    st_gen;                 
        int32_t     st_lspare;              
        int64_t     st_qspare[2];
    };

    DIR *opendir(const char *filename);
    int closedir(DIR *dirp);
    int close(int fd);
    
    int stat64(const char *path, struct stat *buf);
    int lstat64(const char *path, struct stat *buf);

    char *getcwd(char *buf, size_t size);
    int pipe(int pipefd[2]);
    int dup2(int oldfd, int newfd);
    int execvp(const char *file, char *const argv[]);
    int execv(const char *path, char *const argv[]);
    int fcntl(int fd, int cmd, ...);
    int fileno(FILE *stream);
    ssize_t read(int fd, void *buf, size_t count);
    pid_t fork();
    pid_t waitpid(pid_t pid, int *wstatus, int options);
    void _exit(int status);
    int chdir(const char *path);
    
    typedef void (*sighandler_t)(int);
    sighandler_t signal(int signum, sighandler_t handler);
    
    int write(int fd, const char *buf, size_t count);
"""

sigint = -> os.exit 0
ffi.C.signal 2 ffi.cast("sighandler_t" sigint)
    
cmdargs = cmd args ->
    ▴ cmd    
    args ?= {}
    alen = args.len+2
    argv = ffi.new "char*[?]" alen
    argv[0] = ffi.cast "char*" cmd
    for i in 1...args.len+1
        argv[i] = ffi.cast "char*" ffi.string(args[i])
    argv[alen] = nil
    argv

slash = {}
            
# ████████   ████████   ███████  ████████    ███████   ███   ███  ███   ███
# ███   ███  ███       ███       ███   ███  ███   ███  ███ █ ███  ████  ███
# ███████    ███████   ███████   ████████   █████████  █████████  ███ █ ███
# ███   ███  ███            ███  ███        ███   ███  ███   ███  ███  ████
# ███   ███  ████████  ███████   ███        ███   ███  ██     ██  ███   ███

slash.respawn = ->

    ffi.C.fcntl 0 2 0 # clear close on exit flags
    ffi.C.fcntl 1 2 0
    ffi.C.fcntl 2 2 0
    
    cmd = arg[0]
    if arg[-1]
        cmd = arg[-1]
        table.insert arg 1 arg[0]
        arg[0]  = cmd
        arg[-1] = nil
    
    args = cmdargs cmd arg
    ffi.C.execv args[0] args
    
#  ███████  ███   ███  ████████  ███      ███    
# ███       ███   ███  ███       ███      ███    
# ███████   █████████  ███████   ███      ███    
#      ███  ███   ███  ███       ███      ███    
# ███████   ███   ███  ████████  ███████  ███████

slash.shell = cmd ... ->
    
    read_pipe  = ffi.new "int[2]"
    write_pipe = ffi.new "int[2]"
    output     = ""
    exitcode   = nil
    failreason = nil

    ⮐  (nil false nil) if ffi.C.pipe(read_pipe) != 0 or ffi.C.pipe(write_pipe) != 0 

    pid = ffi.C.fork()

    if pid == 0

        ffi.C.close read_pipe[1]
        ffi.C.close write_pipe[0]
        ffi.C.dup2  write_pipe[1] 1
        ffi.C.dup2  write_pipe[1] 2
        ffi.C.close read_pipe[0]
        ffi.C.close write_pipe[1]

        argv = cmdargs cmd {...}
        ffi.C.execvp argv[0] argv
        ffi.C._exit 127
        
    elif pid > 0
        
        ffi.C.close read_pipe[0]
        ffi.C.close write_pipe[1]
        #                  F_SETFL▾                    F_GETFL▾      ▾O_NONBLOCK
        ffi.C.fcntl(write_pipe[0] 4 ffi.C.fcntl(write_pipe[0] 3 0) | 0x0004)

        buf = ffi.new "char[4096]"
        while true
            bytes_read = ffi.C.read write_pipe[0] buf 4096
            if bytes_read > 0
                output = output & ffi.string(buf, bytes_read)
                sleep 0.002
            else 
                break

        ffi.C.close write_pipe[0]

        wstatus = ffi.new "int[1]"
        waitpid = ffi.C.waitpid pid wstatus 0

        ⮐  (output, (waitpid == pid and wstatus[0] == 0), wstatus[0])
    else
        ⮐  (nil false nil)

#  ███████  ███   ███  ███████  
# ███       ███ █ ███  ███   ███
# ███       █████████  ███   ███
# ███       ███   ███  ███   ███
#  ███████  ██     ██  ███████  

slash.cwd = -> 

    buf = ffi.new "char[?]" 4096
    cwd = ffi.C.getcwd buf 4096
    if cwd
        ⮐  ffi.string cwd
        
slash.chdir = dir ->

    if ffi.C.chdir(dir) == 0
        ⮐  slash.cwd()

# ███   ███   ███████   ████████   ██     ██   ███████   ███      ███  ███████  ████████
# ████  ███  ███   ███  ███   ███  ███   ███  ███   ███  ███      ███     ███   ███     
# ███ █ ███  ███   ███  ███████    █████████  █████████  ███      ███    ███    ███████ 
# ███  ████  ███   ███  ███   ███  ███ █ ███  ███   ███  ███      ███   ███     ███     
# ███   ███   ███████   ███   ███  ███   ███  ███   ███  ███████  ███  ███████  ████████

slash.normalize = path ->

    ⮐  if empty path
    p = kseg path
    frst = p[1]
    swallow = 0xffff
    for i in p.len..1
        if i >= swallow
            table.remove p i
            if i == swallow or i == 1
                if p[1] == '/' and frst != '/'
                    p∙shift() 
                ⮐  slash.normalize p∙str()
        else
            if p[i] == '\\' ➜ p[i] = '/'
            if i < p.len and p[i] == '/'
                if i < p.len - 1
                    if p[i+1] == '.' and p[i+2] == '/' 
                        p = p∙splice i+1 2
                    if p[i+1] == '.' and p[i+2] == '.' and i > 1 and p[i-1] != '.'
                        p = p∙splice i 3
                        swallow = i-1
                        while swallow > 0 and p[swallow] != '/'
                            swallow -= 1
                if p[i+1] == '/'
                    p = p∙splice i+1 1
    
    if p.len >= 4 and p∙slice(1 4)∙str() == "./.."
        p∙shift()
        p∙shift()
    while p.len > 1 and p[p.len] == '/'
        p∙pop()
    if p.len > 1 and p[1] == '/' and frst != '/' and frst != '\\'
        p∙shift()
    p∙str()

# ████████    ███████   █████████  ███   ███
# ███   ███  ███   ███     ███     ███   ███
# ████████   █████████     ███     █████████
# ███        ███   ███     ███     ███   ███
# ███        ███   ███     ███     ███   ███

slash.path = (...) ->

    slsh = s -> string.gsub(s "\\" "/")
    mpty = s -> s.len > 0
    fpth = array(...)
    fpth = fpth∙filter mpty
    fpth = fpth∙map slsh
    fpth = table.concat fpth "/"
    slash.normalize fpth
    
slash.isRelative = path -> path.len == 0 or path.len > 0 and path∙sub(1 1) != '/' and path∙sub(1 1) != '~'
slash.isAbsolute = path -> path.len > 0 and array('/' '~')∙contains(path∙sub(1 1))
slash.isRoot     = path -> slash.normalize(path) == "/"

slash.home = ... -> slash.path os.getenv("HOME") unpack({...})

slash.tilde = path -> string.gsub path slash.home() "~"
slash.untilde = path -> 

    ⮐  if empty path
    if string.sub(path 1 1) == '~' 
        ⮐  slash.path slash.home() kstr.shift(path)
    slash.path path

slash.absolute = path parent ->

    ⮐  if empty path
    if slash.isRelative path
        parent ?= slash.cwd()
        ⮐  slash.path parent path
    else
        ⮐  slash.untilde path

slash.splitFile = path ->
    
    slsidx = kstr.rfind path "/"
    
    dir = ""
    if slsidx > 0
        dir  = slice path 1 slsidx-1
        path = slice path slsidx+1
        
    (dir path)

slash.split = path -> kstr.split path "/"
slash.join  = ... -> table.concat {...} "/"
slash.contains = path subpath -> array(unpack(slash.split(path)))∙contains subpath
        
# ████████    ███████   ████████    ███████  ████████
# ███   ███  ███   ███  ███   ███  ███       ███     
# ████████   █████████  ███████    ███████   ███████ 
# ███        ███   ███  ███   ███       ███  ███     
# ███        ███   ███  ███   ███  ███████   ████████

slash.parse = path ->
    path  = slash.untilde slash.normalize(path)
    (dir file) = slash.splitFile path
    (name ext) = slash.splitExt file
    {dir:dir name:name ext:ext file:file path:path}
        
slash.dir  = path -> slash.parse(path).dir
slash.file = path -> slash.parse(path).file
slash.name = path -> slash.parse(path).name
slash.ext  = path -> slash.parse(path).ext
    
slash.swapExt = path ext ->

    ⮐  path if ext == nil or ext == ""
    p = slash.parse path
    r = ""
    if string.sub(path 1 1) == "/" ➜ r = "/"
    slash.path r p.dir p.name & "." & ext
    
slash.splitExt = path ->
    
    dotidx = kstr.rfind path "."
    slsidx = kstr.rfind path "/"
    
    ext = ""
    
    if dotidx > 0 and dotidx > slsidx
        ext  = slice path dotidx+1
        path = slice path 0 dotidx-1
        
    (path ext)
    
slash.removeExt = path -> slash.splitExt path
    
slash.swapLastPathComponentAndExt = path src tgt ->

    dirs = path.dirs()    
    for i in dirs.len..0
        if dirs[i] == src
            dirs[i] = tgt
            break
            
    array.push dirs slash.swapExt(path.file tgt)
    slash.path unpack(dirs)
    
prettyTimeSpan = seconds ->

    if seconds == 0 ➜ ⮐  "0"
    seconds = math.abs seconds

    days = math.floor(seconds / 86400)
    seconds = seconds % 86400

    hours = math.floor(seconds / 3600)
    seconds = seconds % 3600

    minutes = math.floor(seconds / 60)
    seconds = seconds % 60

    parts = {}
    if days > 0
        table.insert(parts, string.format("%d day%s", days, days == 1 and "" or "s"))

    if hours > 0
        table.insert(parts, string.format("%d hour%s", hours, hours == 1 and "" or "s"))

    if minutes > 0
        table.insert(parts, string.format("%d minute%s", minutes, minutes == 1 and "" or "s"))

    if seconds > 0 or parts.len == 0
        table.insert(parts, string.format("%.2f second%s", seconds, seconds == 1 and "" or "s"))

    table.concat parts " "

sbuf = ffi.new("struct stat")

#  ███████  █████████   ███████   █████████
# ███          ███     ███   ███     ███   
# ███████      ███     █████████     ███   
#      ███     ███     ███   ███     ███   
# ███████      ███     ███   ███     ███   

slash.stat = path ->

    if ffi.C.stat64(path, sbuf) == 0
        mode = tonumber sbuf.st_mode
        typ  = "?"
        if   bit.band mode 0x4000 ➜ typ = "dir"
        elif bit.band mode 0x8000 ➜ typ = "file"
        elif bit.band mode 0xa000 ➜ typ = "link"
        ⮐   {
                mode:       mode
                nlink:      tonumber(sbuf.st_nlink)
                ino:        tonumber(sbuf.st_ino)
                uid:        tonumber(sbuf.st_uid)
                gid:        tonumber(sbuf.st_gid)
                atime:      tonumber(sbuf.st_atime)
                mtime:      tonumber(sbuf.st_mtime)
                ctime:      tonumber(sbuf.st_ctime)
                btime:      tonumber(sbuf.st_btime)
                blksize:    tonumber(sbuf.st_blksize)
                blocks:     tonumber(sbuf.st_blocks)
                "type":     typ
                # modage:     prettyTimeSpan(os.time()-tonumber(sbuf.st_mtime))
            }
    
# ███   ███   ███████   ███      ███   ███
# ███ █ ███  ███   ███  ███      ███  ███ 
# █████████  █████████  ███      ███████  
# ███   ███  ███   ███  ███      ███  ███ 
# ██     ██  ███   ███  ███████  ███   ███

slash.walk = path opt ->

    opt ?= { recursive: true }
    opt.files ?= array()

    dir = ffi.C.opendir path
    if dir == nil
        error "Failed to open directory: " & path
    
    while true
        entry = ffi.C.readdir dir
        if entry != nil
            name = ffi.string entry.d_name
            if name != "." and name != ".."
                typ = "???"
                if   entry.d_type == 4  ➜ typ = "dir"
                elif entry.d_type == 8  ➜ typ = "file"
                elif entry.d_type == 10 ➜ typ = "link"
                    
                apth = slash.absolute(path & "/" & name)
                info = { "name": name "type": typ "path": apth }
                opt.files∙push info
                
                if opt.recursive and typ == "dir"
                    slash.walk apth opt
        else
            break
            
    ffi.C.closedir dir
    table.sort(opt.files, (a b) -> ⮐  a.path < b.path)
    opt.files

# ████████  ███  ███      ████████   ███████
# ███       ███  ███      ███       ███     
# ██████    ███  ███      ███████   ███████ 
# ███       ███  ███      ███            ███
# ███       ███  ███████  ████████  ███████ 

slash.files = path ext ->

    files = slash.walk path
    files = files∙map((info) -> ⮐  info.path)
    if ext
        fext = (f) -> slash.ext(f) == ext
        files = files∙filter fext
    files
    
slash.exists     = path -> slash.stat path
slash.isDir      = path -> s = slash.stat path ; if s and s.type == "dir"  ➜ ⮐  s
slash.isFile     = path -> s = slash.stat path ; if s and s.type == "file" ➜ ⮐  s
slash.isLink     = path -> s = slash.stat path ; if s and s.type == "link" ➜ ⮐  s
slash.dirExists  = path -> slash.isDir  path
slash.fileExists = path -> slash.isFile path
slash.samePath   = p1 p2 -> slash.untilde(p1) == slash.untilde(p2)
    
⮐  slash
