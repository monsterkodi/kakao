###
00000000  0000000    000  000000000   0000000   00000000 
000       000   000  000     000     000   000  000   000
0000000   000   000  000     000     000   000  0000000  
000       000   000  000     000     000   000  000   000
00000000  0000000    000     000      0000000   000   000
###

use ../kxk ◆ events
use ◆ state cells theme
use ./util ◆ util

function editor extends events

    @: @screen ->
        
        @cells = new cells @screen
        @state = new state @cells
        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: =>
        
        syntax = @state.syntax
        s      = @state.s
        view   = s.view.asMutable()
        lines  = s.lines.asMutable()
        
        for row in 0...@cells.rows
            
            y = row+view[1]
            
            break if y >= lines.length
            line = lines[y]
            
            if not line?
                lf 'empty line?', noon(lines), y, row, view[1]
                lf 'empty line?' lines.length y
                lf '???'
            
            # text
            for x in 0...@cells.cols
                if x < @cells.cols and x+view[0] < line.length
                    fg = syntax.getColor x+view[0] y
                    ch = syntax.getChar x+view[0] y line[x+view[0]]
                    @cells.set x row ch fg
                    
            # empty
            if y < lines.length
                linel = line.length - view[0]
                if y == s.cursor[1] and @constructor.name == 'editor'
                    if linel > 0
                        @cells.bg_rect 0 row linel row theme.cursor_main
                    @cells.bg_rect max(0 linel) row -1 row theme.cursor_empty
                else
                    if linel > 0
                        @cells.bg_rect 0 row linel row theme[@constructor.name]
                    @cells.bg_rect max(0 linel) row -1 row theme[@constructor.name + '_empty']
                    
        for selection in s.selections
            
            for li in selection[1]..selection[3]
                
                y  = li-view[1]
                
                if view[1] <= li < view[1] + @cells.rows
                    
                    if li == selection[1]
                        xs = selection[0]
                    else
                        xs = 0
                        
                    if li == selection[3]
                        xe = selection[2]
                    else
                        xe = lines[li].length
                        
                    for x in xs...xe
                        if 0 <= x-view[0] < @cells.cols
                            @cells.set_bg x-view[0] y theme.selection
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event col row button mods count =>
        
        ⮐ if row >= @cells.y + @cells.rows
        
        [col row] = @cells.posForScreen col row
        
        switch event
            
            'press'
                        
                if count > 1
                    
                    @state.deselect()
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    if count == 2
                        if mods == 'alt'
                            @state.selectChunk x y
                        else
                            @state.selectWord x y
                    else
                        @state.selectLine y
                        
                    @dragStart = copy @state.s.selections[0]
                    
                    ⮐ true
                    
                else
                    
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    @dragStart = [x y x]
                                    
                    @state.deselect() if mods != 'ctrl'
                    @state.setCursor(x y)
                    
                    ⮐ true
                    
            'drag'
            
                if @dragStart
                    x = col + @state.s.view[0]
                    y = row + @state.s.view[1]
                    
                    start = [@dragStart[0] @dragStart[1]]
                    
                    if y < @dragStart[1] 
                        start = [@dragStart[2] @dragStart[1]]
                    
                    if @state.select start [x y]
                        ⮐ true
                    
            'release'
            
                delete @dragStart
                
        true
                
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: col row dir mods =>
        
        ⮐ if row >= @cells.y + @cells.rows
        
        steps = switch mods
            
            'shift'          ➜ 4
            'shift+ctrl'     ➜ 8
            'alt'            ➜ 16
            'shift+alt'      ➜ 32
            'ctrl+alt'       ➜ 64
            'shift+ctrl+alt' ➜ 128
            ➜ 1
        
        if @dragStart
            
            x = @state.s.cursor[0]
            y = @state.s.cursor[1]
            
            switch dir
                'up'    ➜ y -= steps    
                'down'  ➜ y += steps    
                'left'  ➜ x -= 1    
                'right' ➜ x += 1    
                
            y = clamp 0 @state.s.lines.length-1 y
            x = clamp 0 @state.s.lines[y].length-1 x
            
            start = [@dragStart[0] @dragStart[1]]
            
            if y < @dragStart[1] 
                start = [@dragStart[2] @dragStart[1]]
            
            if @state.select start [x y]
                @redraw()
            ⮐ 
                
        switch dir
            'up' 'down' 'left' 'right' ➜ @state.scrollView dir steps
            
        @redraw()

    showCursorIfInView: =>
        
        s = @state.s
        [sx sy] = @cells.screenForPos s.cursor[0]-s.view[0] s.cursor[1]-s.view[1]
        
        @screen.t.setCursor sx sy
        
        show = util.isPosInsideRange s.cursor @state.rangeForVisibleLines()
        if s.cursor[0] < s.view[0] ➜ show = false
            
        @screen.t.showCursor show     
                
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: => @emit 'redraw'
        
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key =>
        
        switch key
            
            'up' 'down' 'left' 'right'  ➜ ⮐ @state.moveCursor key
            
            'ctrl+up'                   ➜ ⮐ @state.moveCursor 'up'    4
            'ctrl+down'                 ➜ ⮐ @state.moveCursor 'down'  4
            'ctrl+left'                 ➜ ⮐ @state.moveCursor 'left'  4
            'ctrl+right'                ➜ ⮐ @state.moveCursor 'right' 4
                       
            'ctrl+alt+up'               ➜ ⮐ @state.moveCursor 'up'    8
            'ctrl+alt+down'             ➜ ⮐ @state.moveCursor 'down'  8
            'ctrl+alt+left'             ➜ ⮐ @state.moveCursor 'left'  8
            'ctrl+alt+right'            ➜ ⮐ @state.moveCursor 'right' 8
    
            'shift+ctrl+alt+up'         ➜ ⮐ @state.moveCursor 'up'    16
            'shift+ctrl+alt+down'       ➜ ⮐ @state.moveCursor 'down'  16
            'shift+ctrl+alt+left'       ➜ ⮐ @state.moveCursor 'left'  16
            'shift+ctrl+alt+right'      ➜ ⮐ @state.moveCursor 'right' 16
            
            'ctrl+a'                    ➜ ⮐ @state.setCursor 0 @state.s.cursor[1]
            'ctrl+e'                    ➜ ⮐ @state.setCursor @state.s.lines[@state.s.cursor[1]].length @state.s.cursor[1]
            'ctrl+h'                    ➜ ⮐ @state.setCursor 0 0
            'ctrl+j'                    ➜ ⮐ @state.setCursor @state.s.lines[@state.s.lines.length-1].length @state.s.lines.length-1
            'shift+ctrl+h'              ➜ ⮐ @state.moveCursorAndSelect 'bof'
            'shift+ctrl+j'              ➜ ⮐ @state.moveCursorAndSelect 'eof'
                    
            'ctrl+k'                    ➜ ⮐ @state.delete 'eol'
            'delete'                    ➜ ⮐ @state.delete 'back'
            'cmd+delete'                ➜ ⮐ @state.delete 'back' 'cmd'
            'alt+delete'                ➜ ⮐ @state.delete 'back' 'alt'
            
            'shift+tab'                 ➜ ⮐ @state.deindent()
                                    
            'alt+x' 'cmd+x' 'ctrl+x'    ➜ ⮐ @state.cut()     
            'alt+c' 'cmd+c' 'ctrl+c'    ➜ ⮐ @state.copy()        
            'alt+v' 'cmd+v' 'ctrl+v'    ➜ ⮐ @state.paste()
               
            'cmd+z'                     ➜ ⮐ @state.undo()
            'cmd+y' 'shift+cmd+z'       ➜ ⮐ @state.redo()
                        
            'cmd+j'                     ➜ ⮐ @state.joinLines()
                    
            'shift+up'                  ➜ ⮐ @state.moveCursorAndSelect 'up'
            'shift+down'                ➜ ⮐ @state.moveCursorAndSelect 'down'
            'shift+left'                ➜ ⮐ @state.moveCursorAndSelect 'left'
            'shift+right'               ➜ ⮐ @state.moveCursorAndSelect 'right'
            'shift+cmd+right'           ➜ ⮐ @state.moveCursorAndSelect 'eol'
            'shift+cmd+left'            ➜ ⮐ @state.moveCursorAndSelect 'bol'
                                
            'esc'                       ➜ ⮐ @state.deselect()
            
        @state.insert key
            
export editor
