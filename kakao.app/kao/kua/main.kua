
main = ... ->

    use std ffi io
    use ./kxk/kxk
    
    ffi.cdef """
        extern int execv(const char *path, char *const argv[]);
        typedef void *FILE; 
        extern int fileno(FILE *stream);
        extern int fcntl(int fd, int cmd, ...);        
        """
    
    optparser = std.optparse """
        0.1.0
        Usage: kao [Options ...] [Files ...]
        
        Options:
          -t, --test         run tests
          -d, --debug        run with debugging output
          -n, --dryrun,      run without execution
          -o, --outdir=dir   output directory
          -v, --verbose      a combined short and long option
          -V, --version      display version information, then exit
          -h, --help         display this help, then exit
        """
    # log process.cwd()
            
    _G.argv = process.argv
    _G.appn = argv[0]
    _G.scrt = ""
    if argv.len > 0 and appn == "luvit"
        scrt = array.shift(argv)
    
    _G.opts = {}
    (arg _G.opts) = optparser:parse(argv)
    # log 'exe' appn, scrt, array.str(args)
    
    files = opts.unrecognised
    if opts.verbose
        log 'opts'    inspect(opts)
        log 'meta'    inspect(getmetatable(opts))
        log "debug"   opts.debug
        log "verbose" opts.verbose
        log 'outdir'  opts.outdir
        log 'files'   files.len
        log 'files'   inspect(files)
    
    # log inspect opts
    # log array.str files
                     
    watch slash.path(".")
        
watch = ... ->

    dir = process.cwd()
    luaFiles = array.indexdict slash.files(slash.path(dir ".") "lua")
    kxkFiles = array.indexdict slash.files(slash.path(dir "./kxk") "lua")
    kxkTests = array.indexdict slash.files(slash.path(dir "kxk/test"))

    if verbose
        log "\nlua files"
        log array.str luaFiles
        log "\nkxk files"
        log array.str kxkFiles
        log "\nkxk tests"
        log array.str kxkTests
        
    modTimes = {}
    
    while true
    
        kxkChanged = {}
        luaChanged = {}
        
        for _ dir in ipairs {...}

            for i f in ipairs(slash.walk(dir))
                p = f.path
                stat    = slash.stat(p)
                modTime = stat.mtime
                
                if not modTimes[p]
                    modTimes[p] = modTime
                elif modTimes[p] == modTime
                    a = 1
                else
                    # log "CHANGE" p
                    modTimes[p] = modTime
                    
                    if kxkFiles[p]
                        log "KXK" p
                        array.push(kxkChanged p)
                    elif luaFiles[p]
                        array.push(luaChanged p)
                        log "LUA" p                    
            
        testPass = true    
        if kxkChanged.len > 0
            if not test.run kxkTests
                testPass = false
            
        if luaChanged.len > 0 or kxkChanged.len > 0
            if testPass
                log "compile"
                (output ok) = slash.shell "lit" "make"
                if ok
                    log "restart " appn
                    slash.respawn appn argv                    
                    log "DAFUK?"
                    os.exit(1)
                else
                    log output
            else
                log "skip compile"
        # else
        #     log "."
        sleep 1
        
‚Æê  require('./init')(main, ...)
    