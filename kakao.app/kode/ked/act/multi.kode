###
00     00  000   000  000      000000000  000    
000   000  000   000  000         000     000    
000000000  000   000  000         000     000    
000 0 000  000   000  000         000     000    
000   000   0000000   0000000     000     000    
###

use ../util ◆ util

export

    #  0000000   000      000      
    # 000   000  000      000      
    # 000000000  000      000      
    # 000   000  000      000      
    # 000   000  0000000  0000000  
    
    allCursors: -> @s.cursors.asMutable()
    
    # 00000000  000   000  00000000    0000000   000   000  0000000    
    # 000        000 000   000   000  000   000  0000  000  000   000  
    # 0000000     00000    00000000   000000000  000 0 000  000   000  
    # 000        000 000   000        000   000  000  0000  000   000  
    # 00000000  000   000  000        000   000  000   000  0000000    
    
    expandCursors: dir ->
        
        cursors = @allCursors()

        dy = dir == 'up' ? -1 : 1
        
        newCursors = []
        for c in cursors
            newCursors.push c
            newCursors.push [c[0] c[1]+dy]

        mc = util.traversePositionsInDirection newCursors @mainCursor() dir
        @setCursors newCursors mc
        
    contractCursors: dir ->
        
        cursors = @allCursors()

        newCursors = []
        for c in cursors
            nbup = util.positionsContain cursors util.positionInDirection(c 'down')
            nbdn = util.positionsContain cursors util.positionInDirection(c 'up')
            solo = not (nbup or nbdn)
            add = switch dir
                'up'   ➜ nbup or solo
                'down' ➜ nbdn or solo
            
            newCursors.push c if add

        @setCursors newCursors
        
    #  0000000   0000000    0000000    
    # 000   000  000   000  000   000  
    # 000000000  000   000  000   000  
    # 000   000  000   000  000   000  
    # 000   000  0000000    0000000    
    
    addCursor: x y ->
        
        pos = util.pos x y
        cursors = @allCursors()
        cursors.push pos
        @setCursors cursors -1
        
    addCursors: cursors ->
        
        @setCursors @allCursors().concat(cursors)
        
    delCursorsInRange: rng ->
        
        outside = util.positionsOutsideRange @allCursors() rng
        outside.push util.endOfRange(rng)
        @setCursors outside -1
        
    # 00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000       
    # 000000000  000   000   000 000   0000000   
    # 000 0 000  000   000     000     000       
    # 000   000   0000000       0      00000000  
    
    moveCursors: dir opt ->
        
        opt ?= {}
        opt.count ?= 1
        opt.jumpWords ?= false
        
        if @s.highlights.length
            @deselect()
        
        cursors = @allCursors()
        lines   = @allLines()
        
        for c in cursors
            switch dir
                'left'  
                'right' ➜ c[0] += util.numCharsFromPosToWordOrPunctInDirection(lines c dir opt)
                'up'    ➜ c[1] -= opt.count
                'down'  ➜ c[1] += opt.count
                'eol'   ➜ c[0] = @s.lines[c[1]].length
                'bol'   ➜ c[0] = 0
                'bof'   ➜ c[0] = 0; c[1] = 0
                'eof'   ➜ c[1] = @s.lines.length-1; c[0] = @s.lines[c[1]].length
 
        @setCursors cursors @s.main
        
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
        
    setMainCursor: x y ->
        
        [x y] = util.pos x y
        
        y = clamp 0 @s.lines.length-1 y
        x = max 0 x
                        
        @setCursors [[x y]] 0
        
    moveMainCursorInDirection: dir opt={} ->
        
        mc = util.positionInDirection @mainCursor() dir
        
        if opt.keep
            @addCursor mc
        else
            @moveMainCursor mc
                        
    moveMainCursor: x y ->
                
        [x y] = util.pos x y
        
        y = clamp 0 @s.lines.length-1 y
        x = max 0 x
        
        mainCursor = @mainCursor()
        
        ⮐ if mainCursor eql [x y]

        cursors = @allCursors()

        cursors.splice util.indexOfPosInPositions(mainCursor cursors) 1
        
        main = util.indexOfPosInPositions [x y] cursors
        if main < 0
            cursors.push [x y]
            main = cursors.length-1
        
        @setCursors cursors main
                
    mainCursor: -> @s.cursors[@s.main].asMutable()
    
    singleCursorAtEndOfLine: ->
        
        rng = util.lineRangeAtPos @allLines() @mainCursor()
        mc  = util.endOfRange rng
        
        @deselect()
        @setCursors [mc] 0
        
    singleCursorAtIndentOrStartOfLine: ->
        
        lines = @allLines()
        mc    = @mainCursor()
        
        rng   = util.lineRangeAtPos  lines mc
        ind   = util.lineIndentAtPos lines mc
        
        if ind < mc[0]
            mc[0] = ind
        else
            mc  = util.startOfRange rng
        
        @deselect()
        @setCursors [mc] 0
        
    moveCursorsToStartOfSelectionsOrIndentOrStartOfLines: ->
        
        selections = @allSelections()
        
        ⮐ @moveCursorsToIndentOrStartOfLines() if empty selections
        
        lines   = @allLines()
        rngs    = util.splitLineRanges lines selections false

        cursors = util.startPositionsOfRanges rngs
        
        @setCursors cursors

    moveCursorsToIndentOrStartOfLines: ->
        
        cursors = @allCursors()
        lines = @allLines()
        
        for cur in cursors
            ind = util.lineIndentAtPos lines cur
            if ind < cur[0]
                cur[0] = ind
            else
                cur[0] = 0
        
        @setCursors cursors
        
    moveCursorsToEndOfSelectionsOrLines: ->
        
        selections = @allSelections()
        
        ⮐ @moveCursorsToEndOfLines() if empty selections
        
        lines   = @allLines()
        rngs    = util.splitLineRanges lines selections false

        cursors = util.endPositionsOfRanges rngs
        
        @setCursors cursors
            
    moveCursorsToEndOfLines: ->
        
        cursors = @allCursors()
        lines = @allLines()
        
        for cur in cursors
            cur[0] = util.lineRangeAtPos(lines cur)[2]
        
        @setCursors cursors
                
    isAnyCursorInLine: y ->
        
        for c in @allCursors()
            ⮐ true if c[1] == y
                    
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    moveCursorAndSelect: dir ->
        
        selections = @allSelections()
        mc = @mainCursor()
        selection = [mc[0] mc[1] mc[0] mc[1]]
        selections.push selection 
        
        @moveCursors dir
        
        switch dir
            'left'  ➜ selection[0] = selection[0]-1
            'right' ➜ selection[2] = selection[2]+1
            'up'    ➜ selection[1] = max 0 selection[1]-1
            'down'  ➜ selection[3] = min @s.lines.length-1 selection[3]+1
            'eol'   ➜ selection[2] = Infinity
            'bol'   ➜ selection[0] = 0
            'bof'   ➜ selection[1] = 0; selection[0] = 0
            'eof'   ➜ selection[3] = @s.lines.length-1; selection[2] = @s.lines[@s.lines.length-1].length
            
        selection[0] = clamp 0 @s.lines[selection[1]].length selection[0]
        selection[2] = clamp 0 @s.lines[selection[3]].length selection[2]
        
        @setSelections selections
        @

    #  0000000  000   000  00000000    0000000   0000000   00000000    0000000  
    # 000       000   000  000   000  000       000   000  000   000  000       
    # 000       000   000  0000000    0000000   000   000  0000000    0000000   
    # 000       000   000  000   000       000  000   000  000   000       000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  0000000   
    
    moveCursorsAndSelect: dir ->
        
        [selections cursors] = util.extendLineRangesByMovingPositionsInDirection @allLines() @allSelections() @allCursors() dir
        
        @setSelections selections
        @setCursors cursors

