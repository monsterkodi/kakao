###
    ██     ██   ███████   ███████    ████████
    ███   ███  ███   ███  ███   ███  ███     
    █████████  ███   ███  ███   ███  ███████ 
    ███ █ ███  ███   ███  ███   ███  ███     
    ███   ███   ███████   ███████    ████████

    stores modes per editor state
    
    modes handle input and text insertion:

    brckts   insert and highlight matching surround 
    salter   ascii-header         
    uniko    unicode drawing
    unype    unicode type writer
    vimple   simple vi
    record   
###

use ../../kxk ◆ kseg
use ../theme  ◆ theme
use ./mode    ◆ brckts salter unype
 
function mode

    @active: {} # maps editor state names to active mode instances
    @modes: {}  # maps mode names to mode classes

    @names: -> Object.keys mode.modes

    #  ███████  █████████   ███████   ████████   █████████
    # ███          ███     ███   ███  ███   ███     ███   
    # ███████      ███     █████████  ███████       ███   
    #      ███     ███     ███   ███  ███   ███     ███   
    # ███████      ███     ███   ███  ███   ███     ███   
    
    @start: state name ->
    
        ⮐ if @isActive state name
        
        log "mode.start #{name}"
        
        @active[state.name] ?= []
        @active[state.name].push new mode.modes[name] state
        
        # log "mode.start" @active[state.name].map((m) -> m.name)
            
    @stop: state name ->
        
        log "mode.stop #{name}"
        
        m = @get state name
        
        @active[state.name].splice @active[state.name].indexOf(m) 1
        
        m.stop() if m.stop is func
        
        # log "mode.stop" @active[state.name].map((m) -> m.name)

    @toggle: state name ->
        
        if @isActive state name
            @stop state name
        else
            @start state name
        
    #  ███████    ███████  █████████  ███  ███   ███  ████████
    # ███   ███  ███          ███     ███  ███   ███  ███     
    # █████████  ███          ███     ███   ███ ███   ███████ 
    # ███   ███  ███          ███     ███     ███     ███     
    # ███   ███   ███████     ███     ███      █      ████████
    
    @isActive: state name -> valid @get(state name)
        
    @get: state name ->
        
        for m in @active[state.name]
            ⮐ m if m.name == name

    # ███  ███   ███   ███████  ████████  ████████   █████████
    # ███  ████  ███  ███       ███       ███   ███     ███   
    # ███  ███ █ ███  ███████   ███████   ███████       ███   
    # ███  ███  ████       ███  ███       ███   ███     ███   
    # ███  ███   ███  ███████   ████████  ███   ███     ███   

    @insert: state text ->
        
        for m in @active[state.name]
            if m.insert is func
                text = m.insert text
        text
        
    @deleteSelection: state ->
        
        for m in @active[state.name]
            if m.deleteSelection is func
                ⮐ true if m.deleteSelection()
        false        
        
    # ███   ███  ████████  ███   ███
    # ███  ███   ███        ███ ███ 
    # ███████    ███████     █████  
    # ███  ███   ███          ███   
    # ███   ███  ████████     ███   

    @handleKey: state key event ->
        
        for m in @active[state.name]
            if m.handleKey is func
                ⮐ if m.handleKey(key event) != 'unhandled'
        'unhandled'
        
    #  ███████  ███   ███  ████████    ███████   ███████   ████████    ███████     ███████  ████████  █████████
    # ███       ███   ███  ███   ███  ███       ███   ███  ███   ███  ███         ███       ███          ███   
    # ███       ███   ███  ███████    ███████   ███   ███  ███████    ███████     ███████   ███████      ███   
    # ███       ███   ███  ███   ███       ███  ███   ███  ███   ███       ███         ███  ███          ███   
    #  ███████   ███████   ███   ███  ███████    ███████   ███   ███  ███████     ███████   ████████     ███   

    @cursorsSet: state ->
    
        for m in @active[state.name]
            if m.cursorsSet is func
                m.cursorsSet()
        
    # █████████  ███   ███  ████████  ██     ██  ████████   ███████   ███████   ███       ███████   ████████ 
    #    ███     ███   ███  ███       ███   ███  ███       ███       ███   ███  ███      ███   ███  ███   ███
    #    ███     █████████  ███████   █████████  ███████   ███       ███   ███  ███      ███   ███  ███████  
    #    ███     ███   ███  ███       ███ █ ███  ███       ███       ███   ███  ███      ███   ███  ███   ███
    #    ███     ███   ███  ████████  ███   ███  ████████   ███████   ███████   ███████   ███████   ███   ███
    
    @themeColor: state colorName ->
    
        for m in @active[state.name]
            if m.themeColor is func
                ⮐  m.themeColor colorName
        
        # log "themeColor #{colorName} #{theme[colorName]}"
        theme[colorName]
        
    # 00000000    0000000    0000000  000000000  0000000    00000000    0000000   000   000  
    # 000   000  000   000  000          000     000   000  000   000  000   000  000 0 000  
    # 00000000   000   000  0000000      000     000   000  0000000    000000000  000000000  
    # 000        000   000       000     000     000   000  000   000  000   000  000   000  
    # 000         0000000   0000000      000     0000000    000   000  000   000  00     00  
    
    @postDraw: state ->
        
        for m in @active[state.name]
            if m.postDraw is func
                m.postDraw()
            
# ███   ███  ███  ██     ██  ████████   ███      ████████
# ███   ███  ███  ███   ███  ███   ███  ███      ███     
#  ███ ███   ███  █████████  ████████   ███      ███████ 
#    ███     ███  ███ █ ███  ███        ███      ███     
#     █      ███  ███   ███  ███        ███████  ████████

function vimple extends mode
    
    @: -> super 'vimple'

# ███   ███  ███   ███  ███  ███   ███   ███████ 
# ███   ███  ████  ███  ███  ███  ███   ███   ███
# ███   ███  ███ █ ███  ███  ███████    ███   ███
# ███   ███  ███  ████  ███  ███  ███   ███   ███
#  ███████   ███   ███  ███  ███   ███   ███████ 

function uniko extends mode

    @: -> super 'uniko'
        
function record extends mode

    @: -> super 'record'
    
mode.modes = 
    brckts: brckts
    salter: salter
    unype:  unype
    uniko:  uniko
    vimple: vimple
    record: record
    
export mode
