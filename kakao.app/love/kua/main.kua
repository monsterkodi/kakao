
use kxk.kxk
use ked

love.load = ->

    (width height) = love.window.getDesktopDimensions()
    
    love.window.setMode width/2 height {
        highdpi: true
        usedpiscale: false
        resizable: true
        }
        
    love.window.setPosition 0 0
    
    love.graphics.setDefaultFilter "nearest" "nearest"

    _G.fontWidth = 24
    _G.font  = love.graphics.setNewFont "font.ttf" fontWidth*2
    _G.count = 0
    
    #love.window.maximize()
    love.keyboard.setKeyRepeat true
    
    _G.ked = ked()
    
    nil

love.draw = ->

    count += 1
    (_ _ w h) = love.window.getSafeArea()

    lg = love.graphics
    
    tth = lg.newText _G.font "Xg" 
    ttw = lg.newText _G.font "W" 
    
    (tw th) = ttw∙getDimensions() ; cw = tw
    (tw th) = tth∙getDimensions() ; ch = th
    
    cols = floor w/cw
    rows = floor h/ch
    
    ked∙draw cols rows cw ch
    
    lg.setColor 0.2 0.2 0.2 
    lg.print "#{cols} #{rows} #{w} #{h} #{cw} #{ch} #{count} #{love.timer.getFPS()} ◂" 6*cw 0
    
    nil
    
love.quit = ->

    ked∙quit()
    false
    
love.keypressed = key scancode isrepeat ->

    mods = ""
    switch key 
        "escape"    ➜ key = "esc"
        "backspace" ➜ key = "delete"
        "lshift" "rshift"
        "lctrl"  "rctrl"
        "lalt"   "ralt"
        "lgui"   "rgui"
            ⮐  
            
    lk = love.keyboard        
    
    if lk.isDown('lshift') or lk.isDown('rshift') ➜ mods &= "shift+"
    if lk.isDown('lctrl')  or lk.isDown('rctrl')  ➜ mods &= "ctrl+"
    if lk.isDown('lalt')   or lk.isDown('ralt')   ➜ mods &= "alt+"
    if lk.isDown('lgui')   or lk.isDown('rgui')   ➜ mods &= "cmd+"

    combo = mods & key
    char = switch key
        "return" ➜ "\n"
        "tab"    ➜ "\t"
        "space"  ➜ " "
        "up"
        "down"
        "right"
        "esc"
        "delete"
        "left"   ➜ ""
                 ➜ 
                    if mods.len == 0 
                        key 
                    elif mods == "shift+"
                        switch key
                            "1" ➜ "!"
                            "2" ➜ "@"
                            "3" ➜ "#"
                            "4" ➜ "$"
                            "5" ➜ "%"
                            "6" ➜ "^"
                            "7" ➜ "&"
                            "8" ➜ "*"
                            "9" ➜ "("
                            "0" ➜ ")"
                            "-" ➜ "_"
                            "=" ➜ "+"
                            "[" ➜ "{"
                            "]" ➜ "}"
                            "\\" ➜ "|"
                            ";" ➜ ":"
                            "'" ➜ '"'
                            "," ➜ "<"
                            "." ➜ ">"
                            "/" ➜ "?"
                            "`" ➜ "~"
                                ➜ string.upper key
                    else
                        ""
    event = {"repeat":isrepeat combo:combo char:char}
    write ◌y " " dict.str(event) ◌b scancode
    ked∙onKey combo event
    true

love.mousepressed = x y button istouch presses ->
    button = if button == 1 ➜ "left" ➜ "right"
    cell = [int(x/_G.screen.cw) int(y/_G.screen.ch)]
    event = {x:x y:y type:"press" button:button count:1 cell:cell}
    ked∙onMouse event

love.mousemoved = x y ->

    button = "right"
    event = {x:x y:y type:"move" button:button}
    ked∙onMouse event
    
# love.keyreleased = key scancode ->
# 
#     log 'keyreleased ' key, " " scancode
