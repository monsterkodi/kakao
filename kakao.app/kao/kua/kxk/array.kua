
#  ███████   ████████   ████████    ███████   ███   ███
# ███   ███  ███   ███  ███   ███  ███   ███   ███ ███ 
# █████████  ███████    ███████    █████████    █████  
# ███   ███  ███   ███  ███   ███  ███   ███     ███   
# ███   ███  ███   ███  ███   ███  ███   ███     ███   

class array

    @: ... ->
    
        l = select("#", ...)
        if l > 0
            for i in 1..l
                v = select(i, ...)
                table.insert @ v

    $: -> 
    
        s = ".\n"  
        for i v in ipairs @
            s = s & "    " & i & "    " & v & "\n"
        s

    str: -> $@
    
    each: -> i=0; -> i+=1; (@[i] i)
    
    map: f ->
    
        t = @.class()
        for i v in ipairs @
            t[i] = f v
        t
    
    filter: f ->
    
        t = @.class()
        for i v in ipairs @
            if f v i
                t∙push v
        t
        
    shift: -> 

        if @len > 0 ➜ ⮐  table.remove @ 1
        nil
        
    pop: -> 

        if @len > 0 ➜ ⮐  table.remove @ @len
        nil
        
    push: ... -> 

        l = select("#", ...)
        if l > 0
            for i in 1..l
                @[@len+1] = select(i, ...)
        @
        
    unshift: ... -> 
        
        l = select("#", ...)
        if l > 0
            for i in l..1
                v = select(i, ...)
                @insert 1 v
        @
        
    splice: (i n ...) ->
        
        if n > 0
            for d in 1..n
                @remove i
        a = @.class(...)
        if a.len > 0
            while a.len
                @insert i a∙pop()
        @
        
    slice: first last ->

        if last == nil ➜ last = @len
        last = math.min @len last
        s = @.class()
        for i in first..last
            s∙push @[i]
        s
        
    keydict: key ->

        t = {}
        for i v in ipairs @
            t[v[key]] = v
        t
    
    indexdict: ->

        t = {}
        for i v in ipairs @
            t[v] = i
        t
                    
    indexof: e ->
    
        for i v in ipairs @
            if v == e ➜ ⮐  i 
        -1
        
    rnd: -> @[math.random(@len)]
    
    swap: i j -> 
    
        ⮐  if i < 1 or i > @len
        ⮐  if j < 1 or j > @len
        ⮐  if i == j 
        (@[i] @[j]) = (@[j] @[i])
        
    shuffle: ->
    
        for i in 1..@len
            @swap i math.random(@len)
        
    has:      e -> @indexof(e) >= 0
    contains: e -> @indexof(e) >= 0

array.static.isarr = a ->
    
    ⮐  false if type(a) != "table"
    a.len > 0

array∙include table

⮐  array