###
00000000  0000000    000  000000000   0000000   00000000 
000       000   000  000     000     000   000  000   000
0000000   000   000  000     000     000   000  0000000  
000       000   000  000     000     000   000  000   000
00000000  0000000    000     000      0000000   000   000
###

use ../../kxk      ▪ post
use ../view/base   ◆ scroll view
use ../view/editor ◆ gutter mapview
use ./tool         ◆ belt
use                ◆ state draw complete mode

function editor extends draw

    @: screen name features ->
        
        super screen name features
        
        @focusable = true
        
        @state = new state @cells @name
        
        post.on 'focus' @onFocus
                
        if @feats.scrllr   ➜ @scroll   = new scroll   @screen @state 'right'
        if @feats.scroll   ➜ @scroll   = new scroll   @screen @state 'left'
        if @feats.mapview  ➜ @mapscr   = new mapview  @screen @state
        if @feats.gutter   ➜ @gutter   = new gutter   @screen @state
        if @feats.complete ➜ @complete = new complete @
            
        mode.autoStartForEditor @
        
        post.on 'modes.loaded' @onModesLoaded
        @onModesLoaded()
        
    onModesLoaded: =>
                        
        for m in mode.names()            
            if @feats[m] ➜ @state.allowedModes[m] = true
            
        # log 'allowedModes' @feats @state.allowedModes
                        
    # 000       0000000   000   000   0000000   000   000  000000000  
    # 000      000   000   000 000   000   000  000   000     000     
    # 000      000000000    00000    000   000  000   000     000     
    # 000      000   000     000     000   000  000   000     000     
    # 0000000  000   000     000      0000000    0000000      000     
    
    layout: x y w h =>
        
        g = m = s = 0
        sl = sr = 0
        
        if @scroll
            s = 1
            if @feats.scrllr
                sr = s
                @scroll.layout x+w-sr y   s   h 
            else
                sl = s
                @scroll.layout x      y   s   h 
            
        if @gutter
            g = @state.gutterWidth()
            @gutter.layout    x+sl    y   g   h
            
        if @mapscr
            m = @mapscr.visible() ? 12 : 0
            @mapscr.layout x+w-sr-12  y  12   h
            
        @cells.layout x+sl+g  y   w-s-g-m    h
        
        @complete?.onEditorLayout()
        
        @state.initView()
                
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        super event
        
        ret = @mapscr?.onMouse(event)   ; ⮐ ret if ret?.redraw
        ret = @scroll?.onMouse(event)   ; ⮐ ret if ret?.redraw
        ret = @complete?.onMouse(event) ; ⮐ ret if ret?.redraw
                        
        false
                
    # 000   000  000   000  00000000  00000000  000      
    # 000 0 000  000   000  000       000       000      
    # 000000000  000000000  0000000   0000000   000      
    # 000   000  000   000  000       000       000      
    # 00     00  000   000  00000000  00000000  0000000  
    
    onWheel: event =>
        
        ⮐ if event.cell[1] >= @cells.y + @cells.rows
                
        inside  = @cells.isInsideEvent(event)
        inside |= @scroll?.cells.isInsideEvent(event)
        inside |= @gutter?.cells.isInsideEvent(event)
        inside |= @mapscr?.cells.isInsideEvent(event)
        
        ⮐ if not inside

        if @complete?
            if res = @complete.onWheel(event)
                ⮐  res

        switch event.dir
            'up' 'down' 'left' 'right' ➜ @state.scrollView(event.dir)
            
        redraw:true
            
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
            
    isCursorInEmpty: cursor =>
        
        cursor ?= @state.mainCursor()
        
        belt.isLinesPosOutside @state.s.lines cursor
        
    isCursorVisible: cursor =>
        
        cursor ?= @state.mainCursor()
                
        v = @state.s.view
        
        v[0] <= cursor[0] < v[0] + @cells.cols and v[1] <= cursor[1] < v[1] + @cells.rows
        
    # 00000000   0000000    0000000  000   000   0000000  
    # 000       000   000  000       000   000  000       
    # 000000    000   000  000       000   000  0000000   
    # 000       000   000  000       000   000       000  
    # 000        0000000    0000000   0000000   0000000   
    
    grabFocus: =>
    
        post.emit 'focus' @name
        @redraw()
        
    hasFocus: ->
        
        @state.hasFocus
        
    onFocus: name =>
        
        @state.hasFocus = (name == @name)
        
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: => post.emit 'redraw'
                    
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key event =>
        
        ⮐  if not @hasFocus()
        
        if @complete?
            ⮐  if @complete.handleKey(key event) != 'unhandled'

        if @state.handleKey(key event) != 'unhandled'
            @complete?.hide()
            ⮐ 
        
        if valid event.char
            @state.insert event.char
            @complete?.complete()                
        else
            if key not in ['shift' 'ctrl' 'alt' 'cmd'] 
                log 'editor.onKey?' key

export editor
