# ████████   ███      ███   ███   ███████ 
# ███   ███  ███      ███   ███  ███   ███
# ███████    ███      ███   ███  █████████
# ███   ███  ███      ███   ███  ███   ███
# ███   ███  ███████   ███████   ███   ███

use pars klss vars

class Rlua
    
    code    : string
    s       : string
    incurly : int

    $: ➜string ->
        s = ""
        s &= "▸"
        s &= @code
        s &= "◂"
        s
    
    add: ◇string text -> @s &= text
    spc:              -> @s &= " "
    tok: ◇Node n      -> @s &= n.token.str
    rnd: ◇Node n      ->
    rnd: ◇seq[Node] nodes ->
        for i n in nodes
            @rnd n
            if i<nodes.len-1
                @add ", "

    nodeIndent: ◇Node n ➜string ->
    
        switch n.kind 
            ●operation      ➜ ⮐  @nodeIndent n.operand_left
            ●propertyAccess ➜ ⮐  @nodeIndent n.owner
                            ➜ ' '.repeat(n.token.col)
                                
    ▸block: ◇Node n -> 
    
        idt ◇ string
        if n.token.tok == ◂indent
            idt = n.token.str
            @add "\n" & idt
            
        for i exp in n.expressions
        
            if exp.kind in {●class ●struct} or exp.token.tok == ◂assign and exp.operand_right.kind in {●func} or exp.token.tok == ◂verbatim
                @add "\n" & idt
        
            @rnd exp
            
            if i < n.expressions.len-1
                if n.expressions[i+1].token.line > exp.token.line
                    @add "\n" & idt
                    if n.expressions[i+1].token.line > exp.token.line+1
                        @add "\n" & idt
                else
                    @add " "

    ▸semicolon: ◇Node n -> 
    
        for i exp in n.expressions
            @rnd exp
            if i < n.expressions.len-1
                @add " ; "

    ▸signature: ◇Node n ->
    
        @add "("
        @rnd n.sig_args
        @add ")"

    sigBody: ◇Node n ->
    
        if n.func_signature
            @rnd n.func_signature
        else
            @add "()"
        
        if n.func_body
            @add " "
            if n.func_body.kind in {●semicolon ●if ●while ●for ●switch}
                @add "\n"
                idt = if n.func_signature ➜ n.func_signature.token.col ➜ n.token.col
                @add ' '.repeat(idt)
            crly = @incurly
            @incurly = 0
            @rnd n.func_body
            @incurly = crly
            
    ▸func: ◇Node n -> 
        
        if n.token.tok == ◂method
            @add "method "
        else
            @add "function "
            
        @sigBody n
        
        if n.func_body and n.func_body.kind == ●block
            idt = ' '.repeat n.func_body.token.str.len-4
            @add "\n" & idt
        else
            @add " "
            
        @add "end"
    
    ▸function: ◇Node n -> 
    
        f = n.operand_right
        
        if f.token.tok == ◂method
            @add "method "
        else
            @add "function "
        
        if n.operand_left.token.str[^1] == '$'
            @add n.operand_left.token.str[0..^2] & "__tostring"
        else
            @rnd n.operand_left

        @sigBody f
        
        idt = @nodeIndent n.operand_left
        @add "\n" & idt & "end"
        
    ▸operation: ◇Node n -> 
    
        if n == nil or n.operand_left == nil or n.operand_right == nil
            log &"DAFUK? {n} {n.token}"
            ⮐  
    
        if n.token.tok == ◂assign 
            if n.operand_right.token.tok in {◂func ◂method}
                @▸function n
                ⮐  
                
        if n.token.tok == ◂bitor
            @add "bit.bor("
            @rnd n.operand_left
            @add ", "
            @rnd n.operand_right
            @add ")"
            ⮐  
            
        if n.token.tok == ◂is
            @add "is("
            @rnd n.operand_left
            @add ", "
            @rnd n.operand_right
            @add ")"
            ⮐  
    
        outerbr = n.token.tok notin { ◂ampersand } + assignToks
        @add("(") if outerbr
        @rnd n.operand_left
        @spc()
        switch n.token.tok
            ◂ampersand  ➜ @add ".."                
            ◂not_equal  ➜ @add "~="
            ◂plus_assign 
                @add "= " 
                @rnd n.operand_left
                @add " +"
            ◂minus_assign 
                @add "= " 
                @rnd n.operand_left
                @add " -"
            ◂multiply_assign 
                @add "= " 
                @rnd n.operand_left
                @add " *"
            ◂divide_assign 
                @add "= " 
                @rnd n.operand_left
                @add " /"
            ◂qmark_assign
                @add "= " 
                @rnd n.operand_left
                @add " or"
            ◂ampersand_assign
                @add "= " 
                @rnd n.operand_left
                @add " .."
            ◂and        ➜ @add 'and'
            ◂or         ➜ @add 'or'
                        ➜ @tok n
        @spc()
        rbr = n.token.tok != ◂assign and n.token.tok in assignToks and n.operand_right.kind notin {●literal ●string}
        @add("(") if rbr
        @rnd n.operand_right
        @add(")") if rbr
        @add(")") if outerbr

    ▸literal: ◇Node n -> 
    
        switch n.token.str
            "●dir"  ➜ @add "currentSourcePath().split(\"/\")[0..^2].join(\"/\")"
            "●file" ➜ @add "currentSourcePath()"
                    ➜ @tok n
        
    ▸let: ◇Node n -> 
    
        @add "local "
        @rnd n.let_expr
    
    ▸preOp: ◇Node n -> 
    
        switch n.token.tok 
            ◂dollar ➜ @add "tostring("
            ◂not    ➜ @add "not "
            ◂log    ➜ @add "print("
                    ➜ @tok n
            
        @rnd n.operand
        
        if n.token.tok in {◂log ◂dollar}
            @add ")"
        
    ▸postOp: ◇Node n -> 
    
        @rnd n.operand
        @tok n
        
    ▸propertyAccess: ◇Node n -> 
    
        if n.property.token.str in ["len" "length"]
            @add "#"
            @rnd n.owner
        else
            @rnd n.owner
            @tok n
            @rnd n.property
    
    ▸arrayAccess: ◇Node n -> 
    
        @rnd n.array_owner
        @add "["
        if n.array_index.kind == ●preOp and n.array_index.token.tok == ◂caret
            @add "#"
            @rnd n.array_owner
            if n.array_index.operand.token.str != "1"
                @add "+1-"
                @rnd n.array_index.operand
        else
            @rnd n.array_index
        @add "]"
                        
    ▸var: ◇Node n ->
    
        if n.var_name.kind == ●list
            @add "("
        @rnd n.var_name
        if n.var_name.kind == ●list
            @add ")"
        if n.var_type
            @add " : "
            @rnd n.var_type
        if n.var_value
            @add " = "
            @rnd n.var_value
    
    ▸arg: ◇Node n ->
    
        @rnd n.arg_name
        if n.arg_type
            @add " : "
            @rnd n.arg_type
        if n.arg_value
            @add " = "
            @rnd n.arg_value
    
    ▸string: ◇Node n -> 
    
        delimiter = n.token.str
        triple = delimiter == "\"\"\""
        
        if triple
            @add "[["
        else    
            @add delimiter
        
        sct = n.string_content.token.str
    
        mill = high(int)
        if delimiter == "\"\"\""
            lines = n.string_content.token.str.split "\n"
            if lines.len > 1
                ill = indentLen lines[1..^1]
                mill = min mill ill
                    
            for stripol in n.string_stripols
                if stripol.stripol_content
                    lines = stripol.stripol_content.token.str.split "\n"
                    if lines.len > 1
                        ill = indentLen lines[1..^1]
                        mill = min mill ill
            
        demill = ◇Node n -> 
            if mill == 0
                @tok n
            else
                lines = n.token.str.split "\n"
                for i in 1...lines.len
                    lines[i] = lines[i][mill..^1]
                @add lines.join("\n")
            
        demill n.string_content
        for stripol in n.string_stripols
            if triple
                @add "]] .. "
            else
                @add "\" .. "
            @add "tostring("
            @rnd stripol.stripol_xprssns
            @add ")"
            if triple
                @add " .. [["
            else
                @add " .. \""
            if stripol.stripol_content != nil
                demill stripol.stripol_content
        
        if triple
            @add "]]"
        else    
            @add delimiter
        
    ▸use: ◇Node n -> 
    
        split = n.use_module.token.str.split " "
        
        modName = ◇string s ➜string ->
            if count(split[0] "/") > 0
                slash.name(split[0])
            elif count(split[0] ".") > 0
                slash.ext(split[0])
            else
                split[0]
        
        while split.len > 1
            @add "#{modName(split[0])} = require \"#{split[0]}\"\n" & @nodeIndent(n)
            split = split.shift()
        
        @add "#{modName(split[0])} = require \"#{split[0]}\""
        
        # if n.use_kind != nil and n.use_kind.token.str == '▪'
        #     @add "/["
        #     @rnd n.use_items
        #     @add "]"
            
    ▸color: ◇Node n -> 
    
        ansi = {
            "r": "\\x1b[31m"  "g": "\\x1b[32m"  "b": "\\x1b[34m"
            "c": "\\x1b[36m"  "m": "\\x1b[35m"  "y": "\\x1b[33m"
            "w": "\\x1b[37m"  "d": "\\x1b[90m"  "s": "\\x1b[30m"
            "R": "\\x1b[41m"  "G": "\\x1b[42m"  "B": "\\x1b[44m"
            "C": "\\x1b[46m"  "M": "\\x1b[45m"  "Y": "\\x1b[43m"
            "W": "\\x1b[47m"  "D": "\\x1b[100m" "S": "\\x1b[40m"
            "+": "\\x1b[1m" 
            "-": "\\x1b[2m" 
            "i": "\\x1b[3m" 
            "x": "\\x1b[9m" 
            "n": "\\x1b[7m"
            "_": "\\x1b[4m" 
            ".": "\\x1b[4:4m"
            "~": "\\x1b[4:3m"
            }.toTable()
            
        fg = ◇int r ◇int g ◇int b ➜string -> "\\x1b[38;2;#{r};#{g};#{b}m"
        bg = ◇int r ◇int g ◇int b ➜string -> "\\x1b[48;2;#{r};#{g};#{b}m"
        
        @add "\""
        code = n.color_value.token.str
        hex = {'0'..'9' 'a'..'f'}
        @add "\\x1b[0m"
        if code.len == 3 and code[0] in hex and code[1] in hex and code[2] in hex
            r = parseHexInt($code[0])*16
            g = parseHexInt($code[1])*16
            b = parseHexInt($code[2])*16
            @add fg(r g b)
        elif code.len
            for chr in code
                if ansi[$chr]
                    @add ansi[$chr]
        @add "\""
        
    ▸comment: ◇Node n -> 
    
        if n.token.str == "###"
            @add "--[["
        else
            @add "--"
            
        @tok n.comment_content
        
        if n.token.str == "###"
            @add "--]]"
        
    ▸call: ◇Node n ->
    
        if n.callee.token.str == "log"
            @add "print"
        elif n.callee.token.str == "▴"
            @add "assert"
        elif n.callee.token.str[0] == '@'
            @add n.callee.token.str[1..^1]
            @add "().init"
        else
            @rnd n.callee
            
        if n.callee.token.str != "export"
            @add "("
        else
            @add " "
            
        @rnd n.call_args
        
        if n.callee.token.str != "export"
            @add ")"
            
    ▸if: ◇Node n ->
    
        idt  = @nodeIndent n
        line = n.token.line
        ml   = false
        @tok n
        @add " "
        
        for i condThen in n.cond_thens
            if i > 0
                if condThen.token.line > line
                    @add "\n" & idt & "elseif "
                    ml = true
                else
                    @add " elseif "
            @rnd condThen.condition
            @add " then "
            if condThen.then_branch.kind == ●block ➜ ml = true
            @rnd condThen.then_branch
            
        if n.else_branch   
            if n.else_branch.token.line > line
                @add "\n" & idt & "else "
                ml = true
            else
                @add " else "
            @rnd n.else_branch
        
        if ml ➜ @add("\n" & idt) ➜ @add(" ")
        @add "end"
            
    ▸for: ◇Node n ->
    
        @add "for "
        if n.for_value.kind == ●list
            for i,v in n.for_value.list_values
                @rnd v
                if i < n.for_value.list_values.len-1
                    @add ", "
        else
            @rnd n.for_value
            
        if n.for_range.kind == ●range
            if n.for_range.token.tok == ◂doubledot
                @add " in iter("
                @rnd n.for_range.range_start
                @add ", "
                @rnd n.for_range.range_end
                @add ")"
            else
                @add " = "
                @rnd n.for_range.range_start
                @add ", "
                if n.for_range.token.tok == ◂tripledot
                    @rnd n.for_range.range_end
                    @add "-1"
                else
                    @rnd n.for_range.range_end
        else
            @add " in "
            @rnd n.for_range
        @add " do "
        if n.for_body
            @rnd n.for_body
            if n.for_body.kind == ●block ➜ @add("\n" & @nodeIndent(n)) ➜ @add(" ")
        @add "end"
        
    ▸while: ◇Node n ->

        @add "while "
        @rnd n.while_cond
        @add " do "
        @rnd n.while_body
        
        if n.while_body.kind == ●block ➜ @add("\n" & @nodeIndent(n)) ➜ @add(" ")
        @add "end"
        
    ▸list: ◇Node n ->
        
        parens = n.list_values and n.list_values[0].kind in {●member ●func}
        @add("(") if parens
        for i item in n.list_values
            @rnd item
            if i < n.list_values.len-1
                if item.token.str notin ["ref" "const"]
                    @add ","
                @add " "
        @add(")") if parens
    
    ▸curly: ◇Node n ->
    
        @incurly += 1
        @add "{"
        ml   = false
        line = n.token.line
        idt  ◇ string
        for i item in n.list_values
            if item.token.line > line
                idt = @nodeIndent item
                @add "\n" & idt
                ml = true
                
            @rnd item
            
            if i < n.list_values.len-1
                @add ", "
            line = item.token.line
        if ml ➜ @add "\n" & idt
        @add "}"
        @incurly -= 1
    
    ▸squarely: ◇Node n ->
    
        @add "array("
        # @add "{"
        for i item in n.list_values
            @rnd item
            if i < n.list_values.len-1
                @add ", "
        # @add "}"
        @add ")"
        
    ▸range: ◇Node n -> 
    
        @rnd n.range_start
        if n.token.str == "..."
            @add "..."
        else
            @tok n
        @rnd n.range_end
            
    ▸return: ◇Node n ->
    
        @add "return"
        if n.return_value
            @spc()
            @rnd n.return_value
    
    ▸discard: ◇Node n ->
    
        @add "discard"
        if n.discard_value
            @spc()
            @rnd n.discard_value
    
    ▸quote: ◇Node n ->
    
        @add "quote do: "
        @rnd n.quote_body
         
    ▸switch: ◇Node n ->
    
        idt = ' '.repeat n.token.col
        
        @add "if "        
        
        cdt = ' '.repeat n.switch_cases[0].token.col
        
        for i caseNode in n.switch_cases
            if i > 0
                @add "\n" & idt & "elseif "
            for j whenNode in caseNode.case_when
                if j > 0
                    @add " or "
                @add "("
                @rnd n.switch_value
                @add " == "
                @rnd whenNode
                @add ")"
            @add " then "
            @rnd caseNode.case_then
        
        if n.switch_default
            @add "\n" & idt & "else "
            @rnd n.switch_default
            
        @add "\n" & idt & "end"
            
    ▸enum: ◇Node n ->
    
        @add "type "
        @rnd n.enum_name
        @add " = enum"
        @rnd n.enum_body
        
    ▸class: ◇Node n ->
    
        @add "local "
        @rnd n.class_name
        @add " = class(\""
        @rnd n.class_name
        @add "\""
        if n.class_parent
            @add ", "
            @tok n.class_parent
        @add ")"
        @incurly += 1
        @rnd n.class_body
        @incurly -= 1

    ▸struct: ◇Node n ->
    
        @add "type "
        @rnd n.class_name
        @add " = object"
        if n.class_parent
            @add " of "
            @tok n.class_parent
        @rnd n.class_body
    
    ▸member: ◇Node n ->
    
        if n.member_key.kind == ●string
            @add "["
            @rnd n.member_key
            @add "] = "
            @rnd n.member_value
        else
            @rnd n.member_key
            if @incurly
                @add " = "
            else
                @add ":"
            @rnd n.member_value
    
    ▸testCase: ◇Node n ->
    
        @add "test.cmp("
        @rnd n.test_value
        @add ", "
        @rnd n.test_expected
        @add ")"
    
    ▸testSuite: ◇Node n ->
    
        @add "test("
        @add "\"" 
        @add n.token.str[4..^1] 
        @add "\", function()"
        @rnd n.test_block
        @add "\n    end)"
    
    rnd: ◇Node n ->
    
        ⮐  if n == nil
        
        switch n.kind
        
            ●block          ➜ @▸block          n
            ●semicolon      ➜ @▸semicolon      n
            ●if             ➜ @▸if             n
            ●switch         ➜ @▸switch         n
            ●func           ➜ @▸func           n
            ●signature      ➜ @▸signature      n
            ●call           ➜ @▸call           n
            ●operation      ➜ @▸operation      n
            ●postOp         ➜ @▸postOp         n
            ●preOp          ➜ @▸preOp          n
            ●for            ➜ @▸for            n
            ●while          ➜ @▸while          n
            ●list           ➜ @▸list           n
            ●curly          ➜ @▸curly          n
            ●squarely       ➜ @▸squarely       n
            ●range          ➜ @▸range          n
            ●string         ➜ @▸string         n
            ●comment        ➜ @▸comment        n
            ●use            ➜ @▸use            n
            ●propertyAccess ➜ @▸propertyAccess n
            ●arrayAccess    ➜ @▸arrayAccess    n
            ●var            ➜ @▸var            n
            ●arg            ➜ @▸arg            n
            ●let            ➜ @▸let            n
            ●return         ➜ @▸return         n
            ●discard        ➜ @▸discard        n
            ●enum           ➜ @▸enum           n
            ●class          ➜ @▸class          n
            ●struct         ➜ @▸struct         n
            ●quote          ➜ @▸quote          n
            ●member         ➜ @▸member         n
            ●testCase       ➜ @▸testCase       n
            ●testSuite 
            ●testSection    ➜ @▸testSuite      n
            ●literal        ➜ @▸literal        n
            ●color          ➜ @▸color          n
            ●type 
            ●keyword        ➜ @tok             n
                            ➜ 
                              log "rlua? #{n} #{n.kind}"
                              @tok n

renderLua* = ◇string code autovar=true ➜string ->

    root = ast code "lua"
    
    ⮐  "" if not root
    
    root = classifyLua root
    
    if autovar ➜ root = variables root "lua"
    
    r = Rlua code:code
    r.rnd root
    r.s
    
renderLuaFile* = ◇string file ➜string ->

    profileScope file

    fileOut = file.swapLastPathComponentAndExt "kua" "lua"
    kuaCode = file.read()
    luaCode = renderLua kuaCode
    if luaCode
        log luaCode
        fileOut.write luaCode
        fileOut
    else
        ""        
                            