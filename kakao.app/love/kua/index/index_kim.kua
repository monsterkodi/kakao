###
    ███  ███   ███  ███████    ████████  ███   ███          ███   ███  ███  ██     ██
    ███  ████  ███  ███   ███  ███        ███ ███           ███  ███   ███  ███   ███
    ███  ███ █ ███  ███   ███  ███████     █████            ███████    ███  █████████
    ███  ███  ████  ███   ███  ███        ███ ███           ███  ███   ███  ███ █ ███
    ███  ███   ███  ███████    ████████  ███   ███  ██████  ███   ███  ███  ███   ███
###

use ../../kxk ▪ kstr slash kermit
use           ◆ index_utils

function index_kim

    @: ->
                        
    # 00000000    0000000   00000000    0000000  00000000
    # 000   000  000   000  000   000  000       000     
    # 00000000   000000000  0000000    0000000   0000000 
    # 000        000   000  000   000       000  000     
    # 000        000   000  000   000  0000000   00000000

    parseLine: index line ->
        
        if match = kermit.lineMatch line 'type ●name = ref object'
            match.type = 'object'
            match.line = index
            @result.classes.push match
            ⮐ 
        
        if match = kermit.lineMatch line 'class ●name'
            match.type = 'class'
            match.line = index
            @result.classes.push match
            ⮐ 
    
        validFuncName =  name  -> name not in ['if''for''while''switch''return''catch']
        validFuncMatch = match -> match and validFuncName(match.name)
                
        funcMatch = ptn ->
            
            match = kermit.lineMatch line ptn ['(' ')' '"' '.' ',' "'"]
            if validFuncMatch match
                match
        
        if @result.classes.length
            
            className = @result.classes[-1].name
            classType = @result.classes[-1].type
                        
            addMeth = name opt={} =>
                
                fnc = method:name line:index class:className
                fnc.bound = true if opt.bound
                @result.funcs.push fnc
                null
                                
            switch classType
                'object'
                    if match = kermit.lineMatch(line "proc ●name(●this:#{className}○args)" ['(' ')']) ➜ addMeth match.name
                'class'
                    if match = kermit.lineMatch(line "●name: ○args ->" [':']) ➜ addMeth match.name
                    if match = kermit.lineMatch(line "●name: ○args =>" [':']) ➜ addMeth match.name bound:true
                    
        addFunc = name opt={} =>
            
            fnc = name:name, line:index
            fnc.test  = true if opt.test
            fnc.bound = true if opt.bound
            fnc.async = true if opt.async
            @result.funcs.push fnc
            null
        
        if match = kermit.lineMatch(line 'proc ●name ○args' ['(' ')']) ➜ addFunc match.name bound:true
        if match = kermit.lineMatch(line 'macro ●name ○args' ['(' ')']) ➜ addFunc match.name bound:true async:true
        if match = kermit.lineMatch(line 'template ●name ○args' ['(' ')']) ➜ addFunc match.name async:true
        
        if match = kermit.lineMatch(line '●name = ○args ->') ➜ addFunc match.name
        if match = kermit.lineMatch(line '▸ ○name') ➜ addFunc line test:true
                    
    # 00000000    0000000   00000000    0000000  00000000       000000000  00000000  000   000  000000000
    # 000   000  000   000  000   000  000       000               000     000        000 000      000
    # 00000000   000000000  0000000    0000000   0000000           000     0000000     00000       000
    # 000        000   000  000   000       000  000               000     000        000 000      000
    # 000        000   000  000   000  0000000   00000000          000     00000000  000   000     000

    parse: text ->
        
        lines = text.split '\n'

        @result = classes:[] funcs:[] lines:lines.length
        
        for lineText,lineIndex in lines
            @parseLine lineIndex lineText

        @result

export index_kim