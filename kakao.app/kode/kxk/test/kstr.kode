###
000000000  00000000   0000000  000000000          000   000   0000000  000000000  00000000 
   000     000       000          000             000  000   000          000     000   000
   000     0000000   0000000      000             0000000    0000000      000     0000000  
   000     000            000     000             000  000        000     000     000   000
   000     00000000  0000000      000     000000  000   000  0000000      000     000   000
###

use .. ◆ kstr

▸ kstr

    ▸ str
    
        kstr a:1 b:2 ▸ """a   1\nb   2"""
        kstr [1 2 3] ▸ """1\n2\n3"""

    ▸ encode
     
        kstr.encode(" hello / world !?")    ▸ '%20hello%20/%20world%20!?'
        kstr.encode("</>")                  ▸ '%3C/%3E'

    ▸ escapeRegexp
        
        kstr.escapeRegexp('a/b.txt') ▸ 'a\\/b\\.txt'
        
    #  0000000  000000000  00000000   000  00000000   
    # 000          000     000   000  000  000   000  
    # 0000000      000     0000000    000  00000000   
    #      000     000     000   000  000  000        
    # 0000000      000     000   000  000  000        
    
    ▸ lstrip
        
        kstr.lstrip()                       ▸ ''
        kstr.lstrip('')                     ▸ ''
        kstr.lstrip('   y')                 ▸ 'y'
        kstr.lstrip(' ')                    ▸ ''
        kstr.lstrip('x ' 'x')               ▸ ' '
        kstr.lstrip(' yxy ' ' y')           ▸ 'xy '

    ▸ rstrip
        
        kstr.rstrip()                       ▸ ''
        kstr.rstrip('')                     ▸ ''
        kstr.rstrip('   y' 'y')             ▸ '   '
        kstr.rstrip(' ')                    ▸ ''
        kstr.rstrip(' x' 'x')               ▸ ' '
        kstr.rstrip(' yxy ' ' y')           ▸ ' yx'

    ▸ strip
        
        kstr.strip()                        ▸ ''
        kstr.strip('')                      ▸ ''
        kstr.strip('abc')                   ▸ 'abc'
        kstr.strip('123   y  123' '123')    ▸ '   y  '
        kstr.strip(' x y z ' 'xyz ')        ▸ ''
        kstr.strip('x x' 'x')               ▸ ' '
        kstr.strip(' yxy ' ' y')            ▸ 'x'

    ▸ trim
        
        kstr.trim('123   y  123' '123')     ▸ '   y  '
        kstr.ltrim(' yxy ' ' y')            ▸ 'xy '
        kstr.rtrim('   y' 'y')              ▸ '   '
        
    ▸ splice
    
        kstr.splice 'hello' 0  1        ▸ 'ello' 
        kstr.splice 'hello' 0  3        ▸ 'lo' 
        kstr.splice 'hello' 0  3 'o'    ▸ 'olo'
        kstr.splice ''      0  0 'new'  ▸ 'new'
        kstr.splice 'abc'   3  0 'd'    ▸ 'abcd'
        kstr.splice 'abc'   2  0 'd'    ▸ 'abdc'
        kstr.splice 'abc'  -1  0 'd'    ▸ 'abdc'
        kstr.splice 'abc'  -2  0 'd'    ▸ 'adbc'
        kstr.splice 'abc'   1 -2 '23'   ▸ 'a23'
        
    # 000       0000000  000   000  000000000  
    # 000      000       0000  000     000     
    # 000      000       000 0 000     000     
    # 000      000       000  0000     000     
    # 0000000   0000000  000   000     000     
    
    ▸ lcnt
        
        s = 'abc'
        n = 123
        kstr.lcnt()                      ▸ 0
        kstr.lcnt(null, 'n')             ▸ 0
        kstr.lcnt(undefined, 'u')        ▸ 0
        kstr.lcnt(Infinity, 'Inf')       ▸ 0
        kstr.lcnt({}, '{')               ▸ 0
        kstr.lcnt([], '[')               ▸ 0
        kstr.lcnt('' 1)                  ▸ 0
        kstr.lcnt('ax' '')               ▸ 0
        kstr.lcnt('' 'xy')               ▸ 0
        kstr.lcnt('abc', Infinity)       ▸ 0
        kstr.lcnt('abc' null)            ▸ 0
        kstr.lcnt('abc' undefined)       ▸ 0
        kstr.lcnt('abc' {})              ▸ 0
        kstr.lcnt('abc' ['ab''b'])       ▸ 0
        kstr.lcnt('abc' ['a''b'])        ▸ 2
        kstr.lcnt(s, 'ac')               ▸ 1
        kstr.lcnt(n, '13')               ▸ 1
        kstr.lcnt(11202, '12')           ▸ 3
        kstr.lcnt('   xx' ' ')           ▸ 3
        kstr.lcnt('12345 blub' '1234')   ▸ 4

    ▸ rcnt
        
        s = 'abc'
        n = 123
        kstr.rcnt()                      ▸ 0
        kstr.rcnt(null, 'n')             ▸ 0
        kstr.rcnt(undefined, 'u')        ▸ 0
        kstr.rcnt(Infinity, 'Inf')       ▸ 0
        kstr.rcnt({}, '{')               ▸ 0
        kstr.rcnt([], '[')               ▸ 0
        kstr.rcnt('' 1)                  ▸ 0
        kstr.rcnt('ax' '')               ▸ 0
        kstr.rcnt('' 'xy')               ▸ 0
        kstr.rcnt('abc', Infinity)       ▸ 0
        kstr.rcnt('abc' null)            ▸ 0
        kstr.rcnt('abc' undefined)       ▸ 0
        kstr.rcnt('abc' {})              ▸ 0
        kstr.rcnt('abc' ['ab''b'])       ▸ 0
        kstr.rcnt('abc' ['c''b'])        ▸ 2
        kstr.rcnt(s, 'ac')               ▸ 1
        kstr.rcnt(n, '23')               ▸ 2
        kstr.rcnt(11202, '02')           ▸ 3
        kstr.rcnt('xx   ' ' ')           ▸ 3
        kstr.rcnt('12345 blub' 'blub')   ▸ 4
        kstr.rcnt('A4──A5  ' ' ')        ▸ 2
        
    # 00000000    0000000   0000000    
    # 000   000  000   000  000   000  
    # 00000000   000000000  000   000  
    # 000        000   000  000   000  
    # 000        000   000  0000000    
    
    ▸ lpad
        
        kstr.lpad('' 4)        ▸ '    '
        kstr.lpad('x' 4)       ▸ '   x'
        kstr.lpad(' xxx ' 2)   ▸ ' xxx '

    ▸ rpad
        
        kstr.rpad('' 4)        ▸ '    '
        kstr.rpad('x' 4)       ▸ 'x   '
        kstr.rpad(' xxx ' 2)   ▸ ' xxx '
 
    #  0000000   000   000   0000000  000  
    # 000   000  0000  000  000       000  
    # 000000000  000 0 000  0000000   000  
    # 000   000  000  0000       000  000  
    # 000   000  000   000  0000000   000  
    
    ▸ ansi2html
         
        a2h = (s,r) -> kstr.ansi2html(s) ▸ r

        a2h 'hello', 'hello'
        a2h r5('red'), '<span style="color:#ff0000;">red</span>'
        a2h """
            #{r5('red')}
            #{g5('green')}
            """ """
            <span style="color:#ff0000;">red</span>
            <span style="color:#00ff00;">green</span>
            """
        a2h "#{r5('red')}#{g5('green')}", '<span style="color:#ff0000;">red</span><span style="color:#00ff00;">green</span>'
        
    ▸ stripAnsi
         
        kstr.stripAnsi(g5('green')) ▸ 'green'
                 
    # 000000000   0000000   0000000    
    #    000     000   000  000   000  
    #    000     000000000  0000000    
    #    000     000   000  000   000  
    #    000     000   000  0000000    
    
    ▸ detab
        
        kstr.detab('\t\t') ▸ '        '
        kstr.detab('aa\tbb') ▸ 'aa  bb'
       
    # 000000000  000  00     00  00000000  
    #    000     000  000   000  000       
    #    000     000  000000000  0000000   
    #    000     000  000 0 000  000       
    #    000     000  000   000  00000000  
    
    ▸ time number
        
        kstr.time 1                     ▸ '1 ms'
        kstr.time 1000                  ▸ '1 second'
        kstr.time 1001                  ▸ '1 second'
        kstr.time 1999                  ▸ '1 second'
        kstr.time 2000                  ▸ '2 seconds'
        kstr.time 2001                  ▸ '2 seconds'
        kstr.time 59999                 ▸ '59 seconds'
        kstr.time 60000                 ▸ '1 minute'
        kstr.time 120001                ▸ '2 minutes'
        kstr.time 1000*60*60            ▸ '1 hour'
        kstr.time 1000*60*60*24         ▸ '1 day'
        kstr.time 1000*60*60*48         ▸ '2 days'
        kstr.time 1000*60*60*24*30      ▸ '1 month'
        kstr.time 1000*60*60*24*60      ▸ '2 months'
        kstr.time 1000*60*60*24*30*12   ▸ '1 year'
        kstr.time 1000*60*60*24*30*24   ▸ '2 years'
        
    ▸ time bigint
        
        kstr.time BigInt(1)             ▸ '1 ns'
        kstr.time BigInt(1000)          ▸ '1 μs'
        kstr.time BigInt(1001)          ▸ '1 μs'
        kstr.time BigInt(6001)          ▸ '6 μs'
        kstr.time BigInt(1000000)       ▸ '1 ms'
        kstr.time BigInt(1000000000)    ▸ '1 second'
        kstr.time BigInt(2000000000)    ▸ '2 seconds'
        
    # 00000000  000  000      000      00000000  000000000  
    # 000       000  000      000      000          000     
    # 000000    000  000      000      0000000      000     
    # 000       000  000      000      000          000     
    # 000       000  0000000  0000000  00000000     000     
    
    ▸ fillet
    
        kstr.fillet() ▸ []
        kstr.fillet '' ▸ []
        kstr.fillet ' ' ▸ []
        kstr.fillet '\t' ▸ []
        kstr.fillet '\n' ▸ []
        kstr.fillet '\r' ▸ []
        kstr.fillet '   ' ▸ []
        kstr.fillet ' \n \t \r' ▸ []
        kstr.fillet 'abc' ▸ [{match:'abc' index:0 length:3 word:true}]
        kstr.fillet 'a b c' ▸ [{match:'a' index:0 length:1 word:true}, {match:'b' index:2 length:1 word:true}, {match:'c' index:4 length:1 word:true}]
        kstr.fillet ' abc.def ' ▸ [{match:'abc' index:1 length:3 word:true}, {match:'.' index:4 length:1 word:false}, {match:'def' index:5 length:3 word:true}]
        kstr.fillet ' a_c.,:__def ' ▸ [{match:'a_c' index:1 length:3 word:true}, {match:'.,:' index:4 length:3 word:false}, {match:'__def' index:7 length:5 word:true}]
        kstr.fillet '1-2' ▸ [{match:'1' index:0 length:1 word:true}, {match:'-' index:1 length:1 word:false}, {match:'2' index:2 length:1 word:true}]
        
    ▸ unfillet
    
        kstr.unfillet kstr.fillet(' a_c.,:__def ') ▸ 'a_c.,:__def'
        
    ▸ blockFillets
    
        text = """
            hello
                world
            """
        lines = text.split '\n'
        lineFillets = lines.map (line) -> kstr.fillet line
        
        blockFillets = kstr.blockFillets lineFillets
        blockFillets ▸ [
            line:   0
            indent: 0
            fillet: [
                match:   'hello'
                index:   0
                length:  5
                word:    true
                ] 
            blocks: [
                line:  1
                indent: 4
                fillet: [
                    match:  'world'
                    index:  4
                    length:  5
                    word:  true
                    ]
                blocks: []
                ]
            ]
            
        ▸ unfilletBlocks 
        
            r = kstr.unfilletBlocks blockFillets
            r ▸ text + '\n'
            
    ▸ levensthein
    
        kstr.levensthein 'a' 'b' ▸ 1
        kstr.levensthein 'a' 'zZ' ▸ 2
        kstr.levensthein 'a' 'zZZ' ▸ 3
        kstr.levensthein 'a' 'worl' ▸ 4
        kstr.levensthein 'a' 'world' ▸ 5
        kstr.levensthein 'hello' 'world' ▸ 4
        kstr.levensthein 'ko.ko' 'ko' ▸ 3
        kstr.levensthein 'ke.ko' 'ko' ▸ 3
        kstr.levensthein 'xx.ko' 'ko' ▸ 3
        kstr.levensthein 'wool' 'bool' ▸ 1
        kstr.levensthein 'oxol' 'bool' ▸ 2
        
    ▸ weight
    
        kstr.weight ''    ▸ 0
        kstr.weight null  ▸ 0
        kstr.weight ' '   ▸ 0
        kstr.weight '  '  ▸ 0
        kstr.weight('a') > kstr.weight('') ▸ true
        kstr.weight('b') > kstr.weight('a') ▸ true
        kstr.weight('b') > kstr.weight('ab') ▸ true
        kstr.weight('b') > kstr.weight('abZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ') ▸ true
        kstr.weight('b') > kstr.weight('B') ▸ true

    #  0000000  000   000  000   000  000   000  000   000    
    # 000       000   000  000   000  0000  000  000  000     
    # 000       000000000  000   000  000 0 000  0000000      
    # 000       000   000  000   000  000  0000  000  000     
    #  0000000  000   000   0000000   000   000  000   000    
    
    ▸ indexOfClosestNonWS    
    
        kstr.indexOfClosestNonWhitespace ''         0       ▸ -1
        kstr.indexOfClosestNonWhitespace '     '    2       ▸ -1
        kstr.indexOfClosestNonWhitespace null       2       ▸ -1
        kstr.indexOfClosestNonWhitespace undefined  2       ▸ -1
        kstr.indexOfClosestNonWhitespace 'hello  '  0       ▸ 0
        kstr.indexOfClosestNonWhitespace '  llo  '  0       ▸ 2
        kstr.indexOfClosestNonWhitespace '  llo  '  2       ▸ 2
        kstr.indexOfClosestNonWhitespace '  llo  '  3       ▸ 3
        kstr.indexOfClosestNonWhitespace '  llo  '  4       ▸ 4
        kstr.indexOfClosestNonWhitespace '  llo  '  5       ▸ 4
        kstr.indexOfClosestNonWhitespace '  llo  '  6       ▸ 4
        kstr.indexOfClosestNonWhitespace '  l  '    0       ▸ 2
        kstr.indexOfClosestNonWhitespace '  l  '    -1      ▸ 2
        kstr.indexOfClosestNonWhitespace '  l  '    2       ▸ 2
        kstr.indexOfClosestNonWhitespace '  l  '    100     ▸ 2
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 0  ▸ 1
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 1  ▸ 1
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 2  ▸ 1
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 3  ▸ 1
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 4  ▸ 6
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 5  ▸ 6
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 6  ▸ 6
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 7  ▸ 6
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 8  ▸ 10
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 9  ▸ 10
        kstr.indexOfClosestNonWhitespace ' 1    6   a  ' 10 ▸ 10
        
    ▸ rangeOfClosestChunk
    
        kstr.rangeOfClosestChunk ''         0    ▸ undefined
        kstr.rangeOfClosestChunk '     '    2    ▸ undefined
        kstr.rangeOfClosestChunk null       2    ▸ undefined
        kstr.rangeOfClosestChunk undefined  2    ▸ undefined
        
        kstr.rangeOfClosestChunk '  word '  -2   ▸ [2 6]
        kstr.rangeOfClosestChunk '  word '  0    ▸ [2 6]
        kstr.rangeOfClosestChunk '  word '  1    ▸ [2 6]
        kstr.rangeOfClosestChunk '  word '  2    ▸ [2 6]
        kstr.rangeOfClosestChunk '  word '  5    ▸ [2 6]
        kstr.rangeOfClosestChunk '  word '  7    ▸ [2 6]
        kstr.rangeOfClosestChunk '  word '  100  ▸ [2 6]
        
        kstr.rangeOfClosestChunk '  hello   word !'  0    ▸ [2 7]
        kstr.rangeOfClosestChunk '  hello   word !'  2    ▸ [2 7]
        kstr.rangeOfClosestChunk '  hello   word !'  7    ▸ [2 7]
        kstr.rangeOfClosestChunk '  hello   word !'  8    ▸ [10 14]
        kstr.rangeOfClosestChunk '  hello   word !'  9    ▸ [10 14]
        kstr.rangeOfClosestChunk '  hello   word !'  14   ▸ [15 16]
        kstr.rangeOfClosestChunk '  hello   word !'  15   ▸ [15 16]
        kstr.rangeOfClosestChunk '  hello   word !'  100  ▸ [15 16]
        
    # 000   000   0000000   00000000   0000000      
    # 000 0 000  000   000  000   000  000   000    
    # 000000000  000   000  0000000    000   000    
    # 000   000  000   000  000   000  000   000    
    # 00     00   0000000   000   000  0000000      
    
    ▸ isAlphaNumeric
    
        kstr.isAlphaNumeric 'A'     ▸ true
        kstr.isAlphaNumeric 'a'     ▸ true
        kstr.isAlphaNumeric '1'     ▸ true
        kstr.isAlphaNumeric '0'     ▸ true
        kstr.isAlphaNumeric '_'     ▸ true
        kstr.isAlphaNumeric ' '     ▸ false
        kstr.isAlphaNumeric '@'     ▸ false
        kstr.isAlphaNumeric "#"     ▸ false
        kstr.isAlphaNumeric "{"     ▸ false
        kstr.isAlphaNumeric "+"     ▸ false
        kstr.isAlphaNumeric "-"     ▸ false
        kstr.isAlphaNumeric "="     ▸ false
        kstr.isAlphaNumeric '.'     ▸ false
        kstr.isAlphaNumeric 'a_1'   ▸ true
        kstr.isAlphaNumeric '981'   ▸ true
        kstr.isAlphaNumeric '9.1'   ▸ false
        kstr.isAlphaNumeric 'a.1'   ▸ false
        kstr.isAlphaNumeric ' a_1 ' ▸ false
        
    ▸ rangeOfClosestWord 
    
        kstr.rangeOfClosestWord ''         0    ▸ undefined
        kstr.rangeOfClosestWord '     '    2    ▸ undefined
        kstr.rangeOfClosestWord null       2    ▸ undefined
        kstr.rangeOfClosestWord undefined  2    ▸ undefined
    
        kstr.rangeOfClosestWord '  word '  -2   ▸ [2 6]
        kstr.rangeOfClosestWord '  word '  0    ▸ [2 6]
        kstr.rangeOfClosestWord '  word '  1    ▸ [2 6]
        kstr.rangeOfClosestWord '  word '  2    ▸ [2 6]
        kstr.rangeOfClosestWord '  word '  5    ▸ [2 6]
        kstr.rangeOfClosestWord '  word '  7    ▸ [2 6]
        kstr.rangeOfClosestWord '  word '  100  ▸ [2 6]
        
        kstr.rangeOfClosestWord '  hello   word !'  0    ▸ [2 7]
        kstr.rangeOfClosestWord '  hello   word !'  2    ▸ [2 7]
        kstr.rangeOfClosestWord '  hello   word !'  7    ▸ [2 7]
        kstr.rangeOfClosestWord '  hello   word !'  8    ▸ [10 14]
        kstr.rangeOfClosestWord '  hello   word !'  9    ▸ [10 14]
        kstr.rangeOfClosestWord '  hello   word !'  14   ▸ [10 14]
        kstr.rangeOfClosestWord '  hello   word !'  15   ▸ [10 14]
        
    ▸ indexOfClosestAlphaNumeric
    
        kstr.indexOfClosestAlphaNumeric '  hello   word !'  8  ▸ 10
        kstr.indexOfClosestAlphaNumeric '  hello   word !'  15 ▸ 13
        
    #  0000000   0000000   000       0000000   00000000   
    # 000       000   000  000      000   000  000   000  
    # 000       000   000  000      000   000  0000000    
    # 000       000   000  000      000   000  000   000  
    #  0000000   0000000   0000000   0000000   000   000  
    
    ▸ hexColor
    
        kstr.hexColor null                  ▸ undefined
        kstr.hexColor 'dead'                ▸ undefined
        kstr.hexColor "#dead"               ▸ undefined
        kstr.hexColor 'alive?'              ▸ undefined
        kstr.hexColor 'deadbeef'            ▸ undefined
        
        kstr.hexColor 0                     ▸ '#000000'
        kstr.hexColor 128<<8                ▸ '#008000'
        kstr.hexColor 255<<16               ▸ '#ff0000'
        kstr.hexColor [0 0 0]               ▸ '#000000'
        kstr.hexColor [0 255 0]             ▸ '#00ff00'
        kstr.hexColor [255 255 0]           ▸ '#ffff00'
        
        kstr.hexColor "#ead"                ▸ [238 170 221]
        kstr.hexColor "#adbeef"             ▸ [173 190 239]
        kstr.hexColor "#ffffff"             ▸ [255 255 255]
        kstr.hexColor "#fff"                ▸ [255 255 255]
        kstr.hexColor "#ffff00"             ▸ [255 255   0]
        kstr.hexColor "#ff0"                ▸ [255 255   0]
        
        kstr.hexColor 'rgb(255,100,0)'      ▸ [255 100   0]
        kstr.hexColor 'rgba(255,100,0)'     ▸ [255 100   0]
        kstr.hexColor 'rgba(255,100,0,0)'   ▸ [  0   0   0]
        kstr.hexColor 'rgba(255,100,0,1)'   ▸ [255 100   0]
        kstr.hexColor 'rgba(255,100,0,0.5)' ▸ [127  50   0]
        
        kstr.hexColor 'rgb(a,b,c)'          ▸ undefined
        kstr.hexColor 'rgba(a,b,c)'         ▸ undefined
        kstr.hexColor 'rgba(a,b,c,d)'       ▸ undefined
        kstr.hexColor 'rgba(-1,-2,-3)'      ▸ undefined
        kstr.hexColor 'rgba(256,256,256)'   ▸ undefined
        kstr.hexColor 'rgba(255,100,0,1.1)' ▸ undefined
        kstr.hexColor 'rgba(255,100,0,-1)'  ▸ undefined
        
    ▸ scaleColor
    
        kstr.scaleColor 'ffff00' 1    ▸ '#ffff00'
        kstr.scaleColor 'ffff00' 0.9  ▸ '#e5e500'
        kstr.scaleColor 'ffff00' 0.8  ▸ '#cccc00'
        kstr.scaleColor 'ffff00' 0.7  ▸ '#b2b200'
        kstr.scaleColor 'ffff00' 0.6  ▸ '#999900'
        kstr.scaleColor 'ffff00'      ▸ '#7f7f00'
        kstr.scaleColor 'ffff00' 0.4  ▸ '#666600'
        kstr.scaleColor 'ffff00' 0.3  ▸ '#4c4c00'
        kstr.scaleColor 'ffff00' 0.2  ▸ '#333300'
        kstr.scaleColor 'ffff00' 0.1  ▸ '#191900'
        kstr.scaleColor 'ffff00' 0    ▸ '#000000'
        