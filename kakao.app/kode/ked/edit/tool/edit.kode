###
    00000000  0000000    000  000000000
    000       000   000  000     000   
    0000000   000   000  000     000   
    000       000   000  000     000   
    00000000  0000000    000     000   
###

use ../../../kxk ▪ kstr kseg
use ../../util   ◆ prof

function edit
    
    # 000  000   000   0000000  00000000  00000000   000000000
    # 000  0000  000  000       000       000   000     000   
    # 000  000 0 000  0000000   0000000   0000000       000   
    # 000  000  0000       000  000       000   000     000   
    # 000  000   000  0000000   00000000  000   000     000   
    
    @insertTextAtPositions: lines text posl ->
                          
        # prof.start 'insert'
        
        ⮐ [lines posl] if empty text
        
        if text == '\t'
            pos  = posl[0]
            text = lpad 4-pos[0]%4 ' '
            
        # log y5("insert text ▸#{text}◂")
            
        text   = kstr.detab text
        txtls  = @seglsForText text  # the text to insert split into segls
        newls  = []                      # list of new lines 
        newpl  = []                      # list of new positions
        rngs   = @rangesForLinesSplitAtPositions lines posl
        before = []
        
        # log y5("insert text ▸#{text}◂") rngs
        
        for rng,idx in rngs
            
            after = @seglsForRange lines rng # all the lines in the current range (after current position)
            
            # log "#{idx} #{rng} after" after
            
            if empty after or empty after[0] 
                before.push [] if posl[-1][1] >= lines.length
            
            if idx > 0                           # start processing ranges after the first position
                # log "#{idx} before" before
                [x y] = posl[idx-1]              # coordinates of current position 
                
                if valid before ➜ line = before.pop() # pop the last line from before the current position
                else              line = newls.pop()  # or the last of the already generated lines
                
                if x > kseg.width(line) and text != '\n'   # if pos is in empty space 
                    line = line.concat(lpad(x-line.length).split('')) # fill line at end with spaces 
                                        
                # log 'line' line line.length x txtls
                
                if txtls.length > 1     # handle multiples lines to insert (including two empty lines when inserting \n)
                    
                    if posl.length > 1 and text != '\n' # insert into multiple cursors (doesn't autoindent)
                        # log 'insert multiple lines into multiple cursors (no autoindent)'
                        insertLineIndex = (idx-1) % txtls.length
                        before.push line.concat(txtls[insertLineIndex])
                        newpl.push [kseg.width(last(before)) newls.length+before.length-1]
                        before.push before.pop().concat(after.shift())
                    else                                 # insert into single cursor with autoindent
                        # log 'insert multiple lines into single cursor with autoindent'
                        posLineIndent = @numIndent line
                        indent = kseg lpad(posLineIndent)
                        before.push line.concat(txtls[0])
                        
                        for insl,lidx in txtls[1..]
                            if lidx < txtls.length-2 or valid insl or text == '\n'
                                # log "insl ▸#{indent}|#{insl}▪"  
                                before.push indent.concat(insl)
                    
                        if x > posLineIndent
                            newpl.push [kseg.width(last(before)) newls.length+before.length-1]
                            before.push before.pop().concat(after.shift())
                        else
                            after.unshift indent.concat(after.shift()) 
                            before.pop() if text == '\n'
                            newpl.push [kseg.width(indent) newls.length+before.length] 
                        
                    newls = newls.concat before
                            
                else                                # if text is the only line to insert
                    newpl.push [kseg.width(line)+kseg.width(txtls[0]) newls.length+before.length] # move position to the end of the inserted text
                    line  = line.concat txtls[0]       # append it and first line after to current line
                    line  = line.concat after.shift()  #               
                    newls = newls.concat before        # add lines from before and current line to result
                    newls.push line                    #     
            
            before = after
            
        newls = newls.concat before if posl[-1][1] < lines.length
            
        # prof.end 'insert'
        
        [newls newpl]  
        
    #  0000000  000   000  00000000   00000000    0000000   000   000  000   000  0000000    
    # 000       000   000  000   000  000   000  000   000  000   000  0000  000  000   000  
    # 0000000   000   000  0000000    0000000    000   000  000   000  000 0 000  000   000  
    #      000  000   000  000   000  000   000  000   000  000   000  000  0000  000   000  
    # 0000000    0000000   000   000  000   000   0000000    0000000   000   000  0000000    
    
    @insertSurroundAtRanges: lines rngs trigger pair ->
        
        begl = @startPositionsOfRanges rngs
        
        [lines begl] = @insertTextAtPositions lines pair[0] begl
        
        endl = []
        for pos,idx in begl
            endl.push [pos[0]+rngs[idx][2]-rngs[idx][0] pos[1]]
            
        [lines endl] = @insertTextAtPositions lines pair[1] endl
        
        if pair[0][0] == trigger and pair[0] != pair[1]
            [lines begl]
        else
            [lines endl]

    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    @deleteLineRangesAndAdjustPositions: lines rngs posl ->
        
        lines = copy lines
        posl  = clone posl
        
        ⮐ [lines posl] if empty rngs
        
        for ri in rngs.length-1..0
            
            rng = rngs[ri]
            
            posl = @adjustPositionsForDeletedLineRange posl lines rng
            
            if rng[1] == rng[3] # single line range
                
                if rng[0] == 0 and rng[2] == lines[rng[1]].length
                    lines.splice rng[1] 1
                else
                    lines.splice rng[1] 1 lines[rng[1]][0...rng[0]].concat(lines[rng[1]][rng[2]..])   
                    
            else                # range spans multiple lines
                        
                if rng[2] == lines[rng[3]].length                   # range ends at end of last line
                    lines.splice rng[3] 1                           #   remove last line
                else
                    lines.splice rng[3] 1 lines[rng[3]][rng[2]..]   #   remove head of last line 
                    partialLast = true                              #   and remember to join it with head of first line
                                                                    
                if rng[3]-rng[1] >= 2                               # more than 2 lines in range
                    lines.splice rng[1]+1 rng[3]-rng[1]-1           #   remove middle lines
                                                                    
                if rng[0] == 0                                      # range starts at start of first line
                    lines.splice rng[1] 1                           #   remove first line
                else
                    lines.splice rng[1] 1 lines[rng[1]][0...rng[0]] #   remove tail of first line
                    
                    if partialLast                                  #   when only part of last line was removed 
                        lines.splice rng[1] 2 lines[rng[1]].concat(lines[rng[1]+1]) # join head of first with tail of last line
               
        [lines posl]
        
    @adjustPositionsForDeletedLineRange: posl lines rng ->
        
        ⮐ posl if empty posl
        
        for pi in posl.length-1..0
            pos = posl[pi]
            
            if @isPosTouchingRange pos rng
                pos[0] = rng[0] 
                pos[1] = rng[1]
            else if @isPosAfterRange pos rng
                if pos[1] == rng[3] # pos in last line of range
                    pos[0] -= rng[2] - rng[0]
                    if rng[1] < rng[3] # multi line range
                        pos[1] -= rng[3] - rng[1]
                else
                    pos[1] -= @numFullLinesInRange(lines rng)
            else
                break
                    
        @removeDuplicatePositions posl
        
    @moveCursorsInSameLineBy: cursors cursor delta ->
    
        ci = cursors.indexOf cursor
    
        while true
            
            cursors[ci][0] += delta
            ci++
            
            ⮐ if ci >= cursors.length
            ⮐ if cursors[ci][1] > cursor[1]
            
    #  0000000   0000000    0000000          00000000    0000000   000   000   0000000   00000000   0000000  
    # 000   000  000   000  000   000        000   000  000   000  0000  000  000        000       000       
    # 000000000  000   000  000   000        0000000    000000000  000 0 000  000  0000  0000000   0000000   
    # 000   000  000   000  000   000        000   000  000   000  000  0000  000   000  000            000  
    # 000   000  0000000    0000000          000   000  000   000  000   000   0000000   00000000  0000000   
    
    @addLinesBelowPositionsToRanges: lines posl rngs ->
    
        newp = []
        newr = copy rngs
    
        addLineAtIndex = c i =>

            range = @rangeOfLine lines i
            range[1] += 1 if @isEmptyRange range
            newr.push range
            newp.push @endOfRange(range)
            
        for c in posl
            if not @rangesContainLine(rngs c[1])
                addLineAtIndex c c[1]
            else
                addLineAtIndex c c[1]+1 if c[1] < lines.length-1
    
        [newp newr]
    
    # 00000000   00000000  00     00   0000000   000   000  00000000     00000000   000   000   0000000    0000000    
    # 000   000  000       000   000  000   000  000   000  000          000   000  0000  000  000        000         
    # 0000000    0000000   000000000  000   000   000 000   0000000      0000000    000 0 000  000  0000  0000000     
    # 000   000  000       000 0 000  000   000     000     000          000   000  000  0000  000   000       000    
    # 000   000  00000000  000   000   0000000       0      00000000     000   000  000   000   0000000   0000000     
    
    @removeLinesAtPositionsFromRanges: lines posl rngs ->
        
        newp = []
        newr = @splitLineRanges lines rngs
        
        for pos in posl
            if rng = @rangeInRangesTouchingPos newr pos
                idx = newr.indexOf rng
                if idx > 0
                    newp.push @endOfRange(newr[idx-1])
                else
                    newp.push @endOfRange(newr[idx])
                newr.splice idx 1
            else
                newp.push pos
        [newp newr]         
        
    @rangeForJoiningLine: lines idx -> [lines[idx].length idx 0 idx+1]
        
    @rangesForJoiningLines: lines idxs -> idxs.map (idx) => @rangeForJoiningLine lines idx
    
    # 00     00   0000000   000   000  00000000         000      000  000   000  00000000   0000000  
    # 000   000  000   000  000   000  000              000      000  0000  000  000       000       
    # 000000000  000   000   000 000   0000000          000      000  000 0 000  0000000   0000000   
    # 000 0 000  000   000     000     000              000      000  000  0000  000            000  
    # 000   000   0000000       0      00000000         0000000  000  000   000  00000000  0000000   
    
    @moveLineRangesAndPositionsAtIndicesInDirection: lines rngs posl indices dir ->
        
        if empty indices or dir == 'down' and indices[-1] >= lines.length-1 or dir == 'up' and indices[0] <= 0
            ⮐ [lines rngs posl]
        
        newLines = copy lines
        newRngs  = copy rngs
        newPosl  = copy posl
        
        [rs re] = switch dir
            'down' ➜ [indices.length-1 0]
            'up'   ➜ [0 indices.length-1]

        d = switch dir
            'down' ➜ 1
            'up'   ➜ -1
            
        for ii in rs..re
            index = indices[ii]
            
            switch dir 
                'down' ➜ newLines.splice index   2 newLines[index+1] newLines[index] 
                'up'   ➜ newLines.splice index-1 2 newLines[index]   newLines[index-1]
                
            for pos in newPosl
                if pos[1] == index 
                    pos[1] += d

            for rng in newRngs
                if rng[1] == index 
                    rng[1] += d
                    rng[3] += d
        
        [newLines newRngs newPosl]

    #  0000000  000       0000000   000   000  00000000        000      000  000   000  00000000   0000000  
    # 000       000      000   000  0000  000  000             000      000  0000  000  000       000       
    # 000       000      000   000  000 0 000  0000000         000      000  000 0 000  0000000   0000000   
    # 000       000      000   000  000  0000  000             000      000  000  0000  000            000  
    #  0000000  0000000   0000000   000   000  00000000        0000000  000  000   000  00000000  0000000   
    
    @cloneLineBlockRangesAndMoveRangesAndPositionsInDirection: lines blocks rngs posl dir ->
        
        if empty blocks or dir == 'down' and blocks[-1][3] > lines.length-1 or dir == 'up' and blocks[0][1] < 0
            ⮐ [lines rngs posl]
        
        newLines = copy lines
        newRngs  = copy rngs
        newPosl  = copy posl
        
        [rs re] = switch dir
            'down' ➜ [blocks.length-1 0]
            'up'   ➜ [0 blocks.length-1]

        d = switch dir
            'down' ➜ 1
            'up'   ➜ -1
            
        for bi in rs..re
            block = blocks[bi]
  
            text = @textForLineRange newLines block
            text += '\n'

            insidx = dir == 'up' ? block[1] : block[3]+1

            [newLines posl] = @insertTextAtPositions newLines text [[0 insidx]]

            if dir == 'down'
                d = block[3]-block[1]+1
                
                for pos in newPosl
                    if @rangeContainsPos block pos
                        pos[1] += d                
    
                for rng in newRngs
                    if @rangeContainsRange block rng
                        rng[1] += d
                        rng[3] += d
        
        [newLines newRngs newPosl]
        
    #  0000000   0000000   00     00  00     00  00000000  000   000  000000000   0000000  
    # 000       000   000  000   000  000   000  000       0000  000     000     000       
    # 000       000   000  000000000  000000000  0000000   000 0 000     000     0000000   
    # 000       000   000  000 0 000  000 0 000  000       000  0000     000          000  
    #  0000000   0000000   000   000  000   000  00000000  000   000     000     0000000   
    
    @toggleCommentsInLineRangesAtIndices: lines rngs posl indices ->
        
        ⮐ [lines rngs posl] if empty indices
        
        newLines = copy lines
        newRngs  = copy rngs
        newPosl  = copy posl
        
        comStart = '#'
        minIndent = Infinity
             
        for index in indices
            
            [indent line] = @splitLineIndent newLines[index]
            if not kseg.startsWith(line comStart)
                comment = comStart
                minIndent = min indent.length minIndent
            
        comIndent = kseg.repeat(minIndent) if comment
                
        for index in indices
            
            [indent line] = @splitLineIndent newLines[index]
            if comment
                # indent  = indent.length > minIndent ? lpad(indent.length-minIndent) : ''
                indent  = kseg.repeat indent.length-minIndent
                newLine = kseg.join comIndent comment indent ' ' line
            else
                d = line[comStart.length] == ' ' ? 1 : 0
                newLine = kseg.join indent line[comStart.length+d..]
            newLines.splice index 1 newLine
        
        [newLines newRngs newPosl]  
        
    @toggleCommentTypesInLineRangesAtIndices: lines rngs posl indices ->
        
        ⮐ [lines rngs posl] if empty indices
        
        newLines = copy lines
        newRngs  = copy rngs
        newPosl  = copy posl
        
        log "toggleCommentTypes #{indices}"
        
        [newLines newRngs newPosl]  
        
    # 0000000    00000000  000  000   000  0000000    00000000  000   000  000000000  
    # 000   000  000       000  0000  000  000   000  000       0000  000     000     
    # 000   000  0000000   000  000 0 000  000   000  0000000   000 0 000     000     
    # 000   000  000       000  000  0000  000   000  000       000  0000     000     
    # 0000000    00000000  000  000   000  0000000    00000000  000   000     000     
    
    @deindentLineRangesAndPositionsAtIndices: lines rngs posl indices ->
        
        ⮐ [lines rngs posl] if empty indices  
        
        newLines = lines
        newRngs  = copy rngs
        newPosl  = copy posl
        
        for index in indices
            
            [indent line] = @splitLineIndent newLines[index]
        
            if indent.length
                
                sc = min 4 indent.length
                newLines.splice index 1 kseg.join(indent[sc..] line)
                
                for pos in newPosl
                    if pos[1] == index 
                        pos[0] = max 0 pos[0] - sc
                        
                for rng in newRngs
                    if rng[1] == index 
                        rng[0] = max 0 rng[0] - sc
                        rng[2] = max 0 rng[2] - sc
        
        [newLines newRngs newPosl]

    # 000  000   000  0000000    00000000  000   000  000000000  
    # 000  0000  000  000   000  000       0000  000     000     
    # 000  000 0 000  000   000  0000000   000 0 000     000     
    # 000  000  0000  000   000  000       000  0000     000     
    # 000  000   000  0000000    00000000  000   000     000     
    
    @indentLineRangesAndPositionsAtIndices: lines rngs posl indices ->
        
        ⮐ [lines rngs posl] if empty indices  
        
        newLines = lines
        newRngs  = copy rngs
        newPosl  = copy posl
        
        for index in indices
            
            [indent line] = @splitLineIndent newLines[index]
        
            newLines[index] = kseg.join kseg.repeat(4) newLines[index]
            
            for pos in newPosl
                if pos[1] == index 
                    pos[0] += 4
                    
            for rng in newRngs
                if rng[1] == index 
                    rng[0] += 4
                    rng[2] += 4
        
        [newLines newRngs newPosl]
        
    # 00000000  000   000  000000000  00000000  000   000  0000000          00000000   000   000   0000000    0000000  
    # 000        000 000      000     000       0000  000  000   000        000   000  0000  000  000        000       
    # 0000000     00000       000     0000000   000 0 000  000   000        0000000    000 0 000  000  0000  0000000   
    # 000        000 000      000     000       000  0000  000   000        000   000  000  0000  000   000       000  
    # 00000000  000   000     000     00000000  000   000  0000000          000   000  000   000   0000000   0000000   
    
    @extendLineRangesFromPositionToPosition: lines rngs start pos ->

        if empty rngs ➜ ⮐ [@rangeFromStartToEnd(start pos)]

        newRngs = copy rngs
        
        if rng = @rangeInRangesTouchingPos newRngs start
            if @isPosAfterRange pos rng
                rng[2] = pos[0]
                rng[3] = pos[1]
            else if @isPosBeforeRange pos rng
                rng[0] = pos[0]
                rng[1] = pos[1]
        else
            newRngs.push @rangeFromStartToEnd(start pos)

        newRngs
    
    @extendLineRangesByMovingPositionsInDirection: lines rngs posl dir opt ->
        
        newRngs = copy rngs
        newPosl = copy posl
        
        for pos in newPosl
            
            line = lines[pos[1]]
            rng = [pos[0] pos[1] pos[0] pos[1]]
            newRngs.push rng
            
            switch dir
                'left'  
                'right'     ➜ nc = @numCharsFromPosToWordOrPunctInDirection(lines pos dir opt); pos[0] += nc
                'up'        ➜ pos[1] -= 1
                'down'      ➜ pos[1] += 1
                'eol'       ➜ pos[0] = line.length
                'bol'       ➜ pos[0] = 0
                'bof'       ➜ pos[0] = 0; pos[1] = 0
                'eof'       ➜ pos[1] = lines.length-1; pos[0] = lines[lines.length-1].length

                'ind_bol'   ➜ ind = @numIndent(line); pos[0] = pos[0] > ind ? ind : 0
                'ind_eol'   ➜ ind = @numIndent(line); pos[0] = pos[0] < ind ? ind : line.length
                
            switch dir
                'left'      ➜ rng[0] = rng[0]+nc
                'right'     ➜ rng[2] = rng[2]+nc
                'up'        ➜ rng[1] = max 0 rng[1]-1
                'down'      ➜ rng[3] = min lines.length-1 rng[3]+1
                'eol'       ➜ rng[2] = Infinity
                'bol'       ➜ rng[0] = 0
                'bof'       ➜ rng[1] = rng[0] = 0
                'eof'       ➜ rng[3] = lines.length-1; rng[2] = lines[lines.length-1].length

                'ind_bol'   ➜ ind = @numIndent(line); rng[0] = rng[0] > ind ? ind : 0
                'ind_eol'   ➜ ind = @numIndent(line); rng[2] = rng[2] < ind ? ind : line.length
                
            rng[0] = clamp 0 lines[rng[1]].length rng[0] if rng[1] < lines.length
            rng[2] = clamp 0 lines[rng[3]].length rng[2] if rng[3] < lines.length
        
        [newRngs newPosl]
        
export edit
