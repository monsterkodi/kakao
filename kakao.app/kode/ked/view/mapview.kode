
###
    00     00   0000000   00000000   000   000  000  00000000  000   000  
    000   000  000   000  000   000  000   000  000  000       000 0 000  
    000000000  000000000  00000000    000 000   000  0000000   000000000  
    000 0 000  000   000  000           000     000  000       000   000  
    000   000  000   000  000            0      000  00000000  00     00  
###

use ../../kxk ▪ kstr post
use ../util ◆ prof syntax color util
use ..      ◆ theme 
use         ◆ cells

{floor, pow} = Math

function mapview

    @: screen @state ->
        
        @cells = new cells screen
        @imgId = kstr.hash(@state.name) & ~0xffff
        
        lf 'mapview' @state.name @imgId.toString(2)
        
        @pixelsPerRow = 4
        @pixelsPerCol = 2
        
    init: x y w h -> @cells.init x y w h
    
    #  0000000  000   000   0000000   000   000  
    # 000       000   000  000   000  000 0 000  
    # 0000000   000000000  000   000  000000000  
    #      000  000   000  000   000  000   000  
    # 0000000   000   000   0000000   00     00  
    
    show: doShow=true => 
        
        ⮐ @hide() if doShow == false
        @cells.cols = 10

    hide: => 
        # lf 'hide' @state.name
        @clearImages()
        @cells.cols = 0
        
    hidden:  -> @cells.cols <= 0
    visible: -> @cells.cols > 0
    
    clearImages: =>
        
        @cells.screen.t.write "\x1b_Gq=1,a=d,d=i,i=#{@imgId}\x1b\\" # delete all images with id        
        
    reload: => @clearImages() ; @reallocBuffer()
                
    # 0000000    000   000  00000000  00000000  00000000  00000000   
    # 000   000  000   000  000       000       000       000   000  
    # 0000000    000   000  000000    000000    0000000   0000000    
    # 000   000  000   000  000       000       000       000   000  
    # 0000000     0000000   000       000       00000000  000   000  
    
    getLines:  => @lines
    getSyntax: => @syntax
    setSyntaxLines: ext @lines => 
        
        @syntax = new syntax 
        @syntax.setExt ext 
        @syntax.setLines @lines
        @reallocBuffer()
    
    reallocBuffer: =>
        
        t = @cells.screen.t
        ⮐ if empty t.cellsz
        
        @show()

        # lf 'realloc' @state.name @cells.cols @cells.rows
        
        prof.start @state.name+'map'
        
        [w h] = [@cells.cols * t.cellsz[0] @cells.rows * t.cellsz[1]]
        
        bytes = w*h*3
        
        if bytes <= 0
            @clearImages()
            ⮐ 
        
        data = Buffer.alloc bytes
        
        lines  = @getLines()
        syntax = @getSyntax()
        
        for y in 0...min(h lines.length*@pixelsPerRow)
            li = parseInt y/@pixelsPerRow
            line = lines[li]
            for x in 0...min(w line.length*@pixelsPerCol)
                if x == 0
                    data[(y*w+x)*3+0] = 55 
                    data[(y*w+x)*3+1] = 55 
                    data[(y*w+x)*3+2] = 55 
                    
                xi = parseInt x/@pixelsPerCol              
                ch = line[xi]
                
                if valid ch and ch != ' '
                
                    clss = syntax.getClass xi li
                    
                    if 'header' in clss
                        if 'triple' in clss
                            rgb = [27 207 14]
                        else
                            rgb = [9 140 0]
                    else
                        f = 0.7
                        rgb = color.rgb syntax.getColor(xi li)
                        rgb = rgb.map (v) -> clamp(0 255 parseInt(f*v))
                    
                    [r g b] = rgb
                    
                    data[(y*w+x)*3+0] = r
                    data[(y*w+x)*3+1] = g
                    data[(y*w+x)*3+2] = b
                
        t.sendImageData data @imgId w h
        
        prof.end @state.name+'map'
                
        @draw()
                        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: ->

        t = @cells.screen.t
        
        ⮐ if empty t.pixels or @cells.rows <= 0 or @cells.cols <= 0
        
        # lf 'draw' @state.name
        
        t.setCursor @cells.x @cells.y
        t.write "\x1b_Gq=1,a=p,i=#{@imgId},p=#{@imgId},C=1\x1b\\"
        @
                        
export mapview
