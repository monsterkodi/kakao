###
 0000000   0000000   000       0000000   00000000   
000       000   000  000      000   000  000   000  
000       000   000  000      000   000  0000000    
000       000   000  000      000   000  000   000  
 0000000   0000000   0000000   0000000   000   000  


    #000011 #001 #010 #100 #011 #101 #110 #111100
    #000022 #002 #020 #200 #022 #202 #220 #222200
    #000033 #003 #030 #300 #033 #303 #330 #333300
    #000044 #004 #040 #400 #044 #404 #440 #444400
    #000055 #005 #050 #500 #055 #505 #550 #555500
    #000066 #006 #060 #600 #066 #606 #660 #666600
    #000077 #007 #070 #700 #077 #707 #770 #777700
    #000088 #008 #080 #800 #088 #808 #880 #888800
    #000099 #009 #090 #900 #099 #909 #990 #999900
    #0000aa #00a #0a0 #a00 #0aa #a0a #aa0 #aaaa00
    #0000bb #00b #0b0 #b00 #0bb #b0b #bb0 #bbbb00
    #0000cc #00c #0c0 #c00 #0cc #c0c #cc0 #cccc00
    #0000dd #00d #0d0 #d00 #0dd #d0d #dd0 #dddd00
    #0000ee #00e #0e0 #e00 #0ee #e0e #ee0 #eeee00
    #0000ff #00f #0f0 #f00 #0ff #f0f #ff0 #ffff00
###

use ../../kxk    ▪ kstr randRange
use ../../kxk    ◆ ansi
use ../edit/tool ◆ belt

#ansi.log256Colors()
#process.exit 0

class color

    @ansi256: [
        '#000000' '#800000' '#008000' '#808000'
        '#000080' '#800080' '#008080' '#c0c0c0'
        '#808080' '#ff0000' '#00ff00' '#ffff00'
        '#0000ff' '#ff00ff' '#00ffff' '#ffffff'
        '#000000' '#00005f' '#000087' '#0000af' '#0000d7' '#0000ff'
        '#005f00' '#005f5f' '#005f87' '#005faf' '#005fd7' '#005fff'
        '#008700' '#00875f' '#008787' '#0087af' '#0087d7' '#0087ff'
        '#00af00' '#00af5f' '#00af87' '#00afaf' '#00afd7' '#00afff'
        '#00d700' '#00d75f' '#00d787' '#00d7af' '#00d7d7' '#00d7ff'
        '#00ff00' '#00ff5f' '#00ff87' '#00ffaf' '#00ffd7' '#00ffff'
        '#5f0000' '#5f005f' '#5f0087' '#5f00af' '#5f00d7' '#5f00ff'
        '#5f5f00' '#5f5f5f' '#5f5f87' '#5f5faf' '#5f5fd7' '#5f5fff'
        '#5f8700' '#5f875f' '#5f8787' '#5f87af' '#5f87d7' '#5f87ff'
        '#5faf00' '#5faf5f' '#5faf87' '#5fafaf' '#5fafd7' '#5fafff'
        '#5fd700' '#5fd75f' '#5fd787' '#5fd7af' '#5fd7d7' '#5fd7ff'
        '#5fff00' '#5fff5f' '#5fff87' '#5fffaf' '#5fffd7' '#5fffff'
        '#870000' '#87005f' '#870087' '#8700af' '#8700d7' '#8700ff'
        '#875f00' '#875f5f' '#875f87' '#875faf' '#875fd7' '#875fff'
        '#878700' '#87875f' '#878787' '#8787af' '#8787d7' '#8787ff'
        '#87af00' '#87af5f' '#87af87' '#87afaf' '#87afd7' '#87afff'
        '#87d700' '#87d75f' '#87d787' '#87d7af' '#87d7d7' '#87d7ff'
        '#87ff00' '#87ff5f' '#87ff87' '#87ffaf' '#87ffd7' '#87ffff'
        '#af0000' '#af005f' '#af0087' '#af00af' '#af00d7' '#af00ff'
        '#af5f00' '#af5f5f' '#af5f87' '#af5faf' '#af5fd7' '#af5fff'
        '#af8700' '#af875f' '#af8787' '#af87af' '#af87d7' '#af87ff'
        '#afaf00' '#afaf5f' '#afaf87' '#afafaf' '#afafd7' '#afafff'
        '#afd700' '#afd75f' '#afd787' '#afd7af' '#afd7d7' '#afd7ff'
        '#afff00' '#afff5f' '#afff87' '#afffaf' '#afffd7' '#afffff'
        '#d70000' '#d7005f' '#d70087' '#d700af' '#d700d7' '#d700ff'
        '#d75f00' '#d75f5f' '#d75f87' '#d75faf' '#d75fd7' '#d75fff'
        '#d78700' '#d7875f' '#d78787' '#d787af' '#d787d7' '#d787ff'
        '#d7af00' '#d7af5f' '#d7af87' '#d7afaf' '#d7afd7' '#d7afff'
        '#d7d700' '#d7d75f' '#d7d787' '#d7d7af' '#d7d7d7' '#d7d7ff'
        '#d7ff00' '#d7ff5f' '#d7ff87' '#d7ffaf' '#d7ffd7' '#d7ffff'
        '#ff0000' '#ff005f' '#ff0087' '#ff00af' '#ff00d7' '#ff00ff'
        '#ff5f00' '#ff5f5f' '#ff5f87' '#ff5faf' '#ff5fd7' '#ff5fff'
        '#ff8700' '#ff875f' '#ff8787' '#ff87af' '#ff87d7' '#ff87ff'
        '#ffaf00' '#ffaf5f' '#ffaf87' '#ffafaf' '#ffafd7' '#ffafff'
        '#ffd700' '#ffd75f' '#ffd787' '#ffd7af' '#ffd7d7' '#ffd7ff'
        '#ffff00' '#ffff5f' '#ffff87' '#ffffaf' '#ffffd7' '#ffffff'
        '#080808' '#121212' '#1c1c1c' '#262626' '#303030' '#3a3a3a'
        '#444444' '#4e4e4e' '#585858' '#606060' '#666666' '#767676'
        '#808080' '#8a8a8a' '#949494' '#9e9e9e' '#a8a8a8' '#b2b2b2'
        '#bcbcbc' '#c6c6c6' '#d0d0d0' '#dadada' '#e4e4e4' '#eeeeee'
        ]
    
    @hex:    c -> c is arr ? kstr.hexColor(c) : c
    @values: c -> c is str ? kstr.hexColor(c) : c
    
    @darken: c f=0.5 -> 
    
        ⮐  [0 0 0] if empty c
        if c is str
            log "darken #{c}"
            c = color.values c
        c.map((v) -> clamp(0 255 int(f*v)))
        
    @brighten: c f=0.5 ->
    
        ⮐  [255 255 255] if empty c
        if c is str
            log "brighten #{c}"
            c = color.values c
        c.map((v) -> clamp(0 255 int((1+f)*v)))
        
    @devibrant: c f=0.5 ->
        
        ⮐  [128 128 128] if empty c
        w = (c[0] + c[1] + c[2]) / 3
        w *= 2 if c[0] * c[1] * c[2] == 0
        [
            min(255 parseInt(c[0]*(1-f)+w*f))
            min(255 parseInt(c[1]*(1-f)+w*f))
            min(255 parseInt(c[2]*(1-f)+w*f))
        ]

    @vibrant: c f=0.5 ->
        
        ⮐  [128 128 128] if empty c
        w = (c[0] + c[1] + c[2]) / 3
        w *= 2 if c[0] * c[1] * c[2] == 0
        [
            min(255 parseInt(c[0]*f+w*(1-f)))
            min(255 parseInt(c[1]*f+w*(1-f)))
            min(255 parseInt(c[2]*f+w*(1-f)))
        ]
        
    @bg_rgb: c -> # background
    
        ⮐  '\x1b[49m' if empty c
        if c is str
            log "bg_rgb '#{c}'"
            c = color.values c 
        "\x1b[48;2;#{c[0]};#{c[1]};#{c[2]}m" 

    @fg_rgb: c -> # foreground (text) 
        
        ⮐  '\x1b[39m' if empty c
        if c is str
            log "fg_rgb '#{c}'"
            c = color.values c
        "\x1b[38;2;#{c[0]};#{c[1]};#{c[2]}m" 

    @ul_rgb: c -> # underline color
        
        ⮐  '\x1b[59m' if empty c
        if c is str
            log "ul_rgb '#{c}'"
            c = color.values c 
        "\x1b[58;2;#{c[0]};#{c[1]};#{c[2]}m" 
        
    @randomBackgroundColors: lines bg fg ->
        
        resl = []
        for line in lines
            rl = ''
            rl += color.fg_rgb fg
            for char,idx in line
                clr = ''
                if char == ' '
                    clr = '\x1b[49m' if idx and line[idx-1] != ' '
                else
                    clr = color.bg_rgb @darken(bg 0.75+Math.random()*0.25)
                rl +=  clr + char 
            resl.push rl + '\x1b[49m'
        resl
                
    @linesForCells: cells ->
        
        lines = []
        for row in cells
            line = ''
            for cell,idx in row
                line += color.bg_rgb cell.bg
                line += color.fg_rgb cell.fg
                line += cell.char
            lines.push line + '\x1b[49m'
        lines
        
    #  0000000   000       0000000   000   000  
    # 000        000      000   000  000 0 000  
    # 000  0000  000      000   000  000000000  
    # 000   000  000      000   000  000   000  
    #  0000000   0000000   0000000   00     00  
    
    @glowEffect: cells strength=0.5 ->
        
        for row,y in cells
            for cell,x in row
                nbcs = belt.cellNeighborsAtPos cells x y 6 3
                continue if empty nbcs
                
                sum = [0 0 0]
                for nbc in nbcs
                    dx = nbc.pos[0]-x
                    dy = nbc.pos[1]-y
                    df = 1 - max(0 Math.sqrt(dx*dx + dy*dy) / 6)
                    for vi in 0..2
                        sum[vi] += nbc.cell.fg[vi]*df
                    
                scl = strength * 0.014
                scl = scl * randRange(0.98 1.02)
                sum = sum.map (v) -> clamp 0 255 int(scl * v)
                cell.bg = sum
        cells
        
    @variateCellsColor: cells type amount ->
        
        for cell in cells
            clr = cell.cell[type]
            f = 1 + randRange(-amount/2 amount/2)
            clr = clr.map (v) -> int clamp(0 255 v * f)
            cell.cell[type] = clr

    # 0000000    000  00     00  
    # 000   000  000  000   000  
    # 000   000  000  000000000  
    # 000   000  000  000 0 000  
    # 0000000    000  000   000  
    
    @dimCellsColor: cells type amount ->
        
        for cell in cells
            clr = cell.cell[type]
            clr = clr.map (v) -> int clamp(0 255 v * amount)
            cell.cell[type] = clr
            
    #  ███████   ███████   ███   ███  █████████  ████████    ███████    ███████  █████████
    # ███       ███   ███  ████  ███     ███     ███   ███  ███   ███  ███          ███   
    # ███       ███   ███  ███ █ ███     ███     ███████    █████████  ███████      ███   
    # ███       ███   ███  ███  ████     ███     ███   ███  ███   ███       ███     ███   
    #  ███████   ███████   ███   ███     ███     ███   ███  ███   ███  ███████      ███   

    @contrast: c1 c2 ->
    
        log "contrast #{c1} #{c2}" if c1 is str or c2 is str
    
        dr = (c2[0]-c1[0])/256
        dg = (c2[1]-c1[1])/256
        db = (c2[2]-c1[2])/256
        
        c = dr + dg + db 
        
        1+c/3
            
for key,val of color.ansi256
    color.ansi256[key] = color.values val
            
export color
