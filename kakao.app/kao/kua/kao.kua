# ███   ███   ███████    ███████ 
# ███  ███   ███   ███  ███   ███
# ███████    █████████  ███   ███
# ███  ███   ███   ███  ███   ███
# ███   ███  ███   ███   ███████ 

main = ... ->

    use std io
    use kxk.kxk
    
    optparser = std.optparse """
        0.1
        Usage: kao [Options ...] [Files ...]
        
        Options:
        
          -t, --test         run tests
          -b, --build        create binary
          -o, --out=dir      output directory
          -c, --cwd=dir      working directory
          
          -v, --verbose      log more information
          
          -V, --version      display version information
          -h, --help         display this help
        """

    # log slash.cwd()
    
    (_G.files _G.opts) = optparser:parse(arg)
    _G.files = [unpack(_G.files)]

    if opts.cwd 
        write ◌y+ "CWD " opts.cwd
        slash.chdir opts.cwd
    
    if opts.verbose
        log "cwd"     opts.cwd
        log "build"   opts.build
        log 'out'     opts.out
        log "verbose" opts.verbose
        log 'files'   files.len
        log 'files'   files
    
    if opts.build
        (output ok) = build()
        if ok 
            write ◌g "✔"
            os.exit 0
        write ◌r "✘ " output
        os.exit 1
        
    math.randomseed(os.clock())
        
    cl = ["■■■" "◀■▶" "▶■◀" "▶●◀" "▶◆◀" "▶▶▶" "◀◀◀" "▲▼▲" "▼▲▼" "▪▪▪" "◆◆◆" "■◆■" "●◆●" "◆■◆" "●●●" "●▲●"]
    cs = kseg cl:rnd()
    co = [ ◌r ◌fd0 ◌88f ]
    co:shuffle()
    write co[1] cs[1] co[2] cs[2] co[3] cs[3]
    
    watch slash.path(".")

build = ->

    (luajit _) = slash.shell "brew" "--prefix" "luajit"
    luajit = kstr.trim luajit
    libjit = luajit & "/lib/libluajit.a"
    incjit = luajit & "/include/luajit-2.1"
    # log "luajit" luajit
    dir = opts.out or ""
    out = slash.path dir "kao"
    if empty _G.files
        _G.files = ["kao.lua"]
    _G.files:push "./kxk/array.lua"
    _G.files:push "./kxk/class.lua"
    _G.files:push "./kxk/inspect.lua"
    _G.files:push "./kxk/kseg.lua"
    _G.files:push "./kxk/kstr.lua"
    _G.files:push "./kxk/kxk.lua"
    _G.files:push "./kxk/slash.lua"
    _G.files:push "./kxk/test.lua"
    args = array "luastatic" 
    args:push unpack(files) 
    args:push libjit "-I" incjit "-o" out
    (output ok) = slash.shell unpack(args)
    (output ok)
        
watch = ... ->

    dir = slash.cwd()
    luaFiles = array.indexdict slash.files(slash.path(dir ".") "lua")
    kxkFiles = array.indexdict slash.files(slash.path(dir "./kxk") "lua")
    kxkTests = array.indexdict slash.files(slash.path(dir "kxk/test"))

    if verbose
        log "\nlua files"
        log array.str luaFiles
        log "\nkxk files"
        log array.str kxkFiles
        log "\nkxk tests"
        log array.str kxkTests
        
    modTimes = {}
    
    while true
    
        kxkChanged = array()
        luaChanged = array()
        
        for _ dir in ipairs {...}

            for i f in ipairs slash.walk(dir)
                p = f.path
                stat = slash.stat(p)
                if stat
                    modTime = stat.mtime
                    
                    if not modTimes[p]
                        modTimes[p] = modTime
                    elif modTimes[p] == modTime
                        a = 1
                    else
                        modTimes[p] = modTime
                        
                        if kxkFiles[p]
                            write ◌d- "◇ " ◌i+ slash.file(p)
                            kxkChanged:push p
                        elif luaFiles[p]
                            write ◌d- "◆ " ◌i+ slash.file(p)                    
                            luaChanged:push p
            
        testPass = true    
        if kxkChanged.len > 0
            write ◌g_ "testing"
            
            if not test.run kxkTests 
                testPass = false
                write "\x1b[1F\x1b[2K" ◌rx "testing"
            
        if luaChanged.len > 0 or kxkChanged.len > 0
            if testPass
                write ◌s~ "compile"
                (output ok) = build()
                # log output 
                if ok
                    write ◌-r. "restart"
                    slash.respawn()
                    log "DAFUK?"
                    os.exit(1)
                else
                    write ◌r "✘"
                    log output
            else
                write ◌rx "compile"
        sleep 1
        
main()
    