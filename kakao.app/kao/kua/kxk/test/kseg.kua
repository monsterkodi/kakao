
use kxk/kxk
use kxk/strg

▸ kseg

    ▸ static
    
        kseg.rep(4)∙str() ▸ "    "
        kseg.rep(4 'x')∙str() ▸ "xxxx"
        kseg.rep(2 'xy')∙str() ▸ "xyxy"

        kseg.segiAtWidth kseg('')    0 ▸ 1
        kseg.segiAtWidth kseg('')    1 ▸ 1
        kseg.segiAtWidth kseg('a')   1 ▸ 1
        kseg.segiAtWidth kseg('a')   2 ▸ 2
        kseg.segiAtWidth kseg('abc') 2 ▸ 2
        kseg.segiAtWidth kseg('ab3') 3 ▸ 3
        kseg.segiAtWidth kseg('ab3') 4 ▸ 4
        kseg.segiAtWidth kseg('ab3') 5 ▸ 4
        kseg.segiAtWidth kseg('ab3') 6 ▸ 4
        
        kseg.segiAtWidth kseg('🧑🧑') 0 ▸ 1  
        kseg.segiAtWidth kseg('🧑🧑') 1 ▸ 1
        kseg.segiAtWidth kseg('🧑🧑') 2 ▸ 1
        kseg.segiAtWidth kseg('🧑🧑') 3 ▸ 2
        kseg.segiAtWidth kseg('🧑🧑') 4 ▸ 2
        kseg.segiAtWidth kseg('🧑🧑') 5 ▸ 3
        kseg.segiAtWidth kseg('🧑🧑') 6 ▸ 3  

    ▸ segls
            
        lines = kstr.lines"""
            123
            456
            
            abc
            def"""
            
        lines ▸ ["123" "456" "" "abc" "def"]
            
        segls = kseg.segls """
            123
            456
            
            abc
            def"""
        
        segls ▸ [kseg("123") kseg("456") kseg("") kseg("abc") kseg("def")]    
        
        kseg.str(segls) ▸ """
            123
            456
            
            abc
            def""" 
        
    ▸ construct
        
        s = kseg()
        s∙str()                 ▸ ""
        s = kseg("  ")
        s∙str()                 ▸ "  "
        s = kseg(kseg("xx"))
        s∙str()                 ▸ "xx"
        s = kseg(kseg(kseg("yy")))
        s∙str()                 ▸ "yy"
        st = strg("zz")
        s = kseg(strg("zz"))
        s∙str()                 ▸ "zz"
        
    ▸ startsWith
    
        s = kseg "a  b"
        s∙startsWith "a"        ▸ true
        s∙startsWith "a "       ▸ true
        s∙startsWith "a  b"     ▸ true
        s∙startsWith "a  bc"    ▸ false
        s∙startsWith "b"        ▸ false
        
    ▸ endsWith
    
        s = kseg "a  b"
        s∙endsWith "b"          ▸ true
        s∙endsWith " b"         ▸ true
        s∙endsWith "a  b"       ▸ true
        s∙endsWith " a  b"      ▸ false
        s∙endsWith "a"          ▸ false
        
    ▸ find
        
        s = kseg "a  b"
        s∙find " "              ▸ 2
        s∙find "  "             ▸ 2
        s∙find " b"             ▸ 3
        s∙find "b"              ▸ 4

    ▸ pop
    
        s = kseg "../"
        s∙pop()
        s∙str()                 ▸ ".."
        
        s = kseg "◂▸○●"
        s∙pop()
        s∙str()                 ▸ "◂▸○"
        s∙pop()                 
        s∙str()                 ▸ "◂▸"
        
    ▸ push
    
        s = kseg()
        s.len                   ▸ 0
        s∙push "●"
        s∙str() ▸ "●"
        s.len                   ▸ 1
        s∙push "▪"
        s∙str()                 ▸ "●▪"
        s.len                   ▸ 2
        s∙push " "
        s∙str()                 ▸ "●▪ "
        s.len                   ▸ 3
    
    ▸ rpad
        
        s = kseg "▴"
        s∙rpad 2
        s∙str()                 ▸ "▴ "
        s∙rpad 4
        s∙str()                 ▸ "▴   "
        s∙rpad 2
        s∙str()                 ▸ "▴   "
        
    ▸ trim
    
        s = kseg " ▴  "
        s∙trim()
        s∙str()                 ▸ "▴"
        
        s = kseg " ▴  "
        s∙rtrim()
        s∙str()                 ▸ " ▴"

        s = kseg " ▴  "
        s∙ltrim()
        s∙str()                 ▸ "▴  "

        s = kseg "\n\n ▴  \n  \n"
        s∙trim()
        s∙str()                 ▸ "▴"
        
    ▸ slice
    
        s = kseg "abc"
        s∙slice(1)∙str()        ▸ "abc"
        s∙slice(2)∙str()        ▸ "bc"
        s∙slice(3)∙str()        ▸ "c"
        s∙slice(4 3)∙str()      ▸ ""
        s∙slice(4 4)∙str()      ▸ ""
        s∙slice(4)∙str()        ▸ ""
        
    ▸ emojii
    
        s = kseg "🧑"
        s.len                   ▸ 1
        
        s = kseg "🧑‍🌾"
        s.len                   ▸ 3
        s[^1]                   ▸ "🌾"
        s∙pop()
        s∙pop()
        s.len                   ▸ 1
        s∙str()                 ▸ "🧑"
        
    ▸ segiAtWidth
    
        kseg.segiAtWidth kseg("abc") 1  ▸ 1
        kseg.segiAtWidth kseg("abc") 2  ▸ 2
        kseg.segiAtWidth kseg("abc") 3  ▸ 3
        kseg.segiAtWidth kseg("abc") 4  ▸ 4
                                        
        kseg.segiAtWidth kseg("▸◌◂") 1  ▸ 1
        kseg.segiAtWidth kseg("▸◌◂") 2  ▸ 2
        kseg.segiAtWidth kseg("▸◌◂") 3  ▸ 3
        kseg.segiAtWidth kseg("▸◌◂") 4  ▸ 4

        kseg.segiAtWidth "abc" 1        ▸ 1
        kseg.segiAtWidth "abc" 2        ▸ 2
        kseg.segiAtWidth "abc" 3        ▸ 3
        kseg.segiAtWidth "abc" 4        ▸ 4
                                        
        kseg.segiAtWidth "▸◌◂" 1        ▸ 1
        kseg.segiAtWidth "▸◌◂" 2        ▸ 2
        kseg.segiAtWidth "▸◌◂" 3        ▸ 3
        kseg.segiAtWidth "▸◌◂" 4        ▸ 4
        
    ▸ eql

        kseg("abc") == kseg("abc")  ▸ false
        
        kseg("abc")∙eql kseg("abc") ▸ true
        
        kseg.eql "abc" "abc"        ▸ true
        kseg.eql "abc" kseg("abc")  ▸ true
        kseg.eql kseg("abc") "abc"  ▸ true
    
    ▸ is
    
        a = kseg ""
        a∙is kseg                   ▸ true
        a∙is array                  ▸ true
        a∙is table                  ▸ false
        a∙is false                  ▸ false
        a∙is true                   ▸ false
        a∙is nil                    ▸ false

    ▸ count
    
        s = kseg "__hellooo"
        s[^1] == "o" ▸ true
        s∙slice(s.len)∙str() == "o" ▸ true
        kseg.tailCount s "o" ▸ 3
        kseg.tailCount "__hellooo" "o" ▸ 3

        kseg.headCount s "_" ▸ 2
        kseg.headCount "__hellooo" "_" ▸ 2

        kseg.tailCount "◂◂○○●" "●" ▸ 1
        kseg.headCount "◂◂○○●" "◂" ▸ 2
        
        kseg.tailCountWord kseg("1  2 33") ▸ 2
        kseg.tailCountWord kseg("x233 ")   ▸ 0
        
        kseg.headCountWord kseg("1  2 33") ▸ 1
        kseg.headCountWord kseg("  2 33")  ▸ 0
        kseg.headCountWord kseg(".  2 33") ▸ 0
        kseg.headCountWord kseg("x233")   ▸ 4
        kseg.headCountWord kseg("x233 ")   ▸ 4
        
        kseg.tailCount " " ""   ▸ 0
        kseg.tailCount " " " "  ▸ 1
        kseg.tailCount "  " " " ▸ 2
        
        kseg.tailCountChunk kseg("a bc") ▸ 2
        kseg.tailCountChunk kseg("a b c") ▸ 1
        kseg.tailCountChunk kseg("a b c  ") ▸ 0
        kseg.tailCountChunk kseg("abc  ") ▸ 0
        kseg.tailCountChunk kseg("  ") ▸ 0

        kseg.headCountChunk kseg("a bc") ▸ 1
        kseg.headCountChunk kseg("ab c") ▸ 2
        kseg.headCountChunk kseg(" a b c  ") ▸ 0
        kseg.headCountChunk kseg("abc  ") ▸ 3
        kseg.headCountChunk kseg("  ") ▸ 0
        
    ▸ spanForClosestWordAtColumn
    
        kseg.spanForClosestWordAtColumn kseg('abc def') 1 ▸ [1 4]        
        kseg.spanForClosestWordAtColumn kseg('abc def') 2 ▸ [1 4]        
        kseg.spanForClosestWordAtColumn kseg('abc def') 3 ▸ [1 4]        
        kseg.spanForClosestWordAtColumn kseg('abc def') 4 ▸ [5 8]        
        kseg.spanForClosestWordAtColumn kseg('ab  def') 3 ▸ [1 3]        
        kseg.spanForClosestWordAtColumn kseg('ab  def') 4 ▸ [5 8]        
        
        kseg.spanForClosestWordAtColumn kseg('     ')   0 ▸ [0 0]        
        kseg.spanForClosestWordAtColumn kseg('     ')   2 ▸ [2 2]        
        kseg.spanForClosestWordAtColumn kseg('     ')   3 ▸ [3 3]
                                                        
        kseg.spanForClosestWordAtColumn kseg('   xy')   2 ▸ [4 6]        
        kseg.spanForClosestWordAtColumn kseg('xy   ')   3 ▸ [1 3]        
                                                        
        kseg.spanForClosestWordAtColumn "   aa123   "   1 ▸ [4 9]
        
        