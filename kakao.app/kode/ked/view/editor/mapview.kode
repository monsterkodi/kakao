
###
    ██     ██   ███████   ████████   ███   ███  ███  ████████  ███   ███  
    ███   ███  ███   ███  ███   ███  ███   ███  ███  ███       ███ █ ███  
    █████████  █████████  ████████    ███ ███   ███  ███████   █████████  
    ███ █ ███  ███   ███  ███           ███     ███  ███       ███   ███  
    ███   ███  ███   ███  ███            █      ███  ████████  ██     ██  

    the base of fileditor's mapscr 
    also used for browse and quicky previews
###

use ../../../kxk ▪ kstr post
use ../../util   ◆ prof syntax 
use ../../theme  ◆ color theme
use ../base      ◆ view

{floor, pow} = Math

function mapview extends view

    @: screen @state ->
        
        super screen @state.owner() + '.mapview'
        
        @setColor 'bg' theme.mapview
        
        @imgId  = kstr.hash(@state.name) & ~0xffff
        @rowOffset = 0
        @images = []
        @cells.cols = 12
        
        @pixelsPerRow = 4
        @pixelsPerCol = 2
            
    #  0000000  000   000   0000000   000   000  
    # 000       000   000  000   000  000 0 000  
    # 0000000   000000000  000   000  000000000  
    #      000  000   000  000   000  000   000  
    # 0000000   000   000   0000000   00     00  
    
    reload: => 
    
        @createImages()
        @drawImages()
    
    show: => 
    
        super()
        
        if valid @images
            @drawImages()
    
    hide: => 
        
        ⮐  if @hidden()
        
        for id in @images
            @cells.screen.t.hideImage id
        
        super()
        
    clearImages: =>
        
        ⮐  if empty @images
        # prof.start "clearImages #{@images.length}"
        if process.env.TERM == 'xterm-kitty'
            @cells.screen.t.deleteImagesInRange @images[0] @images[-1]
        else
            for id in @images
                @cells.screen.t.deleteImage id
        # prof.end "clearImages #{@images.length}"
        @images = []
                
    layout: x y w h => 
    
        resized = x != @cells.x or y != @cells.y or w != @cells.cols or h != @cells.rows
        super x y w h

        ⮐  if @hidden()
        
        if @redraw or resized
            @createImages() if @redraw
            delete @redraw
            @drawImages()
                
    getSegls:  => @segls
    getSyntax: => @syntax
    setSyntaxSegls: ext @segls => 
        
        @syntax = new syntax 
        @syntax.setExt ext 
        @syntax.setSegls @segls
        
        @redraw = true        
    
    # 000  00     00   0000000    0000000   00000000   0000000  
    # 000  000   000  000   000  000        000       000       
    # 000  000000000  000000000  000  0000  0000000   0000000   
    # 000  000 0 000  000   000  000   000  000            000  
    # 000  000   000  000   000   0000000   00000000  0000000   
    
    createImages: =>
        
        t = @cells.screen.t
        ⮐  if empty t.cellsz
        
        @clearImages()

        # prof.start @state.name+'.map'
        
        w = @cells.cols * t.cellsz[0]
        bytes = w*3
        
        ⮐  if bytes <= 0
        
        lines  = @getSegls()
        syntax = @getSyntax()
        
        data  = Buffer.alloc bytes
        
        bgrgb = color.hex @color.bg 
        
        charPixels = x rgb =>
        
            for xr in 0..@pixelsPerCol
                data[(x*@pixelsPerCol+xr)*3+0] = rgb[0]
                data[(x*@pixelsPerCol+xr)*3+1] = rgb[1]
                data[(x*@pixelsPerCol+xr)*3+2] = rgb[2]
        
        dataForLine = line =>
            
            for x in 0...line.length
                
                break if x*@pixelsPerCol > w
                                    
                ch = line[x]
                
                if valid ch and ch != ' '
                 
                    clss = syntax.getClass x y
                     
                    if 'header' in clss
                        if 'triple' in clss
                            rgb = [27 207 14]
                        else
                            rgb = [9 140 0]
                    else
                        f = 0.7
                        rgb = syntax.getColor x y
                        rgb = color.rgb(rgb) if rgb is str
                        rgb = rgb.map (v) -> clamp(0 255 parseInt(f*v))
                     
                    charPixels x rgb
                else
                    charPixels x bgrgb
                        
            for x in line.length...w/@pixelsPerCol
                charPixels x bgrgb        
                    
        for line,y in lines
            
            dataForLine line
            @images.push @imgId+y
            t.sendImageData data @imgId+y w 1
            break if y > (@cells.rows-@rowOffset) * t.cellsz[1] / @pixelsPerRow
                
        # prof.end @state.name+'.map'
            
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    drawImages: =>
        
        t = @cells.screen.t
        
        ⮐  if empty t.pixels or @hidden()
        
        for id,y in @images
            t.placeImage id @cells.x @cells.y+@rowOffset 0 y*@pixelsPerRow @pixelsPerCol @pixelsPerRow
        @
        
    draw: =>
        
        ⮐  if @hidden() 
                     
        @cells.fill_rect 0 0 @cells.cols-1 @cells.rows-1 ' ' null @color.bg
        
export mapview
