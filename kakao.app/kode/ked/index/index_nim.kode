###
    ███  ███   ███  ███████    ████████  ███   ███          ███   ███  ███  ██     ██
    ███  ████  ███  ███   ███  ███        ███ ███           ████  ███  ███  ███   ███
    ███  ███ █ ███  ███   ███  ███████     █████            ███ █ ███  ███  █████████
    ███  ███  ████  ███   ███  ███        ███ ███           ███  ████  ███  ███ █ ███
    ███  ███   ███  ███████    ████████  ███   ███  ██████  ███   ███  ███  ███   ███
###

use ../../kxk ▪ kstr slash kermit
use           ◆ index_utils

function index_nim

    @: ->
                        
    # 00000000    0000000   00000000    0000000  00000000
    # 000   000  000   000  000   000  000       000     
    # 00000000   000000000  0000000    0000000   0000000 
    # 000        000   000  000   000       000  000     
    # 000        000   000  000   000  0000000   00000000

    parseLine: index line ->
        
        if match = kermit.lineMatch line '●type ●name = ●ref object'
            match.type = 'object'
            match.line = index
            @result.classes.push match
            ⮐ 
    
        validFuncName =  name  -> name not in ['if''for''while''switch''return''catch']
        validFuncMatch = match -> match and validFuncName(match.name)
                
        funcMatch = ptn ->
            
            match = kermit.lineMatch line ptn ['(' ')' '"' '.' ',' "'"]
            if validFuncMatch match
                match
        
        if @result.classes.length
            
            className = @result.classes[-1].name
            classType = @result.classes[-1].type
                        
            addMeth = name opt={} =>
                
                fnc = method:name line:index class:className
                @result.funcs.push fnc
                null
                                
            if classType == 'object'
                
                if match = kermit.lineMatch(line 'proc ●name(self:#{className}○args)' ['(' ')']) ➜ addMeth match.name
                # if match = funcMatch "proc ●name(self:#{className}●args) ="          ➜ ⮐  addMeth match.name
                # if match = funcMatch "proc ●name(self:#{className}●args) : ●type ="  ➜ ⮐  addMeth match.name
                    
        addFunc = name opt={} =>
            
            fnc = name:name, line:index
            @result.funcs.push fnc
            null
        
        if match = kermit.lineMatch(line 'proc ●name ○args' ['(' ')']) ➜ addFunc match.name
        # if match = funcMatch('proc ●name(●args) =')         ➜ addFunc match.name
        # if match = funcMatch('proc ●name(●args) : ●type =') ➜ addFunc match.name
        # if match = funcMatch('proc ●name : ●type =')        ➜ addFunc match.name
                    
    # 00000000    0000000   00000000    0000000  00000000       000000000  00000000  000   000  000000000
    # 000   000  000   000  000   000  000       000               000     000        000 000      000
    # 00000000   000000000  0000000    0000000   0000000           000     0000000     00000       000
    # 000        000   000  000   000       000  000               000     000        000 000      000
    # 000        000   000  000   000  0000000   00000000          000     00000000  000   000     000

    parse: text ->
        
        lines = text.split '\n'

        @result = classes:[] funcs:[] lines:lines.length
        
        for lineText,lineIndex in lines
            @parseLine lineIndex lineText

        @result

export index_nim