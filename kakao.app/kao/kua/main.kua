
main = ... ->

    use std
    use ./kxk/kxk
    
    optparser = std.optparse """
        0.1.0
        Usage: kao [Options ...] [Files ...]
        
        Options:
          -t, --test         run tests
          -d, --debug        run with debugging output
          -n, --dryrun,      run without execution
          -o, --outdir=dir   output directory
          -v, --verbose      a combined short and long option
          -V, --version      display version information, then exit
          -h, --help         display this help, then exit
        """
        
    slice = tbl first last ->
        sliced = {}
        for i in first..last
            sliced[sliced.len + 1] = tbl[i]
        sliced
    
    argv = slice(process.argv 2 process.argv.len)
    
    (arg opts) = optparser:parse(argv)
    
    files = opts.unrecognised
    if opts.verbose
        log 'opts'       inspect(opts)
        log 'meta'       inspect(getmetatable(opts))
        log "debug"      opts.debug
        log "verbose"    opts.verbose
        log 'dryrun'     opts.dryrun
        log 'outdir'     opts.outdir
        log 'files'      files.len
        log 'files'      inspect(files)
    
    log "▸" kxk.exec("ls ~" print)
    
    load = file ->
        cmd = "cat " .. file
        kxk.exec cmd print
    
    if files.len > 0
        log "files" inspect(files)
        if opts.test
            for index file in pairs(files)
                log '▸' file
                load file
     
    verb = msg ->
        if opts.verbose ➜ log(msg)

⮐  require('./init')(main, ...)
    