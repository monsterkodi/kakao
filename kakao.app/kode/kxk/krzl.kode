###
    000   000  00000000   0000000  000    
    000  000   000   000     000   000    
    0000000    0000000      000    000    
    000  000   000   000   000     000    
    000   000  000   000  0000000  0000000
    
    stores an array of values
    filters those values by an abbreviation
###

function Krzl

    @: (@values) -> 
    
        @extract = (i) -> i
        @weight  = null
    
    match: (abbrv, exstr) ->
        
        if abbrv is str and exstr is str
            
            ai = 0
            ei = 0
            
            indices = []
            
            while ai < abbrv.length and ei < exstr.length
                ac = abbrv[ai]
                ec = exstr[ei]
                
                if ac == ec
                    indices.push ei
                    ai++
                    ei++
                    continue
                ei++
                
            if ai == abbrv.length
                return 
                    extract:exstr 
                    indices:indices
        null

    calcWeight: (pair) ->
        
        [value, info] = pair

        e = 0.00001
        w = e
        if @weight is func
            w = @weight value, info
            w = e if not w is num or w < e
        
        (1/w) * (info.indices[0] + 1-1/info.extract.length)
        
    sort: (pairs) ->
        
        pairs.sort (a,b) => @calcWeight(a) - @calcWeight(b)
        
    filter: (abbrv) -> # subset of values that match abbreviation
    
        if empty abbrv        ➜ warn 'krzl.filter without abbreviation?'      ; return []
        if empty @values      ➜ warn 'krzl.filter without @values?'           ; return []
        if not abbrv is str   ➜ warn 'krzl.filter abbreviation not a string?' ; return []
        if not @values is arr ➜ warn 'krzl.filter @values not an array?'      ; return []
        
        pairs = []
        for value in @values
            if mi = @match abbrv.toLowerCase(), @extract(value).toLowerCase()
                pairs.push [value, mi]
        
        @sort pairs
        pairs.map (p) -> p[0]
    
export Krzl

