
main = ... ->

    use std io
    use kxk/kxk
    
    optparser = std.optparse """
        0.1.0
        Usage: kao [Options ...] [Files ...]
        
        Options:
          -t, --test         run tests
          -d, --debug        run with debugging output
          -o, --outdir=dir   output directory
          -v, --verbose      a combined short and long option
          -V, --version      display version information, then exit
          -h, --help         display this help, then exit
        """

    log slash.cwd()
    
    (files _G.opts) = optparser:parse(arg)
    
    if opts.verbose
        log 'opts'    inspect(opts)
        log 'meta'    inspect(getmetatable(opts))
        log "debug"   opts.debug
        log "verbose" opts.verbose
        log 'outdir'  opts.outdir
        log 'files'   files.len
        log 'files'   inspect(files)
    
    watch slash.path(".")
        
watch = ... ->

    dir = slash.cwd()
    luaFiles = array.indexdict slash.files(slash.path(dir ".") "lua")
    kxkFiles = array.indexdict slash.files(slash.path(dir "./kxk") "lua")
    kxkTests = array.indexdict slash.files(slash.path(dir "kxk/test"))

    if verbose
        log "\nlua files"
        log array.str luaFiles
        log "\nkxk files"
        log array.str kxkFiles
        log "\nkxk tests"
        log array.str kxkTests
        
    modTimes = {}
    
    while true
    
        kxkChanged = {}
        luaChanged = {}
        
        for _ dir in ipairs {...}

            for i f in ipairs(slash.walk(dir))
                p = f.path
                stat    = slash.stat(p)
                modTime = stat.mtime
                
                if not modTimes[p]
                    modTimes[p] = modTime
                elif modTimes[p] == modTime
                    a = 1
                else
                    modTimes[p] = modTime
                    
                    if kxkFiles[p]
                        log "KXK" p
                        array.push(kxkChanged p)
                    elif luaFiles[p]
                        array.push(luaChanged p)
                        log "LUA" p                    
            
        testPass = true    
        if kxkChanged.len > 0
            if not test.run kxkTests
                testPass = false
            
        if luaChanged.len > 0 or kxkChanged.len > 0
            if testPass
                log "compile"
                (output ok) = slash.shell "luastatic" "main.lua" "/opt/homebrew/opt/luajit/lib/libluajit-5.1.a" "-I" "/opt/homebrew/opt/luajit/include/luajit-2.1"
                if true
                    log "restart"
                    slash.respawn()
                    log "DAFUK?"
                    os.exit(1)
                else
                    log output
            else
                log "skip compile"
        sleep 1
        
main()
    