###
 0000000   0000000   000       0000000
000       000   000  000      000     
000       000000000  000      000     
000       000   000  000      000     
 0000000  000   000  0000000   0000000
###

use ../kxk ▪ scooter kstr post
use ◆ text 

class Calc
    
    @activeKey: txt key ->
        
        clean   = empty txt
        cOnst   = text.endsWithConstant   txt
        value   = text.endsWithValue      txt
        float   = text.endsWithFloat      txt
        nuber   = text.endsWithNumber     txt
        unfin   = text.endsWithUnfinished txt
        open    = txt[-1] == symbol.open
        close   = txt[-1] == symbol.close
        deg2rad = txt[-1] == symbol.deg2rad
        rad2deg = txt[-1] == symbol.rad2deg
        dot     = txt[-1] == symbol.dot
        apply   = not unfin and not clean 
        
        switch key
            
            symbol.func 
            symbol.numbers      ➜ ⮐ true
            
            symbol.pi 
            symbol.phi 
            symbol.euler        ➜ ⮐ not cOnst and not deg2rad and not dot
            
            '1''2''3''4''5'
            '6''7''8''9''0'     ➜ ⮐ not cOnst and not deg2rad
            
            'c'
            symbol.backspace    ➜ ⮐ not clean
            
            'sin' 'cos' 'tan' 'atan' 'deg' 'rad' 'log' 

                ⮐ false if dot or close
                ⮐ true

            '/' '*' '=' 
            symbol.oneoverx
            symbol.sqrt
            symbol.exp          
            symbol.pow          ➜ ⮐ apply
            
            symbol.rad2deg      ➜ ⮐ apply and not rad2deg
            symbol.deg2rad      ➜ ⮐ apply and not deg2rad
            
            '+' '-'             ➜ ⮐ not text.endsWith txt, ['+' '-' '.']
            '.'                 ➜ ⮐ nuber and not float
            symbol.open         ➜ ⮐ not unfin and not cOnst and not close and not value
            symbol.close        ➜ ⮐ not unfin and text.balance(txt) > 0
            ➜
                log 'ever come here?' txt, key
                if key in text.unfinished
                    ⮐ not empty txt and not text.endsWithUnfinished(txt)
                else
                    log 'fallthrough'
                    
        log 'false?' txt, key
                    
        false

    #  0000000   0000000   000       0000000  
    # 000       000   000  000      000       
    # 000       000000000  000      000       
    # 000       000   000  000      000       
    #  0000000  000   000  0000000   0000000  
    
    @calc: expr ->
        
        ⮐ '' if empty expr
        
        expr = text.close expr
        expr = trim expr, ' \n'
        
        val = scooter expr
                
        post?.emit 'sheet' text:expr, val:val
        
        val
                
    # 000000000  00000000  000   000  000000000  000   000  00000000  000   000  
    #    000     000        000 000      000     000  000   000        000 000   
    #    000     0000000     00000       000     0000000    0000000     00000    
    #    000     000        000 000      000     000  000   000          000     
    #    000     00000000  000   000     000     000   000  00000000     000     
    
    @textKey: txt key ->
        
        ⮐ txt if not @activeKey txt, key
             
        clean = empty txt
        cOnst = text.endsWithConstant   txt
        value = text.endsWithValue      txt
        float = text.endsWithFloat      txt
        nuber = text.endsWithNumber     txt
        
        switch key
                        
            'sin' 'cos' 'tan' 'atan' symbol.sqrt, 'deg' 'rad' 'log'

                if not empty(txt) and text.endsWithValue(txt) 
                    txt = @calc key + '(' + txt
                else if not text.endsWith(txt, ['.'])
                    txt += key + '('
                    
            symbol.exp        ➜ if clean or text.endsWithOp(txt) ➜ txt += key+'^' else if float or cOnst or nuber txt = @calc 'exp(' + txt + ')'
            '°'               ➜ txt += key if text.endsWithNumber(txt)
            '='               ➜ txt = @calc txt
            symbol.oneoverx   ➜ txt = @calc '1/(' + txt + ')'
            '∡'               ➜ txt = @calc '∡(' + txt + ')'
            '+' '-'           ➜ txt += key if not text.endsWith txt, ['+' '-' '.']
            '.'               ➜ txt += key if text.endsWithNumber(txt) and not text.endsWithFloat(txt)
            symbol.euler
            symbol.phi
            symbol.pi         ➜ txt += '*' if value; txt += key
            '('               ➜ txt += key if not text.endsWithUnfinished(txt) and not text.endsWithConstant(txt)
            ')'               ➜ txt += key if not text.endsWithUnfinished(txt) and text.balance(txt) > 0
            ➜
                if key in text.unfinished
                    if not empty txt
                        if not text.endsWithUnfinished(txt)
                            txt += key
                else if not text.endsWithConstant(txt)
                    txt = text.removeZeroInfinity(txt) + key
                    
        # log 'txtKey' txt, key
        txt
        
export Calc
