###
00000000  000  000      00000000
000       000  000      000     
000000    000  000      0000000 
000       000  000      000     
000       000  0000000  00000000
###

use ../../kxk/slash
use ../../kxk/ffs

icons = {}
__dirname = slash.dir import.meta.url[7..]
ffs.read(slash.path __dirname, 'icons.json').then (t) -> 
    icons = JSON.parse t

class File
    
    # TODO: move this stuff to a config.noon file
    
    @sourceFileExtensions: [ 'kode' 'coffee' 'styl' 'swift' 'pug' 'md' 'noon' 'txt' 'json' 'sh' 'py' 'cpp' 'mm' 'cc' 'c' 'cs' 'h' 'hpp' 'ts' 'js' 'mjs' 'frag' 'vert']

    @isCode:  (file) -> slash.ext(file) in ['coffee' 'kode' 'py' 'cpp' 'cc' 'mm' 'c' 'cs' 'ts' 'js' 'mjs' 'h' 'hpp' 'frag' 'vert']
    @isImage: (file) -> slash.ext(file) in ['gif' 'png' 'jpg' 'jpeg' 'svg' 'bmp' 'ico']
    # @isText:  (file) -> slash.ext(file) in File.sourceFileExtensions
    @isText:  (file) -> true
   
    @rename: (from, to) ○->
        
        await ffs.mkdir slash.dir to
            
        if await ffs.isDir to
            to = slash.path to, slash.file from

        if await ffs.move from, to
                
            if editor.currentFile == from
                editor.currentFile = to
                if tabs.activeTab()?.file == from
                    tabs.activeTab().setFile to
                if commandline.command.name == 'browse'
                    if commandline.text() == slash.tilde from
                        commandline.setText slash.tilde to
                if not tabs.tab to
                    log 'recreate tab!' tabs.activeTab().file, to
            
            [from, to]
        else 
            null

    @duplicate: (from) ○-> 

        await ffs.duplicate from
    
    @copy: (from, to) ○->
        
        if await ffs.isDir to
            to = slash.path to, slash.file from
        
        await ffs.copy from, to
    
    @iconClassName: (file) ->
        
        file = slash.removeLinePos file
        
        clss  = icons.ext[slash.ext file]
        clss ?= icons.base[slash.name(file).toLowerCase()]
        clss ?= 'file'
        "icon #{clss}"
        
    @write: (file, text, mode, cb) ->
  
        slash.logErrors = true
        slash.writeText file, text, (done) ->
            if empty done
                cb "can't write #{file}"
            else
                cb null, done
    
    @unlock: (file, text, cb) ->
        
        fs.chmod file, 0o666, (err) ->
            
            if valid err
                cb err
            else
                File.write file, text, 0o666, cb
            
    @save: (file, text, cb) ->
    
        ffs.fileExists(file).then (stat) ->
            if stat
                File.write file, text, stat.mode, cb
            else
                File.write file, text, 0o666, cb
        
    @span: (text) ->
        
        base = slash.name text
        ext  = slash.ext(text).toLowerCase()
        clss = valid(ext) and ' '+ext or ''
        
        if base.startsWith '.' then clss += ' dotfile'
        
        span = "<span class='text#{clss}'>"+base+"</span>"
        
        if valid ext
            span += "<span class='ext punct#{clss}'>.</span>" + "<span class='ext text#{clss}'>"+ext+"</span>"
        span
                
    @crumbSpan: (file) ->
        
        return "<span>/</span>" if file in ['/' '']
        
        spans = []
        root = ''
        if slash.isAbsolute file
            spans.push ""
            root = '/'
        
        split = slash.split file
        
        for i in [0...split.length-1]
            s = split[i]
            spans.push "<div class='inline path' id='#{root}#{split[0..i].join '/'}'>#{s}</div>"
        spans.push "<div class='inline' id='#{file}'>#{split[-1]}</div>"
        spans.join "<span class='punct'>/</span>"
                
export File
