###
000  000   000  00000000   000   000  000000000   0000000  000   000   0000000   000   0000000  00000000  
000  0000  000  000   000  000   000     000     000       000   000  000   000  000  000       000       
000  000 0 000  00000000   000   000     000     000       000000000  000   000  000  000       0000000   
000  000  0000  000        000   000     000     000       000   000  000   000  000  000       000       
000  000   000  000         0000000      000      0000000  000   000   0000000   000   0000000  00000000  
###

use ../../kxk ▪ post kstr kseg
use ..        ◆ theme
use           ◆ view cells input choices

function inputchoice extends view

    @: @screen @name features ->

        super @screen @name features
        
        @input   = new input   @screen "#{@name}.input"
        @choices = new choices @screen "#{@name}.choices" features

        @choices.mapscr?.hide()       

        @input.on 'changed' @onInputChanged
        
    inputIsActive: -> @input.hasFocus() or @input.current().length
        
    # 000       0000000   000   000   0000000   000   000  000000000  
    # 000      000   000   000 000   000   000  000   000     000     
    # 000      000000000    00000    000   000  000   000     000     
    # 000      000   000     000     000   000  000   000     000     
    # 0000000  000   000     000      0000000    0000000      000     
    
    layout: =>

        x = int @screen.cols/4
        y = int @screen.rows/4
        w = int @screen.cols/2
        h = int @screen.rows/2-4

        cs = min h @choices.numFiltered()
        
        @input.layout    x+2   y+1  w-4  1
        @choices.layout  x+2   y+3  w-3  cs
        @cells.layout    x     y    w    cs+4
        
    #  0000000  000   000   0000000   000   000
    # 000       000   000  000   000  000 0 000
    # 0000000   000000000  000   000  000000000
    #      000  000   000  000   000  000   000
    # 0000000   000   000   0000000   00     00

    show: =>

        super()
        @choices.grabFocus()

    hide: => 
        
        @choices.mapscr?.hide()        
        post.emit 'focus' 'editor' 
        super()
                            
    # 000  000   000  00000000   000   000  000000000  
    # 000  0000  000  000   000  000   000     000     
    # 000  000 0 000  00000000   000   000     000     
    # 000  000  0000  000        000   000     000     
    # 000  000   000  000         0000000      000     
    
    onInputChanged: text =>

        ⮐ if text == @choices.filterText
        # lf 'inputchoice.onInputChanged' text
        @choices.filter text
        @choices.state.selectLine 0
        @choices.state.setMainCursor @choices.state.s.lines[0].length 0
        @choicesFiltered()
        @layout()
        
    choicesFiltered: ->
        
    currentChoice: ->
    
        choice = @choices.current() ? @input.current()
        choice = trim choice if choice is str
    
    onChoiceAction: choice action => lf 'onChoiceAction' choice action

    # 0000000    00000000    0000000   000   000
    # 000   000  000   000  000   000  000 0 000
    # 000   000  0000000    000000000  000000000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000  00     00

    draw: ->

        ⮐ if @hidden()
        
        @layout()
        @drawFrame()
        @drawChoices()

    drawChoices: ->
        
        @input.draw()
        @choices.draw()    

    drawFrame: ->
        
        fg = theme.quicky_frame_fg
        bg = theme.quicky_frame_bg
        
        if @input.visible()
            @cells.draw_frame 0 0 -1 -1 fg:fg bg:bg hdiv:[2]
        else
            @cells.draw_frame 0 0 -1 -1 fg:fg bg:bg

    #  0000000  00000000  000      00000000   0000000  000000000
    # 000       000       000      000       000          000
    # 0000000   0000000   000      0000000   000          000
    #      000  000       000      000       000          000
    # 0000000   00000000  0000000  00000000   0000000     000

    moveSelection: dir ->
        
        switch dir
            'down'  
                ⮐ if not @choices.hasNext()
                @choices.selectNext()
            'up'    
                ⮐ if not @choices.hasPrev()
                @choices.selectPrev()

        # lf 'moveSelection' dir @choices.state.mainCursor()[1] @choices.numFiltered()
        @input.set ''
        @choices.grabFocus()
        
    moveFocus: ->
        
        if @choices.hasFocus()
            @input.grabFocus()
        else
            @choices.grabFocus()

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    onKey: key event =>

        ⮐ if @hidden()

        switch event.combo
            'tab'       ➜ ⮐ @moveFocus()
            'esc'       ➜ ⮐ @hide()
            'return'    ➜ ⮐ @applyChoice @currentChoice()
            'up' 'down' ➜ ⮐ @moveSelection event.combo

        if @choices.hasFocus()
            
            current = @choices.current()

            switch event.combo
                'right'  
                'left' 
                'delete'
                'space' ➜ @onChoiceAction current event.combo
                    
            if event.char
                # lf 'focus input' event
                @input.grabFocus()
            
        if @input.onKey key event
            @choices.grabFocus() if empty @input.current()
        # ⮐ true if @choices.onKey key event
        true
        
    onMouse: event =>

        ⮐ if @hidden()
        ⮐ true if @input.onMouse   event
        ⮐ true if @choices.onMouse event
        true

    onWheel: event =>

        ⮐ if @hidden()

        ⮐ true if @input.onWheel event
        ⮐ true if @choices.onWheel event
        true
        
export inputchoice
