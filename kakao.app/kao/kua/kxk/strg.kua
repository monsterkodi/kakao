###
     ███████  █████████  ████████    ███████ 
    ███          ███     ███   ███  ███      
    ███████      ███     ███████    ███  ████
         ███     ███     ███   ███  ███   ███
    ███████      ███     ███   ███   ███████ 
###

use kxk.array

strbuff = require "string.buffer"

class strg 

    @: ... ->
    
        @buff = nil
        @frags = []
        for v in ...
            @ += v
                        
    $: ->
    
        @debuff()
        
        ⮐  "" if @frags.len == 0
        
        if @frags.len == 1 
            if type(@frags[1]) == "string"
                ⮐  @frags[1]
            ⮐  @frags[1]∙join()
                
        b = strbuff∙new()
        for f in @frags∙each()
            if type(f) == 'string'
                b∙put f
            else
                b∙put f∙join()
        b∙get()
        
    len: ->
    
        @debuff()
        ⮐  0 if @frags.len == 0
        l = 0
        for f in @frags∙each()
            if type(f) == 'string'
                l += f.len
            else
                for s in f∙each()
                    l += s.len
        l
                    
    endsWith:   o -> 
    
        @flatten()
        kstr.endsWith $@frags[1] o
        
    startsWith: o -> 
    
        @flatten()
        kstr.startsWith $@frags[1] o
    
    rtrim: c=' ' ->
    
        @flatten() 
        @frags[1] = @frags[1]∙rtrim(c)
        @
        
    ltrim: c=' ' -> 
    
        @flatten() 
        @frags[1] = @frags[1]∙ltrim(c)
        @
        
    trim: c=' ' -> 
    
        @flatten() 
        @frags[1] = @frags[1]∙trim(c)
        @
        
    shift: ->
    
        @flatten()
        @frags[1]∙shift()

    pop: ->
    
        @flatten()
        @frags[1]∙pop()

    number: ->
        
        tonumber $@

    bool: ->
        
        s = $@
        log "BOOL" s
        if s == "true"  ➜ ⮐  true
        if s == "false" ➜ ⮐  false
        nil
        
    num: ->
    
        @flatten()
        @frags[1].len
        
    seg: i ->
    
        @flatten()
        @frags[1][i]
                
    flatten: ->
    
        @debuff()
        seg = kseg()
        for f i in @frags∙each()
            if type(f) == "string"
                f = kseg(f)
            seg += f
        @frags = [seg]
        @
        
    debuff: ->
    
        if @buff
            @frags∙push @buff∙get()
            @buff = nil
        @
            
    lines: ->
    
        @debuff()
        ls = []
        for f in @frags∙each()
            if type(f) != "string"
                f = f∙join()             
            sl = kstr.split f "\n"
            for s in sl∙each()
                ls∙push strg(s)
        ls
            
    __len: ->
    
        log "LEN!!!!!!!!!!!!!!"
    
        @num()
            
    __add: s ->
    
        if s
            if not @buff
                @buff = strbuff∙new()
            @buff∙put s
        @
    
    __index: k ->    

        if type(k) == "number"
            ⮐  @seg(k)
            
        rawget @ k
        
⮐  strg

