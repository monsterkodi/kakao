
use kxk/kxk

▸ array

    ▸ from
    
        array.from({1 2 3}) ▸ [1 2 3]
        type(array.from({1 2 3})) ▸ "table"
        array.from({1 2 3})∙str() ▸ ".\n    1    1\n    2    2\n    3    3"
        
        a = [1 2 3]
        b = array.from(a)
        b∙push(4)
        b ▸ [1 2 3 4]
        a ▸ [1 2 3]

    ▸ map
    
        s = { "huga" "dork" "farz" }
        s = [unpack(s)]
        m = s∙map((s) -> "▸" & s)
        m ▸ [ "▸huga" "▸dork" "▸farz" ]
        m = s∙map((s) -> 1)
        m ▸ [ 1 1 1 ]
        
    ▸ filter
    
        s = [ "huga" "dork" "farz" ]
        f = s∙filter((s) -> kstr.find(s "a") > 0)
        f ▸ [ "huga" "farz" ]

    ▸ slice
    
        a = [1 2 3 4 5]
        s = a∙slice 1 2
        s ▸ [1 2]
        s = a∙slice 1 1
        s ▸ [1]
        s = a∙slice 3
        s ▸ [3 4 5]
        s = a∙slice 2 4
        s ▸ [2 3 4]
        s = a∙slice 2 5
        s ▸ [2 3 4 5]
        s = a∙slice 2 60
        s ▸ [2 3 4 5]
        s = a∙slice(-20 3)
        s ▸ [1 2 3]

        s = a∙slice 6
        s ▸ []
        s = a∙slice 5 1
        s ▸ []
        s = a∙slice 4 2
        s ▸ []
        s = a∙slice 20
        s ▸ []
        s = a∙slice 0 0
        s ▸ []

    ▸ shift
    
        a = [1 2 3]
        x = a∙shift()
        x ▸ 1
        a ▸ [2 3]
        x = a∙shift()
        a ▸ [3]
        x ▸ 2
        x = a∙shift()
        a ▸ []
        x ▸ 3
        x = a∙shift()
        a ▸ []
        x ▸ nil
        
    ▸ push 
    
        a = array()
        x = a∙push 1 2 3
        a ▸ array 1 2 3
        x ▸ a
        x = a∙push array(4 5 6)
        a ▸ array 1 2 3 array(4 5 6)
        x ▸ a
        
    ▸ pop
        
        a = array 1 2 3
        x = a∙pop()
        a ▸ array 1 2
        x ▸ 3
        x = a∙pop()
        a ▸ array 1
        x ▸ 2
        x = a∙pop()
        a ▸ array()
        x ▸ 1
        x = a∙pop()
        a ▸ array()
        x ▸ nil
        
    ▸ shift

        a = array 1 2 3
        x = a∙shift()
        a ▸ array 2 3
        x ▸ 1
        x = a∙shift()
        a ▸ array 3
        x ▸ 2
        x = a∙shift()
        a ▸ array()
        x ▸ 3
        x = a∙shift()
        a ▸ array()
        x ▸ nil
        
    ▸ unshift 
    
        a = array 0
        x = a∙unshift 1 2 3
        a ▸ array 1 2 3 0
        x ▸ a
        x = a∙unshift array(4 5 6)
        a ▸ array array(4 5 6) 1 2 3 0
        x ▸ a
        
    ▸ concat
    
        a = [1]
        b = [2]
        c = a + b
        a ▸ [1]
        b ▸ [2]
        c ▸ [1 2]
        
    ▸ splice
    
        a = []
        a∙splice 1 0 "a"
        a ▸ ["a"]
        a∙splice 1 0 "b"
        a ▸ ["b" "a"]
        a∙splice 1 1 "_"
        a ▸ ["_" "a"]
        a∙splice 1 2 "▸◂"
        a ▸ ["▸◂"]
        a∙splice 2 0 "∙" "◌"
        a ▸ ["▸◂" "∙" "◌"]

    ▸ rnd
    
        e = [1 2 3]
        e∙has e∙rnd() ▸ true
        
    ▸ swap
    
        e = [1 2 3]
        e∙swap 1 3
        e ▸ [3 2 1]
        e∙swap 1 6
        e ▸ [3 2 1]
        
    ▸ each
    
        e = [1 2 3]
        c = 1
        for i in e∙each()
            e[c] ▸ i
            c += 1

        for i idx in e∙each()
            e[i] ▸ idx
            
        e = []
        for i in e∙each()
            false ▸ true
            
    ▸ join
        
        e = ["a" 1 "cd"]
        e∙join() ▸ "a1cd"
        e∙join(" ") ▸ "a 1 cd"
        e∙join("●∙") ▸ "a●∙1●∙cd"
            
    ▸ indexdict
    
        a = [3 2 1]
        a∙indexdict() ▸ { 3 2 1 }

        a = ["3" "2" "1"]
        a∙indexdict() ▸ { "1":3 "2":2 "3":1 }
        
    ▸ keydict
    
        a = [{k:"1"} {k:"2"} {k:"3"}]
        a∙keydict "k" ▸ {"1":{k:"1"} "2":{k:"2"} "3":{k:"3"}}
                    
    ▸ isarr
    
        a = [1 2]
        array.isarr a ▸ true

        b = { c:1 d:2 }
        array.isarr b ▸ false
        
        c = {}
        array.isarr c ▸ false
        
        array.isarr false ▸ false
        
        array.isarr nil ▸ false
        
        d = {}
        d[2] = "d"
        array.isarr d ▸ true
        d[1] ▸ nil
        
        e = {}
        e.hello = "world"
        array.isarr e ▸ false
        e[1] = "and now?"
        array.isarr e ▸ true
        e.len ▸ 1
        e[1] = nil
        array.isarr e ▸ false
        e[3] = {}
        array.isarr e ▸ false
        e[2] = "{}"
        array.isarr e ▸ true
        e.len ▸ 3
                
    ▸ is
    
        a = []
        a∙is array ▸ true
        a∙is table ▸ false
        a∙is false ▸ false
        a∙is true  ▸ false
        a∙is nil   ▸ false
        
    ▸ iter
    
        a = array()
        for i in iter(4 0) ➜ a∙push i
        a ▸ array 4 3 2 1 0
        
        a = array()
        for i in iter(-4 4 2) ➜ a∙push i
        a ▸ array(-4 -2 0 2 4)
        
        a = array()
        for i in iter(4 -4 -2) ➜ a∙push i
        a ▸ array 4 2 0 -2 -4
        
        a = array()
        for i in iter(4 -4 2) ➜ a∙push i
        a ▸ array 4 2 0 -2 -4
        
        a = array()
        for i in iter(2/3 1/3 0.1) ➜ a∙push i
        a ▸ array 2/3 2/3-0.1 2/3-0.2 2/3-0.3
        
        a = array()
        for i in iter(2/3 2/3 1.001) ➜ a∙push i
        a ▸ array 2/3
        
        a = array()
        for i in iter(0.1+0.2 0.3 0.1) ➜ a∙push i
        a ▸ array 0.3
        
        a = array()
        for i in 0..3  ➜ a∙push i
        a ▸ array 0 1 2 3
        
        a = array()
        for i in 0...3 ➜ a∙push i
        a ▸ array 0 1 2
        
        a = array()
        for i in 0..<3 ➜ a∙push i
        a ▸ array 0 1 2
        
        a = array()
        for i in 3..0 ➜ a∙push i
        a ▸ array 3 2 1 0

        a = array()
        for i in 3...0 ➜ a∙push i
        a ▸ array() 

        a = array()
        for i in 3..<0 ➜ a∙push i
        a ▸ array() 
