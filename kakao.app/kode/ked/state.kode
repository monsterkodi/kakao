###
 0000000  000000000   0000000   000000000  00000000  
000          000     000   000     000     000       
0000000      000     000000000     000     0000000   
     000     000     000   000     000     000       
0000000      000     000   000     000     00000000  
###

use ../kxk ◆ immutable kstr
use ◆ color syntax util
use child_process

function state

    @: @cells -> 
        
        @syntax = new syntax
    
        @s = immutable
            lines:       ['']
            selections:  []
            cursor:      [0 0]
            view:        [0 0]
            gutter:      @calcGutter(1)
            
        @h = [@s] # undo states (history)
        @r = []   # redo states
            
        @setCursor 0 0
        
    set: item args... =>
        
        @s = @s.set.apply @s [item].concat(args)
        @h.pop()
        @h.push @s
        @s
    
    #  0000000  00000000  000000000  000      000  000   000  00000000   0000000  
    # 000       000          000     000      000  0000  000  000       000       
    # 0000000   0000000      000     000      000  000 0 000  0000000   0000000   
    #      000  000          000     000      000  000  0000  000            000  
    # 0000000   00000000     000     0000000  000  000   000  00000000  0000000   
    
    setLines: lines =>
        
        @syntax.setLines lines
        
        @s = @s.set 'gutter' @calcGutter(lines.length)
        @s = @s.set 'lines' lines        
        
        @r = []
        @h.push @s
        
    loadLines: lines =>
        
        @r = []
        @h = []
        @setLines lines
        
    # 000   000  000   000  0000000     0000000   
    # 000   000  0000  000  000   000  000   000  
    # 000   000  000 0 000  000   000  000   000  
    # 000   000  000  0000  000   000  000   000  
    #  0000000   000   000  0000000     0000000   
    
    undo: =>
        
        ⮐ if @h.length <= 1
        @r.push @h.pop()
        @s = @h[-1]
        @syntax.setLines @s.lines.asMutable()
        @updateCursor()
        
    redo: =>
        
        ⮐ if empty @r
        @h.push @r.pop()
        @s = @h[-1]
        @syntax.setLines @s.lines.asMutable()
        @updateCursor()
        
    begin: => @beginIndex = @h.length
        
    end: => 
        
        if valid @beginIndex
            
            @h.splice @beginIndex @h.length-@beginIndex-1
    
            delete @beginIndex
        
    isDirty: => @h.length > 1
    hasRedo: => @r.length > 0
        
    #       000   0000000   000  000   000  
    #       000  000   000  000  0000  000  
    #       000  000   000  000  000 0 000  
    # 000   000  000   000  000  000  0000  
    #  0000000    0000000   000  000   000  
    
    joinLines: =>
        
        ⮐ if @s.cursor[1] >= @s.lines.length-1
        
        lines = @s.lines.asMutable()
        
        @setCursor lines[@s.cursor[1]].length @s.cursor[1]
        
        lines.splice @s.cursor[1] 2 lines[@s.cursor[1]] + lines[@s.cursor[1]+1]
        
        @setLines lines
        
    calcGutter: numLines =>
        
        max 5 2 + Math.ceil(Math.log10(numLines+1))
                
    #  0000000  000   000  000000000  
    # 000       000   000     000     
    # 000       000   000     000     
    # 000       000   000     000     
    #  0000000   0000000      000     
    
    cut: =>
        
        if empty @s.selections
            @selectLine()
            @cut() if valid @s.selections
            ⮐ 
        @copy()
        @deleteSelection()
        
    #  0000000   0000000   00000000   000   000  
    # 000       000   000  000   000   000 000   
    # 000       000   000  00000000     00000    
    # 000       000   000  000           000     
    #  0000000   0000000   000           000     
    
    copy: =>
        
        ⮐ if empty @s.selections
            
        proc = child_process.spawn 'pbcopy'
        proc.stdin.write util.textForLinesRanges(@s.lines.asMutable() @s.selections.asMutable())
        proc.stdin.end()
            
    # 00000000    0000000    0000000  000000000  00000000  
    # 000   000  000   000  000          000     000       
    # 00000000   000000000  0000000      000     0000000   
    # 000        000   000       000     000     000       
    # 000        000   000  0000000      000     00000000  
    
    paste: =>
        
        text = child_process.execSync('pbpaste').toString("utf8")
        @insert text
        
    # 000  000   000   0000000  00000000  00000000   000000000  
    # 000  0000  000  000       000       000   000     000     
    # 000  000 0 000  0000000   0000000   0000000       000     
    # 000  000  0000       000  000       000   000     000     
    # 000  000   000  0000000   00000000  000   000     000     
    
    insert: text =>
        
        if text == '\t'
            text = lpad 4-@s.cursor[0]%4 ' '
        
        split = text.split /\r?\n/
        if split.length > 1
            @begin()
            for s,i in split
                @insert s
                if i < split.length-1 or text != '\n'
                    @insertNewline()            
            @end()
            ⮐ 
        
        x = @s.cursor[0]
        y = @s.cursor[1]
    
        lines = @s.lines.asMutable()
        line  = lines[y]
        
        line = kstr.splice line x 0 text
        
        lines.splice y 1 line
                
        @setLines lines
        
        x += text.length
        
        @syntax.updateLines lines [y]
        
        @setCursor x y
        
    insertNewline: =>
        
        x = @s.cursor[0]
        y = @s.cursor[1]
    
        lines = @s.lines.asMutable()
        line  = lines[y]
        
        before = line[0...x]
        after  = line[x..]
        
        lines.splice y 1 before
        lines.splice y+1 0 after
                
        @setLines lines
        
        y = y + 1
        x = 0
        
        @setCursor x y
        
    # 0000000    00000000  000      00000000  000000000  00000000  
    # 000   000  000       000      000          000     000       
    # 000   000  0000000   000      0000000      000     0000000   
    # 000   000  000       000      000          000     000       
    # 0000000    00000000  0000000  00000000     000     00000000  
    
    delete: type mods =>
        
        if type == 'back' and valid @s.selections
            @deleteSelection()
            ⮐ 

        x = @s.cursor[0]
        y = @s.cursor[1]
        
        lines = @s.lines.asMutable()
        line  = lines[y]
        
        switch type
            'eol'  ➜ line = line[0...x]
            'back' 
                if mods == 'cmd'
                    line = kstr.splice line x-1 1
                else
                    line = kstr.splice line x-1 1
            
        lines.splice y 1 line
            
        @setLines lines
        
        switch type
            'back' 
                x -= 1
                @setCursor x y
        @
                
    deleteSelection: =>
        
        ⮐ if empty @s.selections
        
        cursor      = @s.cursor.asMutable()
        lines       = @s.lines.asMutable()
        selections  = @s.selections.asMutable()
        
        [lines cursor] = util.deleteLinesRangesAndAdjustCursor lines selections cursor
                
        @deselect()
        @setLines lines
        @setCursor cursor[0] cursor[1]
        @
                    
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
    
    updateCursor: => @cells.t.setCursor @s.cursor[0]-@s.view[0]+@s.gutter @s.cursor[1]-@s.view[1]
    
    setCursor: x y =>
        
        y = clamp 0 @s.lines.length-1 y
        x = max 0 x
                        
        @set 'cursor' [x y]
        
        view = @s.view.asMutable()
        
        if y >= view[1] + @cells.rows - 1
            view[1] = y - @cells.rows + 2
        else if y < view[1]
            view[1] = y
            
        if view[1] > 0 and @s.lines.length < @cells.rows
            view[1] = 0

        view[0] = max 0 x - @cells.cols + @s.gutter + 1
            
        @setView view
            
        @updateCursor()
        
    moveCursor: dir steps=1 =>
        
        c = @s.cursor.asMutable() 
        
        switch dir
            'left'  ➜ c[0] -= 1
            'right' ➜ c[0] += 1
            'up'    ➜ c[1] -= steps
            'down'  ➜ c[1] += steps 
            'eol'   ➜ c[0] = @s.lines[c[1]].length
            'bol'   ➜ c[0] = 0
        
        @setCursor c[0] c[1]
        
    moveCursorAndSelect: dir =>
        
        selections = @s.selections.asMutable()
        selection = [@s.cursor[0] @s.cursor[1] @s.cursor[0] @s.cursor[1]]
        selections.push selection 
        
        @moveCursor dir 1
        
        switch dir
            'left'  ➜ selection[0] = selection[0]-1
            'right' ➜ selection[2] = selection[2]+1
            'up'    ➜ selection[1] = max 0 selection[1]-1
            'down'  ➜ selection[3] = min @s.lines.length-1 selection[3]+1
            'eol'   ➜ selection[2] = Infinity
            'bol'   ➜ selection[0] = 0
            'bof'   ➜ selection[1] = 0; selection[0] = 0
            'eof'   ➜ selection[3] = @s.lines.length-1; selection[2] = @s.lines[@s.lines.length-1].length
            
        selection[0] = clamp 0 @s.lines[selection[1]].length selection[0]
        selection[2] = clamp 0 @s.lines[selection[3]].length selection[2]
        
        @set 'selections' util.mergeRanges(selections)
                    
        true
        
    #  0000000   0000000  00000000    0000000   000      000      
    # 000       000       000   000  000   000  000      000      
    # 0000000   000       0000000    000   000  000      000      
    #      000  000       000   000  000   000  000      000      
    # 0000000    0000000  000   000   0000000   0000000  0000000  
    
    scrollView: dir steps =>
        
        sx = sy = 0
        
        switch dir
            'left'  ➜ sx = -1
            'right' ➜ sx =  1
            'up'    ➜ sy = -steps
            'down'  ➜ sy =  steps 
        
        view = @s.view.asMutable()
        
        view[0] += sx
        view[1] += sy
        
        view[1] = clamp 0 max(0 @s.lines.length-@cells.rows+1) view[1]
        
        view[0] = max 0 view[0]
            
        @setView view
        
        @cells.t.setCursor @s.cursor[0]+@s.gutter-@s.view[0] @s.cursor[1]-@s.view[1]
        
    setView: view => 
    
        @set 'view' view
                
    rangeForVisibleLines: =>
        
        [@s.view[0] @s.view[1] @s.view[0]+@cells.cols-1 @s.view[1]+@cells.rows-1]
                
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    select: from to =>
        
        selections = []
        
        @setCursor to[0] to[1]
        
        if from[1] > to[1]
            [from to] = [to from]
        else if from[1] == to[1] and from[0] > to[0]
            [from to] = [to from]

        to[1]   = clamp 0 @s.lines.length-1 to[1]
        from[1] = clamp 0 @s.lines.length-1 from[1]
            
        to[0]   = clamp 0 @s.lines[to[1]].length to[0]
        from[0] = clamp 0 @s.lines[from[1]].length from[0]
        
        selections.push [from[0] from[1] to[0] to[1]]
        
        @set 'selections' selections
        
        true
        
    selectChunk: x y =>
        
        line = @s.lines[y]
        
        [rs re] = kstr.rangeOfClosestChunk line x
        if rs >= 0 and re >= 0
            @select [rs y] [re+1 y]

    selectWord: x y =>
        
        line = @s.lines[y]
        
        [rs re] = kstr.rangeOfClosestWord line x
        if rs >= 0 and re >= 0
            @select [rs y] [re+1 y]
                        
    selectLine: y=@s.cursor[1] =>
        
        if 0 <= y < @s.lines.length
            @select [0 y] [@s.lines[y].length y]

    isSelectedLine: y =>
        
        for selection in @s.selections
            if selection[3] == y and selection[2] == 0
                continue
            if selection[1] <= y <= selection[3]
                ⮐ true
        false
            
    # 0000000    00000000   0000000  00000000  000      00000000   0000000  000000000  
    # 000   000  000       000       000       000      000       000          000     
    # 000   000  0000000   0000000   0000000   000      0000000   000          000     
    # 000   000  000            000  000       000      000       000          000     
    # 0000000    00000000  0000000   00000000  0000000  00000000   0000000     000     
    
    deselect: =>
        
        if valid @s.selections
            @set 'selections' []
                    
export state
