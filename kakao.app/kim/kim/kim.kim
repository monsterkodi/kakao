# ███   ███  ███  ██     ██
# ███  ███   ███  ███   ███
# ███████    ███  █████████
# ███  ███   ███  ███ █ ███
# ███   ███  ███  ███   ███

import std/[os, osproc, parseopt, random, streams, asyncdispatch, asyncfile, posix]
import kommon
import trans
import rndr
import greet

var
    params    : seq[string]
    files     : seq[string]
    optParser = initOptParser()
    outdir    = ""
    tests     = false
    verbose   = false
    transpile = false
    testFiles = walkDir(currentSourcePath().splitFile()[0] / "test").toSeq().map(proc (r:tuple) : string = r.path)
    
randomize()

proc verb(msg: string) = 

    if verbose
        log msg 

#  ███████   ████████  █████████         ███████   ████████   █████████
# ███        ███          ███           ███   ███  ███   ███     ███   
# ███  ████  ███████      ███           ███   ███  ████████      ███   
# ███   ███  ███          ███           ███   ███  ███           ███   
#  ███████   ████████     ███            ███████   ███           ███   

for kind, key, val in optParser.getopt()
    case kind
        of cmdArgument
            params.add key
            files.add(key)
        of cmdLongOption, cmdShortOption
            params.add "-" & key
            case key
                of "test"
                    tests = true
                of "verbose", "v"
                    verbose = true
                of "outdir", "o"
                    outdir = val
                of "transpile", "t"
                    transpile = true
                of "help", "h"
                    echo "usage: ", getAppFilename().extractFilename, " [options] [file.kim ...]"
                    echo ""
                    echo "      transpiles kim files to nim"
                    echo "      watches cwd if no files are given"
                    echo ""
                    echo "options:"
                    echo "  -o --outdir:DIR  output directory"
                    echo "  -t --transpile   log transpilat"
                    echo "     --test        run tests"
                    echo "  -v --verbose     verbose output"
                    quit(1)
                else
                    echo "unknown option!: ", key
                    quit(1)
        of cmdEnd
            discard
                        
# ████████   ████████   ███████  █████████   ███████   ████████   █████████
# ███   ███  ███       ███          ███     ███   ███  ███   ███     ███   
# ███████    ███████   ███████      ███     █████████  ███████       ███   
# ███   ███  ███            ███     ███     ███   ███  ███   ███     ███   
# ███   ███  ████████  ███████      ███     ███   ███  ███   ███     ███   
            
when defined(posix)

    import posix
    
    proc restart() =
        let args = allocCStringArray(@[getAppFilename()] & params)
        discard execv(getAppFilename().cstring, args)
        quit(1) # only reaches here if execve fails
    
# ███       ███████    ███████   ████████  ███  ███      ████████
# ███      ███   ███  ███        ███       ███  ███      ███     
# ███      ███   ███  ███  ████  ██████    ███  ███      ███████ 
# ███      ███   ███  ███   ███  ███       ███  ███      ███     
# ███████   ███████    ███████   ███       ███  ███████  ████████

proc logFile(f:string, prefix:string="") =

    if not verbose
        return

    let (dir, name, ext) = f.relativePath(getCurrentDir()).splitFile()
    let d = 
        if dir.len
            dir & "/" 
        else
            ""
    let icon = 
        if ext == ".kim"
            "  " 
        else
            "  "
            
    let color = 
        if ext == ".kim"
            fgGreen
        else
            fgMagenta

    styledEcho color, prefix, styleDim, icon, resetStyle, 
               color, styleBright, d, styleBright, name, resetStyle #, styleDim, ext, resetStyle
        
#  ███████   ███████   ██     ██  ████████   ███  ███      ████████
# ███       ███   ███  ███   ███  ███   ███  ███  ███      ███     
# ███       ███   ███  █████████  ████████   ███  ███      ███████ 
# ███       ███   ███  ███ █ ███  ███        ███  ███      ███     
#  ███████   ███████   ███   ███  ███        ███  ███████  ████████

proc compile(file:string, outDir:string="bin") : bool =

    profileScope 'comp'
    # let cmd = &"nim c --outDir:{outdir} {file}"
    let cmd = &"nim c --outDir:{outdir} --stackTrace:on --lineTrace:on {file}"
    let (output, exitCode) = execCmdEx(cmd)
        
    if exitCode != 0
        styledEcho fgRed, "✘ ", &"{cmd}"
        echo output
        false
    else
        if verbose
            styledEcho fgGreen, "✔ ", fgWhite, cmd
        true
        
# █████████  ████████   ███████  █████████   ███████
#    ███     ███       ███          ███     ███     
#    ███     ███████   ███████      ███     ███████ 
#    ███     ███            ███     ███          ███
#    ███     ████████  ███████      ███     ███████ 

proc runTests() =
    profileScope 'test'
    echo "\x1bc"
    for f in testFiles
        let cmd = &"nim r --colors:on {f}"
        let p = startProcess(command = "nim", args = @["r", f], options = {poInteractive, poUsePath})
        let startTime = getMonoTime()
        var output = ""
        
        let fd = p.outputHandle
        var flags = fcntl(fd, F_GETFL, 0)
        discard fcntl(fd, F_SETFL, flags or O_NONBLOCK)
        
        while true
            let elapsed = (getMonoTime() - startTime).inMilliseconds
            if elapsed >= 2000
                output.add(&"test killed after {elapsed} ms!!")
                p.terminate()
                sleep(50)
                if p.running
                    p.kill()
                break
                            
            var line = newString(1024*10)
            let bytesRead = read(fd, addr line[0], line.len)
            if bytesRead > 0
                output.add(line & "\n")
            elif bytesRead == 0
                break
            elif errno == EAGAIN
                discard poll(nil, 0, 50)
            elif not p.running
                break
            else
                break
        
        proc fgc(c:auto) : auto = ansiForegroundColorCode(c)
        let exitCode = p.waitForExit()
        if exitCode != 0 or verbose
            #or f.endsWith("pars.nim")
            styledEcho output.replace("[Suite]",  fgc(fgYellow) & "▸\x1b[0m")
                             .replace("[OK]",     fgc(fgGreen) & "✔\x1b[0m")
                             .replace("[FAILED]", fgc(fgRed) & "✘\x1b[0m")
        else
            let okCount = output.count "[OK]"
            styledEcho output.replace("[Suite]",  fgc(fgYellow) & "▸\x1b[0m")
                             .replace(peg"'[OK]' .+", &"{ansiStyleCode styleDim} ✔ {okCount}\x1b[0m")
            
        if exitCode != 0
            styledEcho fgRed, "✘ ", &"{cmd}"
    echo ""

if files.len

    if transpile
        # profileStart 'translate'
        let transpiled = rndr.files(files)
        # profileStop 'translate'
        quit(transpiled.len - files.len)    
    else
        let transpiled = trans.pile(files)
        quit(transpiled.len - files.len)    

if tests
    runTests()
    quit(0)
 
# ███   ███   ███████   █████████   ███████  ███   ███
# ███ █ ███  ███   ███     ███     ███       ███   ███
# █████████  █████████     ███     ███       █████████
# ███   ███  ███   ███     ███     ███       ███   ███
# ██     ██  ███   ███     ███      ███████  ███   ███

proc watch(paths:seq[string]) =

    setControlCHook(proc () {.noconv.} = 
        
        styledEcho ''
        styledEcho fgGreen, farewells[rand(farewells.high)]
        quit 0)
    
    var modTimes: Table[string,times.Time]
    
    styledEcho ''
    styledEcho fgGreen, greetings[rand(greetings.high)]
    styledEcho ''
    
    for p in paths
        let (dir, name, ext) = p.splitFile()
        styledEcho fgBlue, styleDim, "● ", resetStyle, 
            styleBright, fgBlue, dir, " ", resetStyle, 
            styleBright, fgYellow, name, styleDim, ext, resetStyle
    
    var firstLoop = true
    
    while true
    
        var doBuild = false
        var toTranspile:seq[string]
        var kimFiles:seq[string]
        var nimFiles:seq[string]
        
        for path in paths:
        
            if not dirExists(path)
            
                continue
                
            for f in walkDirRec(path)
            
                let (dir, name, ext) = f.splitFile()
                
                if ext == ".kim"
                    kimFiles.add(f)
                elif ext == ".nim"
                    nimFiles.add(f)
                else
                    continue
                
                let modTime = getFileInfo(f).lastWriteTime
                
                if not modTimes.hasKey(f)
                    modTimes[f] = modTime
                    continue
                  
                if modTimes[f] == modTime
                    continue
        
                modTimes[f] = modTime
                if ext == ".nim" and not testFiles.contains f
                    doBuild = true
                elif ext == ".kim"
                    toTranspile.add f
                
        if firstLoop
                                    
            firstLoop = false
            for f in kimFiles
                logFile f
            for f in nimFiles
                logFile f
                
        if toTranspile
            verb &"toTranspile: {toTranspile}"
            for f in trans.pile(toTranspile)
                verb &"transpiled {f}"    
                logFile f, "✔ "
            # verb 'runTests'    
            runTests()
            
        if doBuild
            # verb 'doBuild'    
            if compile("nim/kim.nim", "bin")
                for f in kimFiles
                    let transpiled = trans.trans(f)
                    logFile transpiled, "✔ "
                restart()
        sleep 200
        
watch(@[getCurrentDir()]) 
                 