
use kxk.array

class kseg extends array 

    @: s ->
        
        if s and s.len > 0
            for i seg in @codes s
                @push seg

    decode: str startPos=1 ->
    
        b1 = str∙byte( startPos, startPos )
    
        if b1 < 0x80
            ⮐  (startPos, startPos)
    
        if b1 > 0xF4 or b1 < 0xC2
            ⮐  nil
    
        bytes = b1 >= 0xF0 and 3 or b1 >= 0xE0 and 2 or b1 >= 0xC0 and 1
    
        endPos = startPos + bytes
    
        b2 = str∙byte( startPos + 1, endPos )
        for _ bX in ipairs { b2 }
            
            if bit.band( bX, 0xC0 ) != 0x80
                ⮐  nil
    
        (startPos endPos)
    
    codes: str ->
    
        i = 1
    
        ->
            if i > str.len ➜ ⮐  nil
            
            (startPos endPos) = @decode(str i)
    
            if not startPos ➜ error("invalid UTF-8 code" 2)
            
            i = endPos + 1
            
            (startPos string.sub(str startPos endPos))
    
    $: -> table.concat @ ""
        
    rpad: l c=' ' ->  
        while @len < l ➜ @push c
        @
        
    rtrim: c=" \n" ->
        s = kseg(c) 
        while @len > 0 and s∙has(@[^1]) ➜ @pop()
        @
        
    ltrim: c=" \n" -> 
        s = kseg(c) 
        while @len > 0 and s∙has(@[1]) ➜ @shift()
        @
        
    trim: c=" \n" -> @rtrim(c)∙ltrim(c)
   
⮐  kseg