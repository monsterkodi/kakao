
use std ▪ os paths strutils sequtils strformat macros dirs appdirs

normalize* = ◇string path ➜string ->

    p = path
    swallow ◇int = p.high+1
    for i in countdown p.high 0
        if i >= swallow
            p.delete i..i
            if i == swallow
                if p[0] == '/' and path[0] != '/'
                    p.delete 0..0
                ⮐  slash.normalize p
            continue
        if p[i] == '\\'
            p[i] = '/'
        if i < p.high and p[i] == '/'
            if i < p.high - 1
                if p[i+1] == '.' and p[i+2] == '/' 
                    p.delete i+1..i+2
                if p[i+1] == '.' and p[i+2] == '.' and i > 0 and p[i-1] != '.'
                    p.delete i..i+2
                    swallow = i-1
                    while swallow > 0 and p[swallow] != '/'
                        swallow -= 1                    
            if p[i+1] == '/'
                p.delete i+1..i+1
                
    if p.len >= 4 and p[0..3] == "./.."
        p.delete 0..1
                
    if p.len > 1 and p[^1] == '/'
        p[0..^2]
    elif p.len > 1 and p[0] == '/' and path[0] notin {'/' '\\'}
        p[1..^1]
    else
        p
    
files* = ◇string path ➜seq[string] -> walkDirRec(path).toSeq()

path*  = ◇seq[string] args ➜string ->

    slsh = ◇string s ➜string -> s.replace("\\" "/")
    slash.normalize args.filter(◇string s ➜bool -> s.len > 0).map(slsh).join("/")
    
path* = ◇varargs[string] args ➜string ->
    
    slash.path args.toSeq()

split* = ◇string path ➜seq[string] ->

    s = path.split "/"
    s.setLen(s.len - 1) if s[^1].len == 0
    s
    
contains* = ◇string path ◇string subpath ➜bool -> subpath in slash.split path

home*     = ◇varargs[string] args ➜string -> slash.path @[slash.normalize(appDirs.getHomeDir().string)].concat(args.toSeq())
cwd*      = ◇varargs[string] args ➜string -> slash.path @[paths.getCurrentDir().string].concat(args.toSeq())
app*      = ◇varargs[string] args ➜string -> slash.path @[getAppDir().string].concat(args.toSeq())
exe*      = ➜string -> getAppFilename().string

untilde*  = ◇string path ➜string -> path.expandTilde()
tilde*    = ◇string path ➜string -> path.replace slash.home() "~"
    
type parseInfo* = tuple[path: string, dir: string,  file: string, name: string, ext: string]

parse* = ◇string path ➜ parseInfo ->

    path  = path.normalize().untilde()
    split = path.split()
    dir   = ""
    if split.len > 2 
        dir = split[0..^2].join "/" 
    elif split.len == 2 
        dir = split[0]
    file  = split[^1]
    name  = file
    ext   = ""
    
    if dir.len == 0 and path not in ["." ".."]
        dir = if path[0] == '/' ➜ "/" ➜ "."
    
    nmspl = file.split "."
    if nmspl.len > 1
        name = nmspl[0..^2].join "."
        ext  = nmspl[^1]
        
    (path:path dir:dir file:file name:name ext:ext)

dir*   = ◇string path ➜string -> path.parse.dir
file*  = ◇string path ➜string -> path.splitPath[1]
name*  = ◇string path ➜string -> splitFile(path.Path)[1].string
ext*   = ◇string path ➜string -> splitFile(path.Path)[2].string[1..^1]

mkdir* = ◇string dir               -> if not dirExists dir ➜ createDir dir
copy*  = ◇string src  ◇string dest -> mkdir(dest.parentDir()) ; copyFileWithPermissions(src dest)
write* = ◇string path ◇string text -> mkdir(path.parentDir()) ; path.writeFile(text)
read*  = ◇string path ➜string      -> path.readFile()

dirs* = ◇string path ➜seq[string] ->

    dirs = path.dir.split '/'
    if dirs[0] == "" and dirs.len == 1
        dirs.delete 0..0
    dirs
    
swapExt* = ◇string path ◇string ext ➜string ->

    $path.Path.changeFileExt("." & ext)
    
splitExt* = ◇string path ➜seq[string] ->
    
    split = path.split()
    dotidx = split[^1].rfind "."
    ext = ""
    if dotidx > 0
        ext = split[^1][dotidx+1..^1]
        split[^1] = split[^1][0...dotidx]
    pth = split.join "/"
    [pth ext]
    
removeExt* = ◇string path ➜string -> path.splitExt[0]
    
swapLastPathComponentAndExt* = ◇string path ◇string src ◇string tgt ➜string ->

    dirs = path.dirs()    
    for i in countdown dirs.high 0
        if dirs[i] == src
            dirs[i] = tgt
            break
            
    dirs.add path.file.swapExt(tgt)
    dirs.join "/"
                
isRelative* = ◇string path ➜ bool -> path.len == 0 or path.len > 0 and path[0] notin ['/' '~']
isAbsolute* = ◇string path ➜ bool -> path.len > 0 and path[0] in ['/' '~']
isRoot*     = ◇string path ➜ bool -> path.normalize() == "/"
    
absolute* = ◇string path ◇string parent ➜string ->

    if slash.isRelative path
        slash.path parent path
    else
        slash.untilde path
    
absolute* = ◇string path ➜string -> slash.absolute path slash.cwd()
relative* = ◇string path ◇string base ➜string ->

    paths.relativePath(slash.normalize(path).Path slash.normalize(base).Path).string

macro srcDir*(): untyped = 
    quote
        currentSourcePath()
