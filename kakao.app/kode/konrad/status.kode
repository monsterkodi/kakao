###
 0000000  000000000   0000000   000000000  000   000   0000000    
000          000     000   000     000     000   000  000         
0000000      000     000000000     000     000   000  0000000     
     000     000     000   000     000     000   000       000    
0000000      000     000   000     000      0000000   0000000     
###

use ../kxk ▪ slash
use ../kolor/kolor ▪ klor
use child_process

# 00000000   00000000   00000000  000000000  000000000  000   000  
# 000   000  000   000  000          000        000      000 000   
# 00000000   0000000    0000000      000        000       00000    
# 000        000   000  000          000        000        000     
# 000        000   000  00000000     000        000        000     

pretty = 
    path:     p c=klor.yellow -> p.split('/').map((n) -> c(n)).join klor.dim(c('/'))
    ext:      e c=klor.yellow -> e.length ? klor.dim(c('.')) + c(e) : ''
    file:     f c=klor.yellow -> "#{klor.bold(c(slash.name(f)))}#{pretty.ext(slash.ext(f),c)}"
    filePath: p c=klor.yellow ->

        if valid slash.dir p
            "#{pretty.path(slash.dir(p),c)}#{pretty.path('/',c)}#{pretty.file(slash.file(p),c)}"
        else
            "#{pretty.file(slash.file(p),c)}"

    ranges: rgs ->

        result = ''
        plain  = ''
        
        for rng in rgs
            
            while plain.length < rng.start
                plain += ' '
                result += ' '

            cfunc = switch rng.clss

                    'text'                  ➜ ⮐ (s) -> klor.white s
                    'text require string'   ➜ ⮐ (s) -> klor.gray klor.bold s
                    'comment'               ➜ ⮐ (s) -> klor.w1 s
                    'punct comment'         ➜ ⮐ (s) -> klor.w1 klor.dim s
                    'punct'
                    'punct minor'
                    'punct require'
                    'keyword require'       ➜ ⮐ (s) -> klor.gray klor.dim s
                    'function'
                    'function call'
                    'string single'
                    'string double'
                    'dir text'
                    'property'
                    'function argument'     ➜ ⮐ (s) -> klor.g3 klor.bold s
                    'punct string interpolation start' 
                    'punct string interpolation end' ➜ (s) -> klor.g1 klor.bold s
                    'punct string single'
                    'punct string double'
                    'punct string double triple' 
                    'punct dir'
                    'punct function call'   ➜ ⮐ (s) -> klor.green klor.dim s
                    'method class'          ➜ ⮐ (s) -> klor.y4 klor.bold s
                    'obj'
                    'class'
                    'git file'
                    'dictionary key'
                    'module'                ➜ ⮐ (s) -> klor.y4 s
                    'method'                ➜ ⮐ (s) -> klor.y5 klor.bold s
                    'punct method'          ➜ ⮐ (s) -> klor.y2 klor.bold s
                    'punct git'
                    'git ext'
                    'punct method class'
                    'punct dictionary'
                    'punct function'        ➜ ⮐ (s) -> klor.yellow klor.dim s
                    'number' 'keyword'
                    'punct compare ligature'
                    'url domain'            ➜ ⮐ (s) -> klor.blue klor.bold s  
                    'require'
                    'punct property'        ➜ ⮐ (s) -> klor.green klor.dim s  
                    'punct semver' 
                    'url protocol'
                    'punct regexp start'
                    'punct regexp end'
                    'punct regexp'
                    'punct url'             ➜ ⮐ (s) -> klor.magenta s 
                    'punct escape regexp'   ➜ ⮐ (s) -> klor.m1 s 
                    'semver' 
                    'dir url tld'
                    'text regexp'
                    'punct url tld'         ➜ ⮐ (s) -> klor.magenta klor.bold s  
                    'punct function tail ligature' 
                    'punct function async' 
                    'punct keyword' 
                    'punct await'
                    'punct keyword return'  ➜ ⮐ (s) -> klor.b5 klor.bold s
                    'nil'                   ➜ ⮐ (s) -> klor.r2 s
                                            ➜ ⮐ (s) -> klor.white s

            plain  += rng.match
            result += cfunc rng.match

        result

# 00000000   00000000  00000000    0000000   00000000   000000000  
# 000   000  000       000   000  000   000  000   000     000     
# 0000000    0000000   00000000   000   000  0000000       000     
# 000   000  000       000        000   000  000   000     000     
# 000   000  00000000  000         0000000   000   000     000     

report = status opt={} ○-> 

    changes = []
    
    for gitFile,k of status.files
        
        relPath = slash.relative gitFile, process.cwd()
        
        l =  deleted:r1, created:w2, changed:g1
        m =  deleted:r4, created:w5, changed:g4
        b =  deleted:R5, created:W1, changed:G1
        
        if k in Object.keys m
        
            # log 'gitFile k' gitFile, k, opt.diff

            prfx   = b[k] "  "
            prfx  += reset '  '
            lame   = slash.ext(gitFile) in ['js' 'json']
            change = prfx + pretty.filePath relPath, (lame and l[k] or m[k])
            
            if k in ['changed' 'created'] and opt.diff

                continue if lame

                cmd = "git --no-pager diff -U0  --ignore-blank-lines --ignore-space-at-eol --no-color #{gitFile}"
                res = child_process.execSync(cmd,{encoding:'utf8',cwd:status.gitDir})
                # log 'diff res' cmd, res, status.gitDir
                diff = ""
                c = w2('●')
                start = 0

                for ls in res.split(/\r?\n/)

                    if 
                        ls.substr(0,4) in ['+++ ' '--- '] ➜

                        ls[0] == '@'

                            split = ls.split('@@')
                            split = split[1].split ' +'
                            split = split[1].split ','
                            start = parseInt split[0]
                            diff += "\n" + c
                            c = w2 '●'

                        ls[0] == '+'

                            diff += "\n "
                            start++
                            rgs = kolor.ranges(ls.substr(1),slash.ext(gitFile))
                            if valid rgs
                                diff += pretty.ranges(rgs)
                            else
                                diff += w8(ls.substr(1))

                        ls[0] == '-'
                            
                            diff += "\n " + w3 ls.substr 1
                            
                if diff.length ➜ change += diff + "\n" + w2 '●'
                    
            changes.push change

    relPath = slash.relative status.gitDir, process.cwd() 
    relPath = '.' if relPath == ''
    gitPath = pretty.filePath relPath, klor.w5
    
    aheadBehind = ->
        if status.ahead or status.behind
            st = ''
            if status.ahead
                st += w3 "▲ #{status.ahead}"
            if status.behind
                st += r5 "▼ #{status.behind}"
            st = rpad 4 st
        else
            ''
            
    log B5('    ' + gitPath + ' ') + ' '
    for c in changes
        log c

# 00000000    0000000   00000000    0000000  00000000  
# 000   000  000   000  000   000  000       000       
# 00000000   000000000  0000000    0000000   0000000   
# 000        000   000  000   000       000  000       
# 000        000   000  000   000  0000000   00000000  

parseStatus = gitStatus gitDir -> 

    lines = gitStatus.split '\n'
    status = 
        gitDir:  gitDir
        deleted: []
        created: []
        changed: []
        files:   {}
        
    dirSet = new Set
    
    while line = lines.shift()

        rel = line.slice 3
        file = slash.path gitDir, line.slice 3
        while (rel = slash.dir(rel)) != ''
            dirSet.add(rel)

        switch line.slice 0 2
            ' D' ➜  status.deleted.push file
            'MM'
            ' M' ➜  status.changed.push file
            '??' ➜  status.created.push file

    status.dirs = Array.from(dirSet).map (d) -> slash.path gitDir, d
    list = ['deleted' 'created' 'changed']
    for key in list
        for file in status[key]
            status.files[file] = key

    # log 'status' status
    status

# 00000000  000   000  00000000    0000000   00000000   000000000  
# 000        000 000   000   000  000   000  000   000     000     
# 0000000     00000    00000000   000   000  0000000       000     
# 000        000 000   000        000   000  000   000     000     
# 00000000  000   000  000         0000000   000   000     000     

export (opt={}) ○->
    
    new Promise (resolve, reject) ->

        shopt = shell:true
        child_process.exec 'git rev-parse --show-toplevel' shopt, (err, gitDir, stderr) -> 

            if err
                error 'ERROR' err
                ⮐ reject()
                
            else if valid gitDir

                gitDir = trim gitDir,' \n'
                # log 'gitDir' gitDir
                
                child_process.exec '/usr/bin/git status --porcelain' shopt, (err, status, stderr) -> 
                    
                    if err
                        error 'ERROR' err
                        ⮐ reject()

                    else if valid status

                        report parseStatus(status,gitDir), opt

                        ⮐ resolve()
                        