###
 0000000  000000000   0000000   000000000  00000000  
000          000     000   000     000     000       
0000000      000     000000000     000     0000000   
     000     000     000   000     000     000       
0000000      000     000   000     000     00000000  
###

use ../kxk ◆ immutable

function state

    @: @cells -> @init ['']
    
    init: lines ->
        
        @s = immutable
            lines:       lines
            selections:  []
            cursor:      [0 0]
            view:        [0 0]
            gutter:      @calcGutter(lines.length)

        @setCursor 0 0
        
    calcGutter: numLines =>
        
        2 + Math.ceil(Math.log10(numLines))
            
    #  0000000  000   000  00000000    0000000   0000000   00000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000    
    # 000       000   000  000   000       000  000   000  000   000  
    #  0000000   0000000   000   000  0000000    0000000   000   000  
    
    setCursor: x y =>
        
        y = clamp 0 @s.lines.length-1 y
        x = clamp 0 @s.lines[y].length x
                        
        @s = @s.set 'cursor' [x y]
        
        if y > @s.view[1] + @cells.t.rows()
            view = @s.view.asMutable()
            view[1] = y - @cells.t.rows()
            @s = @s.set 'view' view
            doRedraw = true
        else if y < @s.view[1]
            view = @s.view.asMutable()
            view[1] = y
            @s = @s.set 'view' view
            doRedraw = true
            
        @cells.t.setCursor x+@s.gutter y-@s.view[1]
        
        doRedraw
            
    moveCursor: dir steps=1 =>
        
        c = @s.cursor.asMutable() 
        
        switch dir
            'left'  ➜ c[0] -= 1
            'right' ➜ c[0] += 1
            'up'    ➜ c[1] -= steps
            'down'  ➜ c[1] += steps 
            
        @setCursor c[0] c[1]
        
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    select: from to =>
        
        selections = []
        
        @setCursor to[0] to[1]
        
        if from[1] > to[1]
            [from to] = [to from]
        else if from[1] == to[1] and from[0] > to[0]
            [from to] = [to from]

        for y in from[1]..to[1]
            
            ll = max 0 @s.lines[y].length
            if y == from[1]
                x1 = clamp 0 ll from[0]
            else
                x1 = 0
            if y == to[1]
                x2 = clamp 0 ll to[0]
            else
                x2 = ll
                
            if x1 < x2
                selections.push [x1 y x2]
        
        @s = @s.set 'selections' selections
        
        true
        
    selectWord: x y =>
        
    selectLine: y =>
        
        @select [0 y] [@s.lines.length-1 y]
        
    deselect: =>
        
        if valid @s.selections
            @s = @s.set 'selections' []
            ⮐ true
            
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    draw: =>
        
        for y in 0...@cells.t.rows()
            li = y+@s.view[1]
            line = @s.lines[li]
            for x in 0...min(line.length @cells.t.cols()-@s.gutter)
                if x+@s.gutter < @cells.t.cols()
                    @cells.c[y][x+@s.gutter].fg   = 'ffffff'
                    @cells.c[y][x+@s.gutter].char = line[x]
                    
        for selection in @s.selections
            li = selection[1]
            y  = li-@s.view[1]
            if @s.view[1] <= li < @s.view[1] + @cells.t.rows()
                for x in selection[0]...selection[2]
                    if x+@s.gutter < @cells.t.cols()
                        @cells.c[y][x+@s.gutter].bg = '444488'

export state