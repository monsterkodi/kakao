--[[
 0000000   0000000   000      000000000
000       000   000  000         000   
0000000   000000000  000         000   
     000  000   000  000         000   
0000000   000   000  0000000     000   
--]]


local salt = class("salt")
    

--  0000000   0000000   000      000000000  00000000  0000000    
-- 000       000   000  000         000     000       000   000  
-- 0000000   000000000  000         000     0000000   000   000  
--      000  000   000  000         000     000       000   000  
-- 0000000   000   000  0000000     000     00000000  0000000    


function salt.static.isSaltedLine(line) 
        local trimmed = kseg.trim(kseg.trim(kseg.trim(line), '#'))
        if ((trimmed[1] == '█') or (trimmed[1] == '0')) then 
            return (#kseg.collectGraphemes(trimmed) <= 3)
        end
    end

--  0000000   0000000   000      000000000        000  000   000   0000000  00000000  00000000   000000000  
-- 000       000   000  000         000           000  0000  000  000       000       000   000     000     
-- 0000000   000000000  000         000           000  000 0 000  0000000   0000000   0000000       000     
--      000  000   000  000         000           000  000  0000       000  000       000   000     000     
-- 0000000   000   000  0000000     000           000  000   000  0000000   00000000  000   000     000     


function salt.static.findPositionsForSaltInsert(lines, pos) 
        local y = pos[2]
        if not salt.isSaltedLine(lines[y]) then return end
        
        local sy = y
        while salt.isSaltedLine(lines[(sy - 1)]) do 
            sy = sy - 1
            if ((y - sy) >= 4) then break end
        end
        
        local ey = y
        while salt.isSaltedLine(lines[(ey + 1)]) do 
            ey = ey + 1
            if ((ey - sy) >= 4) then break end
        end
        
        local posl = array()
        if ((ey - sy) >= 4) then 
            for y in iter(sy, (sy + 4)) do 
                posl:push(array(pos[1], y))
            end
        end
        
        return posl
    end

--  0000000    0000000   0000000  000  000  000   000  00000000   0000000   0000000    00000000  00000000   
-- 000   000  000       000       000  000  000   000  000       000   000  000   000  000       000   000  
-- 000000000  0000000   000       000  000  000000000  0000000   000000000  000   000  0000000   0000000    
-- 000   000       000  000       000  000  000   000  000       000   000  000   000  000       000   000  
-- 000   000  0000000    0000000  000  000  000   000  00000000  000   000  0000000    00000000  000   000  


function salt.static.insertAsciiHeaderForPositionsAndRanges(lines, posl, ranges) 
        if empty(ranges) then 
            ranges = array.map(posl, function (p) 
    return belt.rangeOfClosestWordToPos(lines, p)
end)
        end
        
        local text = belt.joinLines(belt.textForLineRanges(lines, ranges), ' ')
        
        local indt = kstr.lpad(belt.lineIndentAtPos(lines, posl[1]))
        
        local salt = salt.saltize(text, {prepend = indt, '# '}) .. '\n'
        
        local lines, posl = belt.insertTextAtPositions(lines, salt, array(array(1, posl[1][2])))
        return lines, posl, array()
    end


function salt.static.saltize(text, opt) 
        opt = opt or ({})
        opt.char = opt.char or '█'
        opt.prepend = opt.prepend or ''
        
        local s = kseg()
        if #text then 
            s = kseg(kstr.trim(string.lower(text)))
        end
        
        local cs = array()
        for _, c in ipairs(s) do 
            if salterFont[c] then 
                cs:push(salterFont[c])
            end
        end
        
        local zs = array()
        for r in iter(1, 5) do 
            local zr = opt.prepend
            for _, c in ipairs(cs) do 
                zr = zr .. (c[r] .. "  ")
            end
            
            zs:push(zr)
        end
        
        return zs:join('\n')
    end

_G.salterFont = noon.parse([[
0   
    | ██████ |
    |███  ███|
    |██    ██|
    |███  ███|
    | ██████ |
1   
    |   ███
    | █████
    |██████
    |   ███
    |   ███
2   
    |█████ |
    |   ███|
    |  ███ |
    | ███  |
    |██████|
3   
    |██████ |
    |    ███|
    |  ████ |
    |    ███|
    |██████ |
4   
    |███  ███
    |███  ███
    |████████
    |     ███
    |     ███
5   
    |███████ |
    |███     |
    |███████ |
    |     ███|
    |███████ |
6   
    |  ███   |
    | ███    |
    |███████ |
    |███  ███|
    | ██████ |
7   
    |███████|
    |   ███ |
    |  ███  |
    | ███   |
    |███    |
8   
    | ██████ |
    |███  ███|
    |  ████  |
    |███  ███|
    | ██████ |
9   
    | ██████ |
    |███  ███|
    | ██████ |
    |   ███  |
    |  ███   |
!   
    |███|
    |███|
    |███|
    |   |
    |███|
?   
    |█████ |
    |   ███|
    | ███  |
    |      |
    | ███  |
-   
    |      |
    |      |
    |██████|
    |      |
    |      |
+   
    |      |
    |  ██  |
    |██████|
    |  ██  |
    |      |
_   
    |      |
    |      |
    |      |
    |      |
    |██████|
=   
    |      |
    |██████|
    |      |
    |██████|
    |      |
/   
    |    ███|
    |   ███ |
    |  ███  |
    | ███   |
    |███    |
\   
    |███    |
    | ███   |
    |  ███  |
    |   ███ |
    |    ███|    
>   
    |███    |
    |  ███  |
    |    ███|
    |  ███  |
    |███    |
<   
    |    ███|
    |  ███  |
    |███    |
    |  ███  |
    |    ███|    
^   
    |  ███  |
    | ██ ██ |
    |██   ██|
    |       |
    |       |    
[
    |█████|
    |███  |
    |███  |
    |███  |
    |█████|
]   
    |█████|
    |  ███|
    |  ███|
    |  ███|
    |█████|    
(
    | ████|
    |███  |
    |██   |
    |███  |
    | ████|
)   
    |████ |
    |  ███|
    |   ██|
    |  ███|
    |████ |    
{
    |  ████|
    |  ██  |
    |███   |
    |  ██  |
    |  ████|
}   
    |████  |
    |  ██  |
    |   ███|
    |  ██  |
    |████  |    
"
    |███  ███|
    |███  ███|
    |        |
    |        |
    |        |
'
    |███|
    |███|
    |   |
    |   |
    |   |
|#|  
    | ██  ██ |
    |████████|
    | ██  ██ |
    |████████|
    | ██  ██ |
*  
    | █ ██ █ |
    |████████|
    | ██████ |
    |████████|
    | █ ██ █ |
$  
    | ██████ |
    |██ ██   |
    |███████ |
    |   ██ ██|
    | ██████ |
@  
    | ██████ |
    |████████|
    |███  ███|
    |████████|
    | ██████ |
%
    |██   ██ |
    |██  ██  |
    |   ██   |
    |  ██  ██|
    | ██   ██|
&
    | ████   |
    |██  ██  |
    | ████ ██|
    |██  ███ |
    | █████ █|
:   
    |███|
    |███|
    |   |
    |███|
    |███|
;   
    |███|
    |███|
    |   |
    |███|
    |  █|
.   
    |   |
    |   |
    |   |
    |███|
    |███|
,   
    |   |
    |   |
    |   |
    |███|
    |  █|
| |  
    |    |
    |    |
    |    |
    |    |
    |    |
a   
    | ███████ |
    |███   ███|
    |█████████|
    |███   ███|
    |███   ███|
b   
    |███████  |
    |███   ███|
    |███████  |
    |███   ███|
    |███████  |
c   
    | ███████|
    |███     |
    |███     |
    |███     |
    | ███████|
d   
    |███████  |
    |███   ███|
    |███   ███|
    |███   ███|
    |███████  |
e   
    |████████|
    |███     |
    |███████ |
    |███     |
    |████████|
f   
    |████████|
    |███     |
    |██████  |
    |███     |
    |███     |
g   
    | ███████ |
    |███      |
    |███  ████|
    |███   ███|
    | ███████ |
h   
    |███   ███
    |███   ███
    |█████████
    |███   ███
    |███   ███
i   
    |███
    |███
    |███
    |███
    |███
j   
    |      ███|
    |      ███|
    |      ███|
    |███   ███|
    | ███████ |
k   
    |███   ███|
    |███  ███ |
    |███████  |
    |███  ███ |
    |███   ███|
l   
    |███    |
    |███    |
    |███    |
    |███    |
    |███████|
m   
    |██     ██
    |███   ███
    |█████████
    |███ █ ███
    |███   ███
n   
    |███   ███
    |████  ███
    |███ █ ███
    |███  ████
    |███   ███
o   
    | ███████ |
    |███   ███|
    |███   ███|
    |███   ███|
    | ███████ |
p   
    |████████ |
    |███   ███|
    |████████ |
    |███      |
    |███      |
q   
    | ███████ |
    |███   ███|
    |███ ██ ██|
    |███ ████ |
    | █████ ██|
r   
    |████████ |
    |███   ███|
    |███████  |
    |███   ███|
    |███   ███|
s   
    | ███████|
    |███     |
    |███████ |
    |     ███|
    |███████ |
t   
    |█████████|
    |   ███   |
    |   ███   |
    |   ███   |
    |   ███   |
u   
    |███   ███|
    |███   ███|
    |███   ███|
    |███   ███|
    | ███████ |
v   
    |███   ███|
    |███   ███|
    | ███ ███ |
    |   ███   |
    |    █    |
w   
    |███   ███
    |███ █ ███
    |█████████
    |███   ███
    |██     ██
x   
    |███   ███|
    | ███ ███ |
    |  █████  |
    | ███ ███ |
    |███   ███|
y   
    |███   ███|
    | ███ ███ |
    |  █████  |
    |   ███   |
    |   ███   |
z   
    |███████|
    |   ███ |
    |  ███  |
    | ███   |
    |███████|
]])

return salt