###
███  ███   ███  ███████    ████████  ███   ███        ███      ███   ███   ███████   
███  ████  ███  ███   ███  ███        ███ ███         ███      ███   ███  ███   ███  
███  ███ █ ███  ███   ███  ███████     █████          ███      ███   ███  █████████  
███  ███  ████  ███   ███  ███        ███ ███         ███      ███   ███  ███   ███  
███  ███   ███  ███████    ████████  ███   ███        ███████   ███████   ███   ███  
###

use ../../kxk ▪ kermit

class index_lua

    @: ->

    # 00000000    0000000   00000000    0000000  00000000       000      000  000   000  00000000
    # 000   000  000   000  000   000  000       000            000      000  0000  000  000
    # 00000000   000000000  0000000    0000000   0000000        000      000  000 0 000  0000000
    # 000        000   000  000   000       000  000            000      000  000  0000  000
    # 000        000   000  000   000  0000000   00000000       0000000  000  000   000  00000000
    
    parseLine: index line ->
        
        if not line.startsWith ' '
            
            if match = kermit.lineMatch line 'local ●name = class' ['(']
                match.type = 'class'
                match.line = index
                @result.classes.push match
                ⮐ 
    
        validFuncName =  name  -> valid(name) and name not in ['if''for''while''switch''return''catch']
        validFuncMatch = match -> match and validFuncName(match.name)
                
        methMatch = ptn ->
            
            match = kermit.lineMatch line ptn ["(" ")" ":" "."]
            match if validFuncMatch match

        funcMatch = ptn ->
            
            match = kermit.lineMatch line ptn ["(" ")"]
            match if validFuncMatch match
        
        if @result.classes.length
            
            className = @result.classes[-1].name
                        
            addMeth = name opt={} =>
                
                fnc = method:name line:index class:className
                fnc.static = true if opt.static
                fnc.async  = true if opt.async
                fnc.bound  = true if @bound[name] and name != 'constructor'

                @result.funcs.push fnc
                null
                                
            if match = methMatch "function #{className}:●name(○args)"        ➜ ⮐  addMeth match.name
            if match = methMatch "function #{className}.static.●name(○args)" ➜ ⮐  addMeth match.name, static:true
                                     
        addFunc = name opt={} =>
            
            fnc = name:name, line:index
            fnc.async  = true if opt.async
            fnc.test   = true if opt.test
            @result.funcs.push fnc
            null
            
        if not line.startsWith ' '
            
            if match = funcMatch 'function ●name(○args)' ➜ ⮐ addFunc match.name
            
        if match = kermit.lineMatch(line, 'test("●name", function()', ["(" ")" ',' '"']) 
            
            ⮐ addFunc("▸ #{match.name}", test:true)
                    
    # 00000000    0000000   00000000    0000000  00000000       000000000  00000000  000   000  000000000
    # 000   000  000   000  000   000  000       000               000     000        000 000      000
    # 00000000   000000000  0000000    0000000   0000000           000     0000000     00000       000
    # 000        000   000  000   000       000  000               000     000        000 000      000
    # 000        000   000  000   000  0000000   00000000          000     00000000  000   000     000

    parse: text ->
        
        lines = text.split '\n'

        @bound = {}
        @result = classes:[] funcs:[] lines:lines.length
        
        for lineText,lineIndex in lines
            @parseLine lineIndex lineText

        @result

export index_lua
