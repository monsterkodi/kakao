###
000   000  00000000  0000000    
000  000   000       000   000  
0000000    0000000   000   000  
000  000   000       000   000  
000   000  00000000  0000000    
###

use ◆ ttio gutter editor status cells state draw logfile scroll color util
use ../kxk ▪ karg kstr slash
use ../kxk/nfs

args = karg """
    ked [file]
        options                                   **
        version    log version                    = false
    """

function KED

    @: ->

        @t = new ttio
        
        @log = new logfile
        
        global.lf = args... => @log.write args.map((a) -> "#{a}").join(' ')
        
        @cells  = new cells @t
        
        @editor = new editor @cells
        @draw   = new draw   @cells
        @gutter = new gutter @cells @editor.state
        @scroll = new scroll @cells @editor.state
        @status = new status @cells @editor.state
        
        @mouseHandlers = [@scroll @editor]
        @editor.on 'redraw' @redraw
        
        @t.on 'key'    @onKey
        @t.on 'mouse'  @onMouse
        @t.on 'paste'  @editor.onPaste
        @t.on 'wheel'  @editor.onWheel
        @t.on 'resize' @onResize
        @t.on 'focus'  -> 
        @t.on 'blur'   -> 
            
        if args.version ➜ log '0.0.1'; process.exit 0
                        
        if valid args.options
            @loadFile args.options[0]
        else
            @editor.state.init ['']
            @t.setCursor 4 0
            @onResize @t.cols() @t.rows()
        
    @run: -> new KED()
    
    # 000       0000000    0000000   0000000    
    # 000      000   000  000   000  000   000  
    # 000      000   000  000000000  000   000  
    # 000      000   000  000   000  000   000  
    # 0000000   0000000   000   000  0000000    
        
    loadFile: p ○=>
        
        start = process.hrtime()
        
        if slash.isAbsolute p
            @status.file = slash.tilde  p
        else
            @status.file = slash.normalize p

        text =○ nfs.read slash.untilde(p)
        
        lines = text.split /\r?\n/
        
        @editor.state.syntax.ext = slash.ext p
        @editor.state.loadLines lines
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
        
        @redraw()
    
    reloadFile: =>
        
        @loadFile @status.file
                                    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event col row button mods count =>
        
        for handler in @mouseHandlers
            if handler.onMouse event col row button mods count
                ⮐ @redraw()
            
    # 000   000  00000000  000   000  
    # 000  000   000        000 000   
    # 0000000    0000000     00000    
    # 000  000   000          000     
    # 000   000  00000000     000     
    
    onKey: key => 
        
        switch key
            
            'alt+q' 'ctrl+d' 'ctrl+q' ➜ ⮐ @t.quit()
            'alt+r' 'ctrl+r' 'cmd+r'  ➜ ⮐ @reloadFile()
            'ctrl+s' 'cmd+s'          ➜ ⮐ @saveFile()
            
        @editor.onKey key
                        
    onResize: cols rows => @redraw()
    
    # 00000000   00000000  0000000    00000000    0000000   000   000  
    # 000   000  000       000   000  000   000  000   000  000 0 000  
    # 0000000    0000000   000   000  0000000    000000000  000000000  
    # 000   000  000       000   000  000   000  000   000  000   000  
    # 000   000  00000000  0000000    000   000  000   000  00     00  
    
    redraw: =>
        
        start = process.hrtime()
        
        @t.store()                
        @t.hideCursor()
        @cells.init()
        @gutter.draw()
        @scroll.draw()
        @status.draw()
        @draw.state @editor.state
        @cells.render()
        @editor.showCursorIfInView() 
        @t.restore()
        
        @status.drawTime = kstr.time(BigInt(process.hrtime(start)[1]))
                        
export KED.run

