###
 0000000   000  000000000  000  000   000  00000000   0000000
000        000     000     000  0000  000  000       000   000
000  0000  000     000     000  000 0 000  000000    000   000
000   000  000     000     000  000  0000  000       000   000
 0000000   000     000     000  000   000  000        0000000
###

use ../../kxk ▪ linediff post slash ffs kstr
use ../tools  ◆ Git Projects
use ../editor ◆ Syntax

SOURCE_FILE_EXTS = ['kode' 'styl' 'pug' 'h' 'mm' 'cpp' 'noon']
IGNORE_FILE_EXTS = ['js' 'css' 'json' 'html']

spacer = -> window.terminal.appendMeta clss: 'spacer'

class GitInfo

    @: ->
        
    # 000   000  000   0000000  000000000   0000000   00000000   000   000  
    # 000   000  000  000          000     000   000  000   000   000 000   
    # 000000000  000  0000000      000     000   000  0000000      00000    
    # 000   000  000       000     000     000   000  000   000     000     
    # 000   000  000  0000000      000      0000000   000   000     000     
    
    history: (path) ○->

        path ?= window.editor.currentFile
        return if not path
        
        window.split.raise 'terminal'
        window.terminal.clear()
        window.terminal.singleCursorAtPos [0 0]

        gitDir  =○ kakao 'fs.git' path
        history =○ Git.history()
            
        for commit in history
                        
            # text = "#{commit.msg} #{commit.commit}"
            text = "#{commit.msg}"
            window.terminal.queueMeta
                diss:       Syntax.dissForTextAndSyntax text, 'git'
                text:       text
                clss:       'gitInfoFile'
                href:       "macro kd #{commit.commit}"
                click:      @onMetaClick
                # line:       '●'
                # lineClss:   'gitInfoLine changed'

            for file in commit.files
                
                continue if slash.ext(file.path) in ['js''css''html''json']

                symbol = switch file.type
                    'M' ➜ ' '
                    'A' ➜ '■'
                    'D' ➜ '✘'
                        ➜ '▶'
                        
                change = switch file.type
                    'M' ➜ 'changed'
                    'A' ➜ 'added'
                    'D' ➜ 'deleted'
                        ➜ 'renamed'
                        
                text = "        #{slash.tilde file.path}"
                window.terminal.queueMeta
                    diss:       Syntax.dissForTextAndSyntax text, 'git'
                    text:       text
                    clss:       'gitInfoFile'
                    href:       "#{gitDir}/#{file.path}"
                    click:      @onMetaClick
                    line:       symbol
                    lineClss:   'gitInfoLine '+change
                    
        window.terminal.singleCursorAtPos [0 0]

    #  0000000   0000000   00     00  00     00  000  000000000  
    # 000       000   000  000   000  000   000  000     000     
    # 000       000   000  000000000  000000000  000     000     
    # 000       000   000  000 0 000  000 0 000  000     000     
    #  0000000   0000000   000   000  000   000  000     000     
    
    commit: (msg) ○->
        
        window.split.raise 'terminal'
        window.terminal.clear()
        window.terminal.appendMeta diss: Syntax.dissForTextAndSyntax "commit #{msg}", 'kode'

        if gitDir =○ kakao 'fs.git' window.textEditor.currentFile
            
            m = msg.join ' '
            m = 'misc' if empty m

            out = ''
            
            out +=○ kakao 'app.sh' '/usr/bin/git' cwd:gitDir, arg:"add ."                   
            out +=○ kakao 'app.sh' '/usr/bin/git' cwd:gitDir, arg:['commit' '-m' m] 
            out +=○ kakao 'app.sh' '/usr/bin/git' cwd:gitDir, arg:"push -q" 

            window.terminal.clear()
            for line in out.split '\n'
                window.terminal.appendMeta diss: Syntax.dissForTextAndSyntax line, 'kode'
                
            window.split.do 'maximize editor'

            Git.status gitDir
                    
    # 0000000    000  00000000  00000000  
    # 000   000  000  000       000       
    # 000   000  000  000000    000000    
    # 000   000  000  000       000       
    # 0000000    000  000       000       
    
    diff: (revs) ○-> 
    
        if empty revs
            @status true
        else
            window.split.raise 'terminal'
            window.terminal.clear()
            
            gitDir =○ kakao 'fs.git' editor.currentFile
            patch =○ Git.patch revs[0]
            
            for p in patch
                
                path = slash.path gitDir, p.srcfile[2..]
                
                continue if slash.ext(path) in IGNORE_FILE_EXTS
                
                window.terminal.appendMeta
                    diss:       Syntax.dissForTextAndSyntax "#{path}" 'ko'
                    href:       path
                    clss:       'gitInfoFile'
                    click:      @onMetaClick
                    line:       '●'
                    lineClss:   'gitInfoLine changed'
                    
                if p.changes is arr
                    
                    @logChanges gitDir, path, p.changes
                    spacer()
    
    #  0000000  000   000   0000000   000   000   0000000   00000000   0000000  
    # 000       000   000  000   000  0000  000  000        000       000       
    # 000       000000000  000000000  000 0 000  000  0000  0000000   0000000   
    # 000       000   000  000   000  000  0000  000   000  000            000  
    #  0000000  000   000  000   000  000   000   0000000   00000000  0000000   
    
    logChanges: (gitDir, path, changes) =>
        
        for change in changes
            
            spacer()
            
            linfo = change.lineinfo.split ' '
            if linfo[0][0] == '-' and linfo[1][0] == '+'
                [dline, dn] = linfo[0][1..].split(',').map (i) -> parseInt i
                [aline, an] = linfo[1][1..].split(',').map (i) -> parseInt i
                dn = 1 if not dn is num
                an = 1 if not an is num
                
            for line in change.changedlines
                
                switch line.type
                    '-'
                        window.terminal.appendMeta
                            diss:       Syntax.dissForTextAndSyntax line.line, slash.ext path
                            href:       path + ':' + dline
                            clss:       'gitInfoDelete'
                            click:      @onMetaClick
                        dline++
    
                    '+'
                        window.terminal.appendMeta
                            diss:       Syntax.dissForTextAndSyntax line.line, slash.ext path
                            href:       path + ':' + aline
                            clss:       'gitInfoAdded'
                            click:      @onMetaClick
                        aline++
                    
    # 000       0000000    0000000   0000000    000  00000000  00000000  
    # 000      000   000  000        000   000  000  000       000       
    # 000      000   000  000  0000  000   000  000  000000    000000    
    # 000      000   000  000   000  000   000  000  000       000       
    # 0000000   0000000    0000000   0000000    000  000       000       
    
    logDiff: (changes) =>
        
        extn = slash.ext changes.file
        if extn in Syntax.syntaxNames
            syntaxName = extn
        else
            syntaxName = 'txt'

        linesAdded = 0
        index = 0
        for text in changes.lines
            
            dss = Syntax.dissForTextAndSyntax text, syntaxName
            
            continue if empty dss
            
            switch changes.change
                
                'deleted'

                    window.terminal.meta.add 
                        line:       window.terminal.numLines()
                        start:      0
                        end:        text.length
                        clss:       'gitInfoDelete'

                'added'

                    window.terminal.meta.add 
                        line:       window.terminal.numLines()
                        start:      0
                        end:        text.length
                        clss:       'gitInfoAdded'

                'changed'
                    
                    if linediff.isBoring changes.info.mod[index].old, changes.info.mod[index].new
                        index += 1
                        continue
    
                    diffs = linediff changes.info.mod[index].old, changes.info.mod[index].new
                    if empty diffs and not trim(changes.info.mod[index].old).startsWith "#"
                        diffs = linediff changes.info.mod[index].new, changes.info.mod[index].old
                        if valid diffs
    
                            for diff in diffs
            
                                window.terminal.meta.add 
                                    line:       window.terminal.numLines()
                                    start:      diff.index
                                    end:        diff.index+diff.length
                                    clss:       'gitInfoDelete'
                                                                
                            dss = Syntax.dissForTextAndSyntax changes.info.mod[index].old, syntaxName
                ➜
                    for diff in diffs
    
                        window.terminal.meta.add 
                            line:       window.terminal.numLines()
                            start:      diff.index
                            end:        diff.index+diff.length
                            clss:       'gitInfoChange'
                            
            meta = window.terminal.appendMeta
                diss: dss
                href: "#{changes.file}:#{changes.line+index}"
                clss: 'searchResult'
                click: @onMetaClick
                
            post.emit 'search-result' meta
            linesAdded++
                
            index += 1
            
        if linesAdded ➜ window.terminal.appendMeta clss: 'spacer'
        index

    #  0000000  000000000   0000000   000000000  000   000   0000000
    # 000          000     000   000     000     000   000  000
    # 0000000      000     000000000     000     000   000  0000000
    #      000     000     000   000     000     000   000       000
    # 0000000      000     000   000     000      0000000   0000000
                            
    status: (diff) ->

        window.split.raise 'terminal'
        window.terminal.clear()

        onMetaClick = @onMetaClick
        logDiff  = @logDiff
        
        Git.status(window.editor.currentFile).then (status) ○->

            return if empty status
            
            log 'status' status

            logFile = (change, file, status, spacer) ->

                return if slash.ext(file) in IGNORE_FILE_EXTS

                symbol = switch change

                    'changed' ➜ '●'
                    'added'   ➜ '◼'
                    'deleted' ➜ '✘'

                path = slash.relative file, status.gitDir

                window.terminal.appendMeta
                    diss:       Syntax.dissForTextAndSyntax "#{path}" 'ko'
                    href:       file
                    clss:       'gitInfoFile'
                    click:      onMetaClick
                    line:       symbol
                    lineClss:   'gitInfoLine '+change
                
                if spacer ➜ window.terminal.appendMeta clss:'spacer'

            for file in status.deleted

                if slash.ext(file) in SOURCE_FILE_EXTS
                    logFile 'deleted' file, status, diff

            for file in status.added

                if slash.ext(file) in SOURCE_FILE_EXTS
                    logFile 'added' file, status, diff
                    continue if not diff
                    text =○ ffs.read file
                    lines = text.split '\n'
                    logDiff lines:lines, line:1, file:file, change:'added'

            for file in status.changed
                
                if slash.ext(file) in SOURCE_FILE_EXTS
                    logFile 'changed' file, status, diff
                    continue if not diff 
                    
                    changeInfo =○ Git.diff file

                    for change in changeInfo.changes

                        line = change.line

                        if not empty change.mod
                            lines = change.mod.map (l) -> l.new
                            logDiff lines:lines, file:changeInfo.file, line:line, info:change, change:'changed'

                        if not empty change.add
                            lines = change.add.map (l) -> l.new
                            logDiff lines:lines, file:changeInfo.file, line:line, info:change, change:'added'

                        if not empty change.del
                            lines = change.del.map (l) -> l.old
                            logDiff lines:lines, file:changeInfo.file, line:line, info:change, change:'deleted'

            window.terminal.appendMeta clss: 'spacer'
            window.terminal.scroll.cursorToTop 7
            
    #  0000000  000      000   0000000  000   000
    # 000       000      000  000       000  000
    # 000       000      000  000       0000000
    # 000       000      000  000       000  000
    #  0000000  0000000  000   0000000  000   000

    onMetaClick: (meta, event) =>

        if href = meta[2].href
            if href.startsWith 'macro '
                window.commandline.startCommand 'macro'
                window.commandline.setText href[6..]
                window.commandline.command.execute href[6..]
            else
                if href.indexOf(':') > 0
                    href += ':' + window.terminal.posForEvent(event)[0]
                # log 'GitInfo.onMetaClick href' href
                post.emit 'openFiles' [href], newWindow:event.metaKey and event.altKey
        'unhandled' # otherwise cursor doesn't get set
                    
export new GitInfo
