
###
    00     00   0000000   00000000   000   000  000  00000000  000   000  
    000   000  000   000  000   000  000   000  000  000       000 0 000  
    000000000  000000000  00000000    000 000   000  0000000   000000000  
    000 0 000  000   000  000           000     000  000       000   000  
    000   000  000   000  000            0      000  00000000  00     00  
###

use ../../kxk ▪ kstr post
use ../util ◆ prof syntax color util
use ..      ◆ theme 
use         ◆ view

{floor, pow} = Math

function mapview extends view

    @: screen @state ->
        
        super screen @state.name + 'mapview'
        
        @imgId  = kstr.hash(@state.name) & ~0xffff
        
        @images = []
        
        # lf 'mapview' @state.name @imgId.toString(2)
        
        @pixelsPerRow = 4
        @pixelsPerCol = 2
            
    #  0000000  000   000   0000000   000   000  
    # 000       000   000  000   000  000 0 000  
    # 0000000   000000000  000   000  000000000  
    #      000  000   000  000   000  000   000  
    # 0000000   000   000   0000000   00     00  
    
    show: doShow=true => 
        
        ⮐ @hide() if doShow == false
        @cells.cols = 10

    hide: => 
        
        @clearImages()
        @cells.cols = 0
        
    hidden:  -> @cells.cols <= 0
    visible: -> @cells.cols > 0
    
    clearImages: =>
        
        # lf 'clear' @images.length if valid @images
        
        for id in @images
            @cells.screen.t.deleteImage id
            
        @images = []
                
    reload: => @clearImages() ; @createImages()
                
    getSegls:  => @segls
    getSyntax: => @syntax
    setSyntaxSegls: ext @segls => 
        
        @syntax = new syntax 
        @syntax.setExt ext 
        @syntax.setSegls @segls
        @createImages()
    
    # 000  00     00   0000000    0000000   00000000   0000000  
    # 000  000   000  000   000  000        000       000       
    # 000  000000000  000000000  000  0000  0000000   0000000   
    # 000  000 0 000  000   000  000   000  000            000  
    # 000  000   000  000   000   0000000   00000000  0000000   
    
    createImages: =>
        
        t = @cells.screen.t
        ⮐ if empty t.cellsz
        
        @show()
        @clearImages()

        # prof.start @state.name+'.map'
        # lf  'mapview.createImages' @cells.cols
        
        w = @cells.cols * t.cellsz[0]
        bytes = w*3
        
        ⮐ @clearImages() if bytes <= 0
        
        lines  = @getSegls()
        syntax = @getSyntax()
        
        data = Buffer.alloc bytes
        
        dataForLine = line =>
            
            data.fill 0
            
            for x in 0...line.length
                
                break if x*@pixelsPerCol > w
                                    
                ch = line[x]
                
                if valid ch and ch != ' '
                 
                    clss = syntax.getClass x y
                     
                    if 'header' in clss
                        if 'triple' in clss
                            rgb = [27 207 14]
                        else
                            rgb = [9 140 0]
                    else
                        f = 0.7
                        rgb = color.rgb syntax.getColor(x y)
                        rgb = rgb.map (v) -> clamp(0 255 parseInt(f*v))
                     
                    [r g b] = rgb
                     
                    for xr in 0..@pixelsPerCol
                        data[(x*@pixelsPerCol+xr)*3+0] = r
                        data[(x*@pixelsPerCol+xr)*3+1] = g
                        data[(x*@pixelsPerCol+xr)*3+2] = b
                    
        for line,y in lines
            
            dataForLine line
            @images.push @imgId+y
            t.sendImageData data @imgId+y w 1
            break if y > @cells.rows * t.cellsz[1] / @pixelsPerRow
                
        # prof.end @state.name+'.map'
                
        @drawImages()
                        
    # 0000000    00000000    0000000   000   000  
    # 000   000  000   000  000   000  000 0 000  
    # 000   000  0000000    000000000  000000000  
    # 000   000  000   000  000   000  000   000  
    # 0000000    000   000  000   000  00     00  
    
    drawImages: ->
        
        t = @cells.screen.t
        
        ⮐ if empty t.pixels or @cells.rows <= 0 or @cells.cols <= 0
        
        # lf 'mapview.draw' @images.length
        for id,y in @images
            t.placeImage id @cells.x @cells.y 0 y*@pixelsPerRow @pixelsPerCol @pixelsPerRow
        @
        
    draw: ->
                        
        @cells.fill_rect 0 0 @cells.cols-1 @cells.rows-1 ' ' null '#000'
        
export mapview
