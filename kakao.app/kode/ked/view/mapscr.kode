
###
00     00   0000000   00000000    0000000   0000000  00000000 
000   000  000   000  000   000  000       000       000   000
000000000  000000000  00000000   0000000   000       0000000  
000 0 000  000   000  000             000  000       000   000
000   000  000   000  000        0000000    0000000  000   000
###

use ../../kxk ▪ post
use           ◆ mapview

{floor, pow} = Math

function mapscr extends mapview

    @: screen state ->
        
        super screen state
        
        screen.t.on 'preResize' @clearImages
        post.on 'greet' @clearImages
        
    getLines:  -> @state.s.lines
    getSyntax: -> @state.syntax
       
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: =>
        
        ⮐ if empty @cells.screen.t.pixels
        
        clearTimeout @redrawTimer
        @redrawTimer = setTimeout @createImages 100
        
    #  0000000   0000000  00000000    0000000   000      000      000000000   0000000   
    # 000       000       000   000  000   000  000      000         000     000   000  
    # 0000000   000       0000000    000   000  000      000         000     000   000  
    #      000  000       000   000  000   000  000      000         000     000   000  
    # 0000000    0000000  000   000   0000000   0000000  0000000     000      0000000   
    
    scrollToPixel: pixel =>
        
        view = @state.s.view.asMutable()
        
        view[1] = parseInt (pixel[1] - @cells.y * @cells.screen.t.cellsz[1]) / @pixelsPerRow
        
        view[1] -= 6 # offset so that clicking inside a header scrolls it into view
        
        maxY = @state.s.lines.length - @cells.rows
        
        view[1] = min maxY view[1] if maxY > 0
        view[1] = max 0 view[1]
        
        @state.setView view
        
        true
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        [sx  sy]  = event.cell
        [col row] = @cells.posForEvent event
        
        switch event.type
            
            'press'
            
                if @cells.isInsideScreen sx sy
                    @doDrag = true
                    ⮐ @scrollToPixel event.pixel
                    
            'drag'
            
                if @doDrag
                    ⮐ @scrollToPixel event.pixel
                
            'release'
            
                if @doDrag
                    delete @doDrag 
                    @hover = @cells.isInsideScreen sx sy
                    ⮐ true
            
            'move'
            
                @hover = @cells.isInsideScreen sx sy
                @cells.screen.t.setPointerStyle('hand') if @hover
                    
        false
        
    clearImages: =>
        
        # @cells.screen.t.deleteImage @knobId if @knobId
        # delete @knobId
        
        super()
        
    createImages: =>
        
        t = @cells.screen.t
        ⮐ if empty t.cellsz
        
        # w = t.cellsz[0]
        # data = Buffer.alloc w*3
#         
        # for i in 0...w 
            # data[i*3+0] = 255
            # data[i*3+1] =  55
            # data[i*3+2] = 155
#         
        # @knobId = @imgId+0xeeee
        # t.sendImageData data @knobId w 1
        
        super()
        
    draw: ->
        
        t = @cells.screen.t
        
        ⮐ if empty t.pixels or @cells.rows <= 0 or @cells.cols <= 0
        
        @cells.fill_rect 0 0 -1 -1 '●' '#f00' '#ff0'
        
        # t.placeImageStretched @knobId @cells.x @cells.y 2 3 0 0
        
        super()
        
export mapscr
