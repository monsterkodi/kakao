###
     ███████   ███████   ███   ███  █████████  ████████  ███   ███  █████████  
    ███       ███   ███  ████  ███     ███     ███        ███ ███      ███     
    ███       ███   ███  ███ █ ███     ███     ███████     █████       ███     
    ███       ███   ███  ███  ████     ███     ███        ███ ███      ███     
     ███████   ███████   ███   ███     ███     ████████  ███   ███     ███     

    quick and dirty context menu for the fileeditor
###

use view.menu.inputchoice

class context extends inputchoice

    @menu: nil

    @: ->
        
        inputchoice.init @ 'context'
        
        @setColor 'bg' theme.context.bg
                
        context.menu = @

    #  ███████   ████████   ████████    ███████   ███   ███   ███████   ████████
    # ███   ███  ███   ███  ███   ███  ███   ███  ████  ███  ███        ███     
    # █████████  ███████    ███████    █████████  ███ █ ███  ███  ████  ███████ 
    # ███   ███  ███   ███  ███   ███  ███   ███  ███  ████  ███   ███  ███     
    # ███   ███  ███   ███  ███   ███  ███   ███  ███   ███   ███████   ████████

    arrange: ->

        w = @width+2+1 # 2 for frame, 1 for right 
        c = @choices.numChoices()
        
        ih = if @inputIsActive() ➜ 2 ➜ 0
        iz = max 0 ih - 1
        h = c + 2 + ih
        x = @pos[0]
        y = @pos[1]
        
        @input.layout    x+2   y+1      w-4  iz
        @choices.layout  x+1   y+1+ih   w-2  c
        @cells.layout    x     y        w    h

    #  0000000  000   000   0000000   000   000
    # 000       000   000  000   000  000 0 000
    # 0000000   000000000  000   000  000000000
    #      000  000   000  000   000  000   000
    # 0000000   000   000   0000000   00     00
    
    @show: pos cb items -> context.menu.show pos cb items

    show: @pos @cb @items ->
        
        @pos[1] -= 1
        
        items = @items.map (i) -> ' ' + i # padding for  
            
        @width = belt.widthOfLines items
        
        @input.set ''
        @input.hide()
        @choices.set items
        @choices.select 0
        @choices.state.setView [0 0]
                
        super()
                
    #  0000000   00000000   00000000   000      000   000  
    # 000   000  000   000  000   000  000       000 000   
    # 000000000  00000000   00000000   000        00000    
    # 000   000  000        000        000         000     
    # 000   000  000        000        0000000     000     
    
    applyChoice: choice ->
        # log 'context applyChoice' choice
        @cb choice
        @hide()
        
    onWheel: ->
                            
    # 0000000    00000000    0000000   000   000
    # 000   000  000   000  000   000  000 0 000
    # 000   000  0000000    000000000  000000000
    # 000   000  000   000  000   000  000   000
    # 0000000    000   000  000   000  00     00

    draw: ->

        ⮐  if @hidden()
        
        @arrange()
        @drawFrame()
        @drawChoices()
        
    drawFrame: ->
        
        cy = 0
        
        if @input∙visible()
            @cells∙draw_rounded_border 0 0 -1 2 {fg:@color.bg}
            cy = 2
        
        @cells∙draw_rounded_border 0 cy -1 -1 {fg:@color.bg}
            
⮐  context
