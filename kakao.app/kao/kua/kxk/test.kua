
# █████████  ████████   ███████  █████████
#    ███     ███       ███          ███   
#    ███     ███████   ███████      ███   
#    ███     ███            ███     ███   
#    ███     ████████  ███████      ███   

use os

_G.testFail = 0

class test

    $: -> ⮐  "▸" & @suite
    
    @: s t ->
        @suite = s  
        _G.testStack ?= {}
        _G.testIndex = 0
        table.insert testStack @suite
        if _G.testStack.len == 1
            log "▸ " & @suite
        else
            log "  " & string.rep("    " testStack.len-1) & @suite
        t()
        table.remove testStack
        if testStack.len == 0
            # log "exit" _G.testFail
            os.exit _G.testFail
    
test.static.cmp = a b ->

    _G.testIndex += 1
    
    fail = msg ->
        log "✘ [" & _G.testIndex & "] " & msg
        _G.testFail += 1
        ⮐  false
    
    if type(a) != type(b)
        ⮐  fail "type mismatch: " & type(a) & " != " & type(b)
        
    switch type(a) 
        "table"
            for k v in pairs a
                if not test.static.cmp v b[k]
                    key = k
                    if type(k) == "number"
                        key = kstr.index k
                    ⮐  fail "table mismatch at " & key # & " " & $v & " != " & $b[k]
        "number"
            if math.abs(a - b) > 1e-10
                ⮐  fail "number mismatch: " & $a & " != " & $b
        ➜  
            if a != b ➜ ⮐  fail $a & " != " & $b # & " ◇" & type(a)
    true
    
test.static.run = files ->

    # log "test.run" array.str files
    success = true
    for f _ in pairs files
        # log "test" f
        (output ok exitcode) = slash.shell "luajit" f
        if ok
            # log output
            # log output, ok, exitcode
            # log "✔ " f
            a = 1
        else
            log output
            log "✘ " f, exitcode
            success = false
    success
        
⮐  test
