###
    000   000   0000000   000   000   0000000    0000000 
    000  000   000   000  000  000   000   000  000   000
    0000000    000000000  0000000    000000000  000   000
    000  000   000   000  000  000   000   000  000   000
    000   000  000   000  000   000  000   000   0000000 

    handles application initialization
    handles sending and receiving messages to/from the application process
    provides shortcuts to internal modules
    sets itself in the global window scope
###

use ./bundle
use ./kxk/kxk

function Kakao

    # initialization of the application

    @init: (cb) ○->
        
        # request the bundle url (toplevel .app folder of the application)
        # without it, the window can't load any resources (menu, icon ...)
        
        Kakao.request('bundle.path').then (bundlePath) ○->
        
            bundle.path = bundlePath # forward the path to the bundle module
            
            ○ window.kakao.preInit() if window.kakao.preInit is func
            
            cb bundlePath            # ... the application is ready to run

    # sends a message (fire and forget) to the application process with optional args.
    
    @send: (route, args...) ->
        
        window.webkit.messageHandlers.kakao.postMessage route:route, args:args

    # sends a message to the application process. returns a promise for the result value. 
    
    @request: (route, args...) ->

        window.webkit.messageHandlers.kakao_request.postMessage route:route, args:args
        
    # receives a message from the application process and posts it in this window
        
    @receive: (msg) ->
        
        if msg is str
            kxk.post.emit msg
        else if msg is obj
            kxk.post.emit.apply null, [msg.name].concat msg.args
            
    # some redirections to make working with kakao modules a little simpler ...
    # not sure if that actually makes sense for anything beside the bundle ???
            
    @bundle: bundle      # provides paths and urls relative to the application folder
    @window: kxk.win     # base class for kakao windows
    @dom:    kxk.dom     # dom expection and manipulation
    @post:   kxk.post    # posts messages to modules in the window process
    @ffs:    kxk.ffs     # fake fs

# this is slightly evil: instead of exporting Kakao we just export it's request function
# and attach the other functions to it. just makes requesting stuff a bit more convenient
    
kakao = -> Kakao.request.apply null, arguments
for k,v of Kakao ➜ kakao[k] = v
    
window.kakao = kakao # make kakao available in the global window scope

export kakao
