
main = ... ->

    use std
    use ./kxk/kxk
    
    optparser = std.optparse """
        0.1.0
        Usage: kao [Options ...] [Files ...]
        
        Options:
          -t, --test         run tests
          -d, --debug        run with debugging output
          -n, --dryrun,      run without execution
          -o, --outdir=dir   output directory
          -v, --verbose      a combined short and long option
          -V, --version      display version information, then exit
          -h, --help         display this help, then exit
        """
    log process.cwd()
            
    log "argp" table.concat(process.argv  " "), process.argv.len, process.argc
    log "parg" process.argv[0]
    log "parg" process.argv[1]
    log "parg" process.argv[2]
    argv = array.slice(process.argv 2 process.argv.len)
    log "argv" table.concat argv " "
    
    (arg opts) = optparser:parse(argv)
    
    files = opts.unrecognised
    if opts.verbose
        log 'opts'       inspect(opts)
        log 'meta'       inspect(getmetatable(opts))
        log "debug"      opts.debug
        log "verbose"    opts.verbose
        log 'dryrun'     opts.dryrun
        log 'outdir'     opts.outdir
        log 'files'      files.len
        log 'files'      inspect(files)
    
    # log "▸" kxk.exec("ls ~" print)
    
    log inspect opts
    log table.concat files " "
    
    load = file ->
        cmd = "cat " .. file
        kxk.exec cmd print
    
    if files.len > 0
        # log "files" inspect(files)
        if opts.test
            for index file in pairs(files)
                log '▸' file
                load file
     
    verb = msg ->
        if opts.verbose ➜ log(msg)

    dir = process.cwd()
    kuaTests = slash.files slash.path(dir "../lua/test")
    kuaFiles = slash.files slash.path(dir  "../kua")
    kxkFiles = slash.files slash.path(dir  "../kua/kxk")
    kxkTests = slash.files slash.path(dir  "kxk/test")

    if true or verbose
        log table.concat kuaTests
        log table.concat kuaFiles
        log table.concat kxkFiles
        log table.concat kxkTests
        
    log slash.normalize(slash.path(dir "../lua/test"))

⮐  require('./init')(main, ...)
    