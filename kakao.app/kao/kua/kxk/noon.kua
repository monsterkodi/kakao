
            
# 00000000   0000000   0000000   0000000   00000000   00000000
# 000       000       000       000   000  000   000  000     
# 0000000   0000000   000       000000000  00000000   0000000 
# 000            000  000       000   000  000        000     
# 00000000  0000000    0000000  000   000  000        00000000

indstr = "    "

toString = o buf ind="" arry=false visited=[] ->
    
    escape = k arry ->
    
        scl = [' ' '#' '|']
        
        if kstr.find(k '\n') >= 1
        
            sp = kstr.split k '\n'
            sp = [unpack(sp)]
            es = sp∙map((s) -> escape(s arry))
            es∙unshift '...'
            es∙push '...'
            ⮐  es∙join('\n')
            
        if k == '' or k == '...' or scl∙has(k∙sub(1 1)) or scl∙has(k∙sub(k.len k.len)) or arry and kstr.find(k "  ") >= 1
            ⮐  '|' & k & '|'
        k
    
    switch type(o)
        
        "string" ➜ buf∙put escape(o arry)
        "table"
            if visited∙has o
                buf∙put "<v>" 
            else            
                visited∙push o
                if o.len > 0 or o.class == array
                    buf∙put ind != '' and arry and '.' or ''
                    if o.len and ind != ''
                        buf∙put '\n' 
                    for i v in ipairs o
                        buf∙put ind
                        toString v buf ind & indstr true visited
                        buf∙put("\n") if i < o.len
                else
                    buf∙put (arry and '.\n') or ((ind != '') and '\n' or '')
                    
                    maxAlign = 32
                    maxKey   = 2
                    
                    keys = []
                    for k v in pairs o
                        ek = escape k true
                        keys∙push [ek v]
                        maxKey = math.max maxKey ek.len
                    if maxKey > maxAlign
                        maxKey = maxAlign
                    keys∙sort((a b) -> a[1] < b[1]) 

                    for k i in keys∙each()
                        buf∙put ind
                        if type(k[2]) != "table"
                            buf∙put kstr.pad(maxKey k[1])
                            buf∙put("  ") 
                        else
                            buf∙put k[1]
                        toString k[2] buf ind & indstr false visited
                        buf∙put("\n") if i < keys.len
        ➜ 
            buf∙put tostring(o)
    buf

stringify = o -> toString(o strbuff∙new())∙get()

⮐  { stringify:stringify }