###
000   000   0000000   000      000   000  00000000  00000000 
000 0 000  000   000  000      000  000   000       000   000
000000000  000000000  000      0000000    0000000   0000000  
000   000  000   000  000      000  000   000       000   000
00     00  000   000  0000000  000   000  00000000  000   000
###

use ../../kxk/slash
use ../../kxk/ffs

use ./File

class Walker

    @: (@cfg) ->

        @cfg.files       = []
        @cfg.stats       = []
        @cfg.maxDepth    ?= 3
        @cfg.dotFiles    ?= false
        @cfg.includeDirs ?= true
        @cfg.maxFiles    ?= 500
        @cfg.ignore      ?= ['node_modules' 'build' 'Build' 'Library' 'Applications'] #, 'resources' 'ThirdParty' 'Binaries' 'Intermediate' 'Saved' 'Programs' 'Shaders' 'DerivedDataCache' 'Content' 'Samples']
        @cfg.include     ?= ['.konrad.noon' '.gitignore' '.npmignore']
        @cfg.ignoreExt   ?= ['asar']
        @cfg.includeExt  ?= File.sourceFileExtensions
        
        # log 'Walker' @cfg
      
    #  0000000  000000000   0000000   00000000   000000000
    # 000          000     000   000  000   000     000   
    # 0000000      000     000000000  0000000       000   
    #      000     000     000   000  000   000     000   
    # 0000000      000     000   000  000   000     000   
    
    start: ○->
        
        dir = @cfg.root
        
        log 'Walker.start' dir
        
        if 1
            @running = true
            
            toWalk = [dir]
            
            while valid toWalk
                
                listDir = toWalk.shift()
            
                items = ○ ffs.list listDir
                log 'Walker items' items
                
                for item in items
                    log 'item' item
                    file = item.file
                    ext = slash.ext file
                    
                    log 'file' file, ext
    
                    # if @cfg.filter?(p)
                        # return @ignore p
                    # else if file in ['.DS_Store' 'Icon\r'] or ext in ['pyc']
                        # return @ignore p
                    # else if file.endsWith "-#{os.arch()}"
                        # return @ignore p
                    # else if @cfg.includeDir? and slash.dir(p) == @cfg.includeDir
                        # @cfg.files.push item.path
                        # @cfg.stats.push stat
                        # @ignore p if file in @cfg.ignore
                        # @ignore p if file.startsWith('.') and not @cfg.dotFiles
                    # else if file in @cfg.ignore
                        # return @ignore p
                    # else if file in @cfg.include
                        # @cfg.files.push item.path
                        # @cfg.stats.push stat
                    # else if file.startsWith '.'
                        # if @cfg.dotFiles
                            # @cfg.files.push item.path
                            # @cfg.stats.push stat
                        # else
                            # return @ignore p 
                    # else if ext in @cfg.ignoreExt
                        # return @ignore p
                    # else if ext in @cfg.includeExt or @cfg.includeExt.indexOf('') >= 0
                        # @cfg.files.push item.path
                        # @cfg.stats.push stat
                    # else if stat.isDirectory()
                        # if p != @cfg.root and @cfg.includeDirs
                            # @cfg.files.push item.path 
                            # @cfg.stats.push stat
                            
                    @cfg.path item.path if @cfg.path is func 
                    
                    if item.type == 'dir'
                        if @cfg.includeDirs
                            @cfg.dir? item.path
                        # if cfg.skipDir? item.path
                            # @ignore p
                    else
                        if ext in @cfg.includeExt or slash.file(item.path) in @cfg.include or @cfg.includeExt.indexOf('') >= 0
                            @cfg.file? item.path
                                                    
                    if @cfg.files.length > @cfg.maxFiles
                        log 'maxFiles reached'
                        break
    
                    # else if cfg.slowdown and (cfg.files.length % 400) == 399
                        # @pause()
                        # setTimeout @resume, 10
                    
            # @walker.on 'path' onWalkerPath @cfg

            @running = false
            @cfg.done? @
                
        # catch err
            # @running = false
            # error "Walker.start -- #{err} dir: #{dir} stack:", err.stack

    stop: ->
        
        @running = false
        @walker = null
    
export Walker
