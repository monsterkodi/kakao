###
 0000000  000000000   0000000   000000000  000   000   0000000  
000          000     000   000     000     000   000  000       
0000000      000     000000000     000     000   000  0000000   
     000     000     000   000     000     000   000       000  
0000000      000     000   000     000      0000000   0000000   
###

use ◆ color util

function status

    @: @cells @state ->
        
        @file = ''
        @drawTime = ''
        
    draw: =>
        
        x      = 0
        y      = @cells.rows-1
        gtr    = @state.s.gutter
        cursor = @state.s.cursor
        cols   = @cells.cols
        fnl    = @file.length
        dt     = @drawTime
        dtl    = dt.length
        rdo    = @state.hasRedo()
        dty    = @state.isDirty()
        
        set = x char fg bg => 
            if valid fg and fg[0] != '#' ➜ fg = color[fg]
            if valid bg and bg[0] != '#' ➜ bg = color[bg]
            @cells.set x y char fg bg
            1
        add = char fg bg => x += set x char fg bg
        
        # draw the left edge of the status bar
        
        add '' 'status_dark' 'gutter'
        
        # draw the column number
        
        colno = rpad gtr-1 "#{cursor[0]+1}"
        for ci in 1...gtr
            fg = cursor[0] ? 'status_fg' : 'column_fg'
            fg = 'status_empty' if util.isLinesPosOutside @state.s.lines cursor 
            add (ci-1 < colno.length) ? colno[ci-1] : ' ' fg 'status_dark'

        # draw the separator after the column number
            
        add '' 'status' 'status_dark'
              
        # draw the dirty indicator
        
        add dty ? '' : '' dty ? 'status_dirty' : 'status_dark' 'status'
        
        # draw the file name
        
        add ' ' 'status_fg' 'status'

        lastSlash = @file.lastIndexOf '/'
        lastDot = @file.lastIndexOf '.'
        for ci in 0...fnl
            fg = ci > lastSlash ? 'status_file' : 'status_dir'
            fg = 'status_ext' if lastSlash <= lastDot <= ci
            fg = color.darken(color[fg]) if @file[ci] in './'
            add @file[ci] fg 'status'
            
        # draw the redo indicator
        
        add ' ' 'status_fg' 'status'
        rcol = rdo ? 'status_redo' : dty ? 'status_dirty' : 'status_dark'
        add rdo ? '' : '' rcol 'status'
             
        # draw the right edge of the file name section
        
        add '' 'status' 'status_dark'
        
        # draw the selection count if there are selections
        
        if @state.s.selections.length

            sel = " #{@state.s.selections.length} sel "
             
            for i in 0...sel.length
                add sel[i] (i<sel.length-4) ? 'status_sel' : 'status_fg_dim' 'status_dark'
                
        # fill the remaining space
        for ci in x...cols-dtl-2
            add ' ' null 'status_dark'
                        
        # draw the time if there's enough space
                
        add '' 'status' 'status_dark'
         
        for i in 0...dtl
            fg = i < dtl-3 ? 'status_fg' : 'status_fg_dim'
            add dt[i] fg 'status'
         
        # draw the final edge of the status bar
        
        set cols-1 '' 'status' 'editor_empty'
            
            
export status

