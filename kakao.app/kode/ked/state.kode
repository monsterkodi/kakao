###
 0000000  000000000   0000000   000000000  00000000  
000          000     000   000     000     000       
0000000      000     000000000     000     0000000   
     000     000     000   000     000     000       
0000000      000     000   000     000     00000000  
###

use ../kxk ◆ immutable

function state

    @: @cells -> @init ['']
    
    init: lines ->
        
        @s = immutable
            lines:       lines
            selections:  []
            cursor:      [0 0]
            view:        [0 0]
            gutter:      @calcGutter(lines.length)

        @setCursor 0 0
        
    calcGutter: numLines =>
        
        2 + Math.ceil(Math.log10(numLines))
            
    setCursor: x y =>
        
        y = clamp 0 @s.lines.length-1 y
        x = clamp 0 @s.lines[y].length x
                        
        @s = @s.set 'cursor' [x y]
        
        if y > @s.view[1] + @cells.t.rows()
            view = @s.view.asMutable()
            view[1] = y - @cells.t.rows()
            @s = @s.set 'view' view
            doRedraw = true
        else if y < @s.view[1]
            view = @s.view.asMutable()
            view[1] = y
            @s = @s.set 'view' view
            doRedraw = true
            
        @cells.t.setCursor x+@s.gutter y-@s.view[1]
        
        doRedraw
            
    moveCursor: dir steps=1 =>
        
        c = @s.cursor.asMutable() 
        
        switch dir
            'left'  ➜ c[0] -= 1
            'right' ➜ c[0] += 1
            'up'    ➜ c[1] -= steps
            'down'  ➜ c[1] += steps 
            
        @setCursor c[0] c[1]
            
    draw: =>
        
        for y in 0...@cells.t.rows()
            li = y+@s.view[1]
            line = @s.lines[li]
            for x in 0...min(line.length @cells.t.cols()-@s.gutter)
                @cells.c[y][x+@s.gutter].fg = 'ffffff'
                @cells.c[y][x+@s.gutter].char = line[x]

export state