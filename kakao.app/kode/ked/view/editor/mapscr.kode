###
    ██     ██   ███████   ████████    ███████   ███████  ████████   
    ███   ███  ███   ███  ███   ███  ███       ███       ███   ███  
    █████████  █████████  ████████   ███████   ███       ███████    
    ███ █ ███  ███   ███  ███             ███  ███       ███   ███  
    ███   ███  ███   ███  ███        ███████    ███████  ███   ███  

    scrollable source map to the right of the fileeditor
###

use ../../../kxk    ▪ post
use ../../theme     ◆ theme
use ../../util/img  ◆ squares
use ../../edit/tool ◆ belt
use                 ◆ mapview

function mapscr extends mapview

    @: @editor ->
        
        super @editor.screen @editor.state
        
        @state.on 'view.changed' @drawKnob
        
        @pointerType = 'pointer'
        
        @knobId = @imgId+0xeeee
        
        @topLine    = 0 # index of first visible line
        @botLine    = 0 # index of last visible line
        @knobHeight = 0 # height of the knob in pixels
        @mapWidth   = 0 # width of the map in pixels
        @mapHeight  = 0 # height of the map in pixels
        @linesInMap = 0 # number of lines that fit into map
        
        @setColor 'bg'        theme.editor.mapscr
        @setColor 'highlight' theme.highlight.map
        @setColor 'selection' theme.selection.map
        @setColor 'fullysel'  theme.selection.mapfully
        
        @screen.t.on 'preResize' @clearImages
        
        post.on 'popup.show' (name) => @hide() if name in ['searcher' 'finder' 'differ']
        post.on 'greet.show' @hide
        
        post.on 'popup.hide' @show
        post.on 'greet.hide' @show
        
        @editor.state.on 'lines.changed' @onLinesChanged
        
        @calcView()
        
    onLinesChanged: diff =>
    
        log "mapscr.onLinesChanged chg #{diff.chg.length} ins #{diff.ins.length} del #{diff.del.length}" #diff
        
    getSegls:  => @state.segls
    getSyntax: => @state.syntax
    
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouse: event =>
        
        super event
        
        switch event.type
            
            'press'
            
                if @hover
                    @doDrag = true
                    post.emit 'pointer''grabbing'
                    ⮐  @scrollToPixel event.pixel
                    
            'drag'
            
                if @doDrag
                    post.emit 'pointer''grab'
                    ⮐  @scrollToPixel event.pixel
                    
                @hover = false
                
            'release'
            
                if @doDrag
                    delete @doDrag 
                    post.emit 'pointer''pointer' if @hover
                    ⮐  true
        @hover
    
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: =>
        
        @csz = @cells.screen.t.cellsz
        
        ⮐  if empty @csz
        
        @calcView()
        @redraw = true
        
    #  0000000   0000000  00000000    0000000   000      000      000000000   0000000   
    # 000       000       000   000  000   000  000      000         000     000   000  
    # 0000000   000       0000000    000   000  000      000         000     000   000  
    #      000  000       000   000  000   000  000      000         000     000   000  
    # 0000000    0000000  000   000   0000000   0000000  0000000     000      0000000   
    
    scrollToPixel: pixel =>
        
        view = @state.s.view.asMutable()
        
        view[1] = @topLine + int((pixel[1] - @mapY) / @pixelsPerRow)
        
        view[1] -= 5 # offset so that clicking inside a header scrolls it into view
        
        maxY = @state.s.lines.length - @cells.rows
        view[1] = min maxY view[1] if maxY > 0
        view[1] = max 0 view[1]
        
        ⮐  if view eql @state.s.view
        
        @state.setView view
        
        @drawKnob()
        
        redraw:true
        
    #  ███████   ███████   ███       ███████  ███   ███  ███  ████████  ███   ███
    # ███       ███   ███  ███      ███       ███   ███  ███  ███       ███ █ ███
    # ███       █████████  ███      ███        ███ ███   ███  ███████   █████████
    # ███       ███   ███  ███      ███          ███     ███  ███       ███   ███
    #  ███████  ███   ███  ███████   ███████      █      ███  ████████  ██     ██

    calcView: ->
    
        @mapX       = @cells.x*@csz[0]
        @mapY       = @cells.y*@csz[1]
        
        @mapHeight  = @cells.rows * @csz[1]
        @mapWidth   = @cells.cols * @csz[0]
        
        @mapBot     = @mapY + @mapHeight - @pixelsPerRow
        
        @linesInMap = int @mapHeight / @pixelsPerRow
        @knobHeight = @state.cells.rows * @pixelsPerRow
        
        editorLinesHeight = @state.s.lines.length * @pixelsPerRow
        if editorLinesHeight > @mapHeight and @state.s.view[1] > 0
            maxOffset  = @state.s.lines.length - @linesInMap
            viewFactor = @state.s.view[1] / (@state.s.lines.length - @cells.rows)
            @topLine   = int viewFactor * maxOffset
        else
            @topLine = 0 
            
        @botLine    = min @state.s.lines.length-1 @topLine+@linesInMap 

    lineOffset: y -> (y-@topLine)*@pixelsPerRow
        
    pixelPos: pos -> 
       [
           @mapX + pos[0]*@pixelsPerCol
           @mapY + @lineOffset(pos[1])
       ]
    
    maxLinesToLoad: => 2000
    
    ###
    ███████    ████████    ███████   ███   ███
    ███   ███  ███   ███  ███   ███  ███ █ ███
    ███   ███  ███████    █████████  █████████
    ███   ███  ███   ███  ███   ███  ███   ███
    ███████    ███   ███  ███   ███  ██     ██
    ###
    
    draw: =>
    
        ⮐  if @hidden() or @collapsed()
        
        super()
        
        if @csz
        
            @drawCursors()    
            @drawHighlights() 

    # ███  ██     ██   ███████    ███████   ████████   ███████
    # ███  ███   ███  ███   ███  ███        ███       ███     
    # ███  █████████  █████████  ███  ████  ███████   ███████ 
    # ███  ███ █ ███  ███   ███  ███   ███  ███            ███
    # ███  ███   ███  ███   ███   ███████   ████████  ███████ 

    drawImages: =>
        
        t = @cells.screen.t
        
        ⮐  if empty t.pixels or @hidden() or @collapsed()
        
        for y in @topLine..@botLine
            id = @images[y]
            t.placeLineImage id @cells.x @cells.y @lineOffset(y) @pixelsPerRow
            
        if @topLine
            t.hideImagesInRange @images[0] @images[@topLine-1]
        if @botLine < @images.length
            t.hideImagesInRange @images[@botLine] @images[-1]
        
        @drawKnob()
                
    # ███   ███  ███   ███   ███████   ███████  
    # ███  ███   ████  ███  ███   ███  ███   ███
    # ███████    ███ █ ███  ███   ███  ███████  
    # ███  ███   ███  ████  ███   ███  ███   ███
    # ███   ███  ███   ███   ███████   ███████  

    drawKnob: =>
    
        @calcView()
                
        ⮐  if empty @csz or @hidden() or @collapsed()
        
        ky = @lineOffset @state.s.view[1]
        
        @cells.screen.t.placeImageOverlay @knobId @cells.x @cells.y ky @mapWidth @knobHeight

    hide: =>
    
        ⮐  if @hidden()
        
        @cells.screen.t.hideImageOverlay @knobId
        
        super()
        
    #  ███████  ███   ███  ████████    ███████   ███████   ████████    ███████
    # ███       ███   ███  ███   ███  ███       ███   ███  ███   ███  ███     
    # ███       ███   ███  ███████    ███████   ███   ███  ███████    ███████ 
    # ███       ███   ███  ███   ███       ███  ███   ███  ███   ███       ███
    #  ███████   ███████   ███   ███  ███████    ███████   ███   ███  ███████ 

    drawCursors: =>
        
        for pos,idx in @state.s.cursors
        
            [sx sy] = @pixelPos pos 
            
            continue if sy < @mapY or sy >= @mapBot
            continue if sx < @mapX or sx >= @mapX + @mapWidth
        
            if idx == @state.s.main
                fg = theme.cursor.main
                sw = @pixelsPerCol*2
                sx -= int @pixelsPerCol/2
            else
                fg = theme.cursor.multi
                sw = @pixelsPerCol
                
            squares.place sx sy sw @pixelsPerRow fg
            
            if idx == @state.s.main
                squares.place @cells.x*@csz[0]+@mapWidth-@pixelsPerCol*4 sy @pixelsPerCol*4 @pixelsPerRow fg 2002

    # 000   000  000   0000000   000   000  000      000   0000000   000   000  000000000   0000000  
    # 000   000  000  000        000   000  000      000  000        000   000     000     000       
    # 000000000  000  000  0000  000000000  000      000  000  0000  000000000     000     0000000   
    # 000   000  000  000   000  000   000  000      000  000   000  000   000     000          000  
    # 000   000  000   0000000   000   000  0000000  000   0000000   000   000     000     0000000   
    
    drawHighlights: =>
        
        mc = @state.mainCursor()
        
        xoff = @mapX + @mapWidth
        selw = @pixelsPerCol*16
        hlw  = @pixelsPerCol*8
    
        for li in belt.lineIndicesForRanges @state.s.selections
                
            sy = @mapY + @lineOffset(li) 
            continue if sy < @mapY or sy >= @mapBot
            
            if @state.isSpanSelectedLine li 
                clr = @color.selection
            else
                clr = @color.fullysel
                
            squares.place xoff-selw sy selw @pixelsPerRow clr 2000
    
        for li in belt.lineIndicesForSpans @state.s.highlights
        
            sy = @mapY + @lineOffset(li) 
            continue if sy < @mapY or sy >= @mapBot
            
            squares.place xoff-hlw sy hlw @pixelsPerRow @color.highlight 2001

export mapscr
