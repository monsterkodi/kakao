# ███   ███  ███  ██     ██
# ███  ███   ███  ███   ███
# ███████    ███  █████████
# ███  ███   ███  ███ █ ███
# ███   ███  ███  ███   ███

use std ▪ os osproc parseopt random streams asyncdispatch asyncfile posix
use rndr

params    ◇ seq[string]
files     ◇ seq[string]
optParser = initOptParser()
outdir    = ""
tests     = false
verbose   = false
greetings = [
    "💋 Keep It Simple, Stupid!",
    "💋 Overthink less, grin more!",
    "💋 Less clutter, more wonder!",
    "💋 The best code is no code.",
    "💋 Less is always beautifuller!",
    "💋 Simplicity: the shortcut to ‘heck yes!’",
    "💋 If it’s hard to explain, it’s probably wrong.",
    "💋 Uncomplicate your code and your mind will dance.",
    "🌞 A child’s laugh, a sunbeam’s path — why bend what is straight?",
    "🌈 Go with the flow, catch joy like dandelion fluff.",
    "🌈 Aim for maximum joy, anticipate future regrets.",
    "🌞 Rise and shine! What shall we craft today?",
    "👋 Salutations! Let's crunch some code cookies.",
    "🚀 Systems nominal! Your code awaits transformation.",
    "🍳 Howdy, chef! What are we cooking today?",
    "🤖 Greetings, fleshbag! May your code ripple smoothly through the machine.",
    "🔮 Embrace uncertainty — code with glitter!",
    "🎩 Magician at the keyboard! Let's conjure some magic.",
    "🎩 Flexible beats flawless — everytime.",
    "🎩 Stay open, stay awesome."]  
    
farewells = [
    "👋 Good bye! May your code always compile.",
    "👋 Good bye! May your brackets always align.",
    "👋 Farewell! May your brackets nest flawlessly.",
    "👋 Farewell! May your brackets always balance."]

testFiles = walkDir(getAppFilename().splitFile()[0] / ".." / "nim" / "test").toSeq().map(◇tuple r ➜string -> r.path)
    
randomize()

verb = ◇string msg -> 
    if verbose ➜ log msg 

#  ███████   ████████  █████████         ███████   ████████   █████████
# ███        ███          ███           ███   ███  ███   ███     ███   
# ███  ████  ███████      ███           ███   ███  ████████      ███   
# ███   ███  ███          ███           ███   ███  ███           ███   
#  ███████   ████████     ███            ███████   ███           ███   

for kind key val in optParser.getopt()
    switch kind
        cmdArgument
            params.add key
            files.add(key)
        cmdLongOption cmdShortOption
            params.add '-' & key
            switch key
                "test" "t"
                    tests = true
                "verbose" "v"
                    verbose = true
                "outdir" "o"
                    outdir = val
                "help" "h"
                    log "usage: " getAppFilename().extractFilename() " [options] [file.kim ...]"
                    log ""
                    log "      transpiles kim files to nim"
                    log "      watches cwd if no files are given"
                    log ""
                    log "options:"
                    log "  -o --outdir:DIR  output directory"
                    log "     --test        run tests"
                    log "  -v --verbose     verbose output"
                    quit 1
                ➜ 
                    log "unknown option!: " key
                    quit 1
        cmdEnd
            discard
                        
# ████████   ████████   ███████  █████████   ███████   ████████   █████████
# ███   ███  ███       ███          ███     ███   ███  ███   ███     ███   
# ███████    ███████   ███████      ███     █████████  ███████       ███   
# ███   ███  ███            ███     ███     ███   ███  ███   ███     ███   
# ███   ███  ████████  ███████      ███     ███   ███  ███   ███     ███   
            
when defined(posix)

    use posix
    
    restart = ->
        args = allocCStringArray @[getAppFilename()] & params
        discard execv getAppFilename().cstring() args
        quit 1 # only reaches here if execve fails
    
# ███       ███████    ███████   ████████  ███  ███      ████████
# ███      ███   ███  ███        ███       ███  ███      ███     
# ███      ███   ███  ███  ████  ██████    ███  ███      ███████ 
# ███      ███   ███  ███   ███  ███       ███  ███      ███     
# ███████   ███████    ███████   ███       ███  ███████  ████████

logFile = ◇string f prefix="" ->

    (dir name ext) = f.relativePath(getCurrentDir()).splitFile()
    d = if dir.len ➜ dir & "/" ➜ ""
    icon  = if ext == ".kim" ➜ "  " ➜ "  "
    color = if ext == ".kim" ➜ fgGreen ➜ fgMagenta

    styledEcho color prefix styleDim icon resetStyle
               color styleBright d styleBright name resetStyle
        
#  ███████   ███████   ██     ██  ████████   ███  ███      ████████
# ███       ███   ███  ███   ███  ███   ███  ███  ███      ███     
# ███       ███   ███  █████████  ████████   ███  ███      ███████ 
# ███       ███   ███  ███ █ ███  ███        ███  ███      ███     
#  ███████   ███████   ███   ███  ███        ███  ███████  ████████

compile = ◇string file outDir="bin" ➜bool ->

    # nim c --outDir:bin --colors:on --stackTrace:on --lineTrace:on --warning:User:off nim/kim.nim

    profileScope 'comp'
    cmd = "nim c -d:danger --outDir=#{outdir} --mm:arc --colors:on --warning:User:off #{file}"
    # cmd = "nim c --outDir=#{outdir} --mm:arc --colors:on --stackTrace:on --lineTrace:on --warning:User:off #{file}"
    (output exitCode) = execCmdEx(cmd)
        
    if exitCode != 0
        styledEcho fgRed "✘ " $cmd
        log output
        false
    else
        if verbose
            styledEcho fgGreen "✔ " fgWhite cmd
        true
        
# █████████  ████████   ███████  █████████   ███████
#    ███     ███       ███          ███     ███     
#    ███     ███████   ███████      ███     ███████ 
#    ███     ███            ███     ███          ███
#    ███     ████████  ███████      ███     ███████ 

runTests = ➜bool ->

    profileScope 'test'
    anyFail = false
    
    for f in testFiles
        args = ["r" "--colors:on" "--stackTrace:on" "--lineTrace:on" "--warning:User:off" f]  
        process = startProcess command="nim" args=args options={poInteractive poUsePath}
        defer: process.close()
        startTime = getMonoTime()
        output = ""
        outhnd = process.outputHandle
        flags = fcntl outhnd F_GETFL 0
        discard fcntl outhnd F_SETFL flags or O_NONBLOCK
        
        thisFail = false
        
        while true
            elapsed = (getMonoTime() - startTime).inMilliseconds
            if elapsed >= 5000
                anyFail = true
                thisFail = true
                output.add "test killed after #{elapsed} ms!!"
                process.terminate()
                sleep 50
                if process.running
                    process.kill()
                break
                            
            line = newString 1024*10
            bytesRead = read outhnd addr(line[0]) line.len
            if 
                bytesRead > 0   ➜ output.add line & "\n"
                bytesRead == 0  ➜ break
                errno == EAGAIN ➜ discard poll nil 0 50
                                ➜ break
                
        exitCode = process.waitForExit()
        if exitCode != 0 or verbose or thisFail
            styledEcho output.replace("[Suite]"  fg(fgYellow) & "▸\x1b[0m")
                             .replace("[OK]"     fg(fgGreen) & "✔\x1b[0m")
                             .replace("[FAILED]" fg(fgRed) & "✘\x1b[0m")                             
        else
            okCount = output.count "[OK]"
            styledEcho output.replace("[Suite]"  fg(fgYellow) & "▸\x1b[0m")
                             .replace(peg"'[OK]' .+" "#{ansiStyleCode(styleDim)} ✔ #{okCount}\x1b[0m")
            
        for line in process.errorStream.lines
            log line
        
        if exitCode != 0
            # echo output
            styledEcho fgRed "✘ " $f
            anyFail = true
    # log ""
    not anyFail

if files.len

    # profileStart 'translate'
    transpiled = rndr.files files
    # profileStop 'translate'
    quit transpiled.len - files.len

if tests

    exit = if runTests() ➜ 0 ➜ 1
    quit exit
    
#  ███████  █████████   ███████    ███████   ████████
# ███          ███     ███   ███  ███        ███     
# ███████      ███     █████████  ███  ████  ███████ 
#      ███     ███     ███   ███  ███   ███  ███     
# ███████      ███     ███   ███   ███████   ████████

stage = ◇seq[string] kimFiles ◇string src ◇string dst ➜bool ->

    profileStart dst & " "
    for f in kimFiles 
        copyFileWithPermissions f f.replace("/kim/kim/" "/kim/#{dst}/kim/")
    
    for f in kimFiles 
        (output exitCode) = execCmdEx "#{src}/bin/kim " & f.replace("/kim/kim/" "/kim/#{dst}/kim/")
        if exitCode != 0
            log output
            logFile f "✘ "
            ⮐  false
    profileStop dst & " "
        
    if compile "#{dst}/nim/kim.nim" "#{dst}/bin"
        profileStart "test"
        (output exitCode) = execCmdEx "#{dst}/bin/kim --test"
        profileStop "test"
        if exitCode == 0
            ⮐  true
        else
            log output
    log "✘ #{dst}"
    false
 
# ███   ███   ███████   █████████   ███████  ███   ███
# ███ █ ███  ███   ███     ███     ███       ███   ███
# █████████  █████████     ███     ███       █████████
# ███   ███  ███   ███     ███     ███       ███   ███
# ██     ██  ███   ███     ███      ███████  ███   ███

watch = ◇seq[string] paths ->

    hook = -> {.noconv.}
        styledEcho ""
        styledEcho fgGreen farewells[rand(farewells.high)]
        quit 0
        
    setControlCHook hook
    
    modTimes ◇ Table[string, times.Time]
    
    styledEcho ""
    styledEcho fgGreen greetings[rand(greetings.high)]
    styledEcho ""
    
    for p in paths
        (dir name ext) = p.splitFile()
        styledEcho fgBlue styleDim "● " resetStyle
            styleBright fgBlue dir " " resetStyle 
            styleBright fgYellow name styleDim ext resetStyle
    
    firstLoop = true
    
    while true
    
        toTranspile ◇ seq[string]
        kimFiles    ◇ seq[string]
        
        for path in paths
        
            if not dirExists(path)
            
                continue
                
            for f in walkDirRec(path)
            
                (_ _ ext) = f.splitFile()
                
                if ext == ".kim" ➜ kimFiles.add(f) ➜ continue
                
                modTime = getFileInfo(f).lastWriteTime
                
                if not modTimes.hasKey(f)
                    modTimes[f] = modTime
                    continue
                  
                if modTimes[f] == modTime
                    continue
        
                modTimes[f] = modTime
                if ext == ".kim"
                    toTranspile.add f
                
        if firstLoop                                    
            firstLoop = false
            if verbose
                for f in kimFiles ➜ logFile f
                
        if toTranspile
            log "\x1bc"
            for f in toTranspile
                logFile f "▸ "
                
            if stage kimFiles "." "k1m"
                if stage kimFiles "k1m" "k2m"
                    log "-> deploy"
                    for f in kimFiles 
                        srcNim = f.replace("/kim/kim/" "/kim/k2m/nim/").replace(".kim" ".nim")
                        tgtNim = f.replace("/kim/kim/" "/kim/nim/").replace(".kim" ".nim")
                        copyFileWithPermissions srcNim tgtNim
                    if compile "k2m/nim/kim.nim" "bin"
                        restart()
        sleep 200
        
watch [getCurrentDir() & "/kim"]
                 