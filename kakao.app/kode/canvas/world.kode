###
000   000   0000000   00000000   000      0000000  
000 0 000  000   000  000   000  000      000   000
000000000  000   000  0000000    000      000   000
000   000  000   000  000   000  000      000   000
00     00   0000000   000   000  0000000  0000000  
###

use ../kxk ▪ $ randInt randRange randIntRange elem prefs post

use ◆ tweaky valgrid

function world

    @: -> 
        
        @pause          = false
        @types          = 12
        @stepsPerFrame  = 1
        
        @dt             = 0.05
        @beta           = 0.3
        @num            = 1200
        @forceFactor    = 0.5
        @friction       = 0.5
        @maxVelocity    = 0.5
        
        @minRadius      = 0.005
        @maxRadius      = 0.125
                        
        @canvas = elem 'canvas' class:'canvas'
        
        @main =$ 'main'
        @main.appendChild @canvas
                
        @tweaky  = new tweaky  @main
        @valgrid = new valgrid @main
        @valgrrd = new valgrid @main
        
        @tweaky.init 
            
            num:         min:1000   max:2000  step:100   value:@num,         cb: (@num)         => @start()
            types:       min:2      max:32    step:1     value:@types,       cb: (@types)       => @start()
            beta:        min:0.01   max:1.0   step:0.01  value:@beta,        cb: (@beta)        =>
            delta:       min:0.001  max:0.1   step:0.001 value:@dt,          cb: (@dt)          =>
            force:       min:0      max:1     step:0.01  value:@forceFactor, cb: (@forceFactor) =>
            friction:    min:0.1    max:0.7   step:0.05  value:@friction,    cb: (@friction)    =>
            maxVelocity: min:0.1    max:1     step:0.01  value:@maxVelocity, cb: (@maxVelocity) =>   
            minRadius:   min:0.001  max:0.1   step:0.001 value:@minRadius,   cb: (@minRadius)   =>
            maxRadius:   min:0.1    max:0.5   step:0.01  value:@maxRadius,   cb: (@maxRadius)   =>
        
        post.on 'resize' @resize
        
        @resize()
        @start()
        
    #  0000000  000000000   0000000   00000000   000000000  
    # 000          000     000   000  000   000     000     
    # 0000000      000     000000000  0000000       000     
    #      000     000     000   000  000   000     000     
    # 0000000      000     000   000  000   000     000     
    
    start: =>
        
        @matrix = @randomMatrix @types
        @radii  = @randomRadii  @types
                
        @colors         = new Int32Array   @num
        @ages           = new Float32Array @num
        @positionsX     = new Float32Array @num
        @positionsY     = new Float32Array @num
        @velocitiesX    = new Float32Array @num
        @velocitiesY    = new Float32Array @num
        
        @hsl            = []
        
        for i in 0...@num
            @colors[i]      = randInt @types
            @positionsX[i]  = Math.random()
            @positionsY[i]  = Math.random()
            @velocitiesX[i] = 0
            @velocitiesY[i] = 0
            @ages[i]        = 0
            @hsl[i]         = "hsl(#{360*@colors[i]/@types},100%,50%)"
            
        @valgrid.init @matrix
        @valgrrd.init @radii, min:0 max:1 colors:@hsl
        
    randomMatrix: n ->
        
        rows = []
        for i in 0...n
            row = []
            for j in 0...n
                row.push Math.random()*2-1
            rows.push row
        rows

    randomRadii: n ->
        
        rows = []
        for i in 0...n
            row = []
            for j in 0...n
                row.push Math.random()
            rows.push row
        rows
        
    resize: =>
        
        br = @main.getBoundingClientRect()
        @size = min br.width, br.height
        @canvas.width  = @size
        @canvas.height = @size
        
        @canvas.style.left = "#{(max 0 br.width-@size)/2}px"
        @canvas.style.top  = "#{(max 0 br.height-@size)/2}px"
                
    togglePause: => @pause = not @pause; post.emit 'pause'
    
    # 00000000   0000000   00000000    0000000  00000000  
    # 000       000   000  000   000  000       000       
    # 000000    000   000  0000000    000       0000000   
    # 000       000   000  000   000  000       000       
    # 000        0000000   000   000   0000000  00000000  
    
    force: r a ->
        
        if r < @beta     ➜ ⮐ r / @beta - 1
        if @beta < r < 1 ➜ ⮐ a * (1 - Math.abs(2*r-1-@beta)/(1-@beta))
        0
    
    #  0000000  000  00     00  000   000  000       0000000   000000000  00000000  
    # 000       000  000   000  000   000  000      000   000     000     000       
    # 0000000   000  000000000  000   000  000      000000000     000     0000000   
    #      000  000  000 0 000  000   000  000      000   000     000     000       
    # 0000000   000  000   000   0000000   0000000  000   000     000     00000000  
    
    simulate: ->
        
        ⮐ if @pause and not @oneStep
        
        ● simulate
        
        delete @oneStep
        
        for i in 0...@num
            
            totalForceX = 0
            totalForceY = 0
            
            for j in 0...@num
                
                continue if i == j
                
                rx = @positionsX[j] - @positionsX[i]
                ry = @positionsY[j] - @positionsY[i]
                
                rx = rx - 1 if rx > 0.5
                ry = ry - 1 if ry > 0.5
                
                rx = rx + 1 if rx < -0.5
                ry = ry + 1 if ry < -0.5
                
                r = Math.hypot rx, ry

                rMax = @minRadius + @radii[@colors[i]][@colors[j]] * (@maxRadius - @minRadius)
                if r > 0 and r < rMax
                    f = @force r/rMax, @matrix[@colors[i]][@colors[j]]
                    totalForceX += rx / r * f
                    totalForceY += ry / r * f
                                
            @velocitiesX[i] += @forceFactor * totalForceX * @dt
            @velocitiesY[i] += @forceFactor * totalForceY * @dt
                        
            if Math.abs(@velocitiesX[i]) < 0.001 and Math.abs(@velocitiesY[i]) < 0.001
                @ages[i] += 0.01
                if @ages[i] > 1
                    @colors[i]      = randInt @types
                    @positionsX[i]  = Math.random()
                    @positionsY[i]  = Math.random()
                    @velocitiesX[i] = 0.1*Math.random()-0.05
                    @velocitiesY[i] = 0.1*Math.random()-0.05
                    @ages[i]        = 0
            
        for i in 0...@num
          
            @velocitiesX[i] *= @friction
            @velocitiesY[i] *= @friction
            
            @velocitiesX[i] = clamp -@maxVelocity, @maxVelocity, @velocitiesX[i]
            @velocitiesY[i] = clamp -@maxVelocity, @maxVelocity, @velocitiesY[i]
            
            @positionsX[i] += @velocitiesX[i] * @dt
            @positionsY[i] += @velocitiesY[i] * @dt
            
            @positionsX[i] += 1 if @positionsX[i] < 0 
            @positionsY[i] += 1 if @positionsY[i] < 0 
            
            @positionsX[i] -= 1 if @positionsX[i] > 1 
            @positionsY[i] -= 1 if @positionsY[i] > 1 
               
    # 000000000  000   0000000  000   000  
    #    000     000  000       000  000   
    #    000     000  000       0000000    
    #    000     000  000       000  000   
    #    000     000   0000000  000   000  
    
    faster:     => @forceFactor *= 2; @forceFactor = min 16 @forceFactor
    slower:     => @forceFactor /= 2; @forceFactor = max 1  @forceFactor
    singleStep: => @oneStep = true; @pause = true; post.emit 'pause'
    
    tick: tickInfo ->
        
        for i in 0...@stepsPerFrame
            @simulate()
        
        @canvas.width = @canvas.width
        ctx = @canvas.getContext '2d'
 
        ctx.strokeStyle = "#111"
        ctx.strokeWidth = 1
        ctx.strokeRect 0 0 @canvas.width, @canvas.height
        
        ctx.fillStyle = "#ff0"
                    
        for i in 0...@num
            #ctx.beginPath()
            screenX = @positionsX[i] * @canvas.width
            screenY = @positionsY[i] * @canvas.height
            #
            #ctx.arc screenX, screenY, 2 0 2*Math.PI
            ctx.fillStyle = @hsl[@colors[i]]
            #ctx.fill()
            ctx.fillRect screenX, screenY, 4 4
                    
export world
