
kstr = {}

kstr.splice = s i n ... ->
    
    if i < 0 ➜ i = s.len+i+1
    if i > 1
        ⮐  string.sub(s 1 i-1) & (table.concat({...} '')) & string.sub(s i+n)
    elif i == 1
        ⮐  (table.concat({...} '')) & string.sub(s i+n)
        
kstr.slice = s f t -> string.sub s f t
        
kstr.shift = s n=1 -> kstr.splice s 1 n
kstr.pop   = s n=1 -> kstr.splice s,-n n

kstr.lpad = s n=1 c=" "  ->
kstr.lpad = l s="" c=' ' ->
    while s.len < l ➜ s = c & s
    s
    
kstr.rpad = l s="" c=' ' ->
    while s.len < l ➜ s &= c
    s

kstr.pad = l s="" c=' ' -> kstr.rpad l s c
    
kstr.endsWith   = s o -> o == string.sub s s.len-o.len+1 s.len
kstr.startsWith = s o -> o == string.sub s 1 o.len

kstr.rtrim = s c=' ' ->
    while s.len > 0 and (kstr.endsWith(s c) or kstr.endsWith(s "\n"))
        s = kstr.pop s
    s
kstr.ltrim = s c=' ' -> 
    while s.len > 0 and (kstr.startsWith(s c) or kstr.startsWith(s "\n"))
        s = string.sub s 2
    s
kstr.trim = s c=' ' -> kstr.ltrim kstr.rtrim(s,c) c

kstr.chars = s ->

    reslt = []
    for i in 1...s.len+1
        reslt∙push s∙sub(i i)
    reslt
   
kstr.split = s sep limit ->
    
    if sep == nil ➜ ⮐  [s]
    if sep == ""  ➜ ⮐  kstr.chars s
    
    reslt = []
    start = 1
    count = 0
    
    while true
    
        pos = s∙find sep start true

        if limit and count >= limit or not pos
            reslt∙push s∙sub(start)
            break
                
        reslt∙push s∙sub(start pos-1)
        start = pos + sep.len
        count = count + 1
    
    reslt
    
kstr.lines = s -> kstr.split s "\n"

kstr.find = s c -> 

    if s and c and s.len > 0 and c.len > 0
        ⮐  string.find(s c 1 true) or -1
    -1
    
kstr.has = s c -> kstr.find(s c) > 0
    
kstr.rfind = s c ->

    i = s.len+1-c.len
    while i > 0 and string.sub(s i i+c.len-1) != c
        i -= 1
    i >= 1 and i or -1

kstr.index = i ->

    if i is "number"
        switch i
            1 ➜ ⮐  "1st"
            2 ➜ ⮐  "2nd"
            3 ➜ ⮐  "3rd"
              ➜ ⮐  $i & "th"
    i
    
kstr.count = s c ->

    ⮐  0 if empty s
    cnt = 0
    for i in 1..s.len
        if kstr.find(c s∙sub(i i)) >= 0
            cnt += 1
    cnt
    
kstr.hex = s -> 
    
    if s is "string" ➜ ⮐  tonumber s 16
    if s is "number" ➜ ⮐  string.format "%x" s
        
kstr.scaleColor = s f=0.5 ->
    
    if not s is "string"
        s = kstr.hexColor(s) 
    kstr.hexColor(kstr.hexColor(s)∙map((v) -> clamp(0 255 floor(f*v))))
    
kstr.hexColor = s ->

    if empty(s) ➜ ⮐  s
            
    if s is "string"
    
        validate = a -> 
            for v in a 
                if empty(v)
                    ⮐  
            # log "hexColor STRING " s, a
            a
        # if s = kstr.rgbaToHexColor(s) if s.startsWith 'rgb'
        l = s.len
        if (l == 7 or l == 4) and string.sub(s 1 1) == "#" 
            s = kstr.shift s
            l -= 1
        if l == 6 ➜ ⮐  validate([kstr.hex(string.sub(s 1 2)) kstr.hex(string.sub(s 3 4)) kstr.hex(string.sub(s 5 6))])
        if l == 3 ➜ ⮐  validate([kstr.hex(string.sub(s 1 1))*17 kstr.hex(string.sub(s 2 2))*17 kstr.hex(string.sub(s 3 3))*17])
        ⮐  nil
    
    if s is array
        # write "hexColor ARRAY " s∙slice(1 3) 
        hs = s∙slice(1 3)∙map((v) -> kstr.lpad(2 kstr.hex(v) '0'))
        # write "HS #{hs}"
        hs = hs∙join("")
        h = '#' & hs
        if s.len > 3 and s[4] is "number"
            # log "SCALE"
            h = kstr.scaleColor h s[4]
        ⮐  h
        
    if s is "number"
        
        ⮐  kstr.hexColor kstr.hexColor(kstr.lpad(6 tostring(s, 16) '0'))

    s
    
kstr.detab = s ->

    i = 1
    while i <= s.len
        if string.sub(s i i) == '\t'
            s = string.sub(s 1 i-1) & kstr.lpad(4-((i-1)%4) '' ) & string.sub(s i+1)
        i += 1
    s
    
⮐  kstr