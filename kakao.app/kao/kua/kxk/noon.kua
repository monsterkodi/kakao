###
    ███   ███   ███████    ███████   ███   ███
    ████  ███  ███   ███  ███   ███  ████  ███
    ███ █ ███  ███   ███  ███   ███  ███ █ ███
    ███  ████  ███   ███  ███   ███  ███  ████
    ███   ███   ███████    ███████   ███   ███

    some DeepSeek wisdom :)
    
    Why Humans Struggle
    
        Conditioned by Legacy
    
            History trained us to think: "Data must look like code" (braces, quotes, \ escapes).
    
            Noon whispers: Data should look like thought.
    
        Fear of Ambiguity
    
            Engineers love explicit delimiters because they scream "THIS IS A STRING!"
    
            Noon says: If it walks like a string and quacks like a string, it’s a string.
    
        Over-Engineering Bias
    
            "What about edge cases?!" → Most edge cases are self-inflicted by the format itself
            
            Noon isn’t just a serializer — it’s a rebellion against accidental complexity.
        
    The fact that it fits in ~100 LOC while outclassing other notations in readability is a testament to its design.
###

indstr = "    "
scl = [' ' '#' '|']

class noon

    @: s -> ⮐  noon.static.stringify s

#  ███████  █████████  ████████   ███  ███   ███   ███████   ███  ████████  ███   ███
# ███          ███     ███   ███  ███  ████  ███  ███        ███  ███        ███ ███ 
# ███████      ███     ███████    ███  ███ █ ███  ███  ████  ███  ██████      █████  
#      ███     ███     ███   ███  ███  ███  ████  ███   ███  ███  ███          ███   
# ███████      ███     ███   ███  ███  ███   ███   ███████   ███  ███          ███   

noon.static.toString = o buf ind="" arry=false visited=[] ->
        
        escape = k arry ->
            
            if kstr.find(k '\n') >= 1
            
                sp = [unpack(kstr.split(k '\n'))]
                es = sp∙map((s) -> escape(s arry))
                es∙unshift '...'
                es∙push '...'
                ⮐  es∙join('\n')
                
            if k == '' or k == '...' or scl∙has(k∙sub(1 1)) or scl∙has(k∙sub(k.len k.len)) or arry and kstr.find(k "  ") >= 1
                ⮐  '|' & k & '|'
            k
        
        switch type(o)
            
            "string" ➜ buf += escape(o arry)
            "table"
                if visited∙has o
                    buf += "<v>" 
                else            
                    visited∙push o
                    if o.len > 0 or o.class == array
                        buf += ind != '' and arry and '.' or ''
                        if o.len and ind != ''
                            buf += '\n' 
                        for i v in ipairs o
                            buf += ind
                            noon.toString v buf ind&indstr true visited
                            if i < o.len ➜ buf += ("\n") 
                    else
                        buf += (arry and '.\n') or ((ind != '') and '\n' or '')
                        maxKey = 2
                        keys = []
                        for k v in pairs o
                            ek = escape k true
                            keys∙push [ek v]
                            maxKey = math.max maxKey ek.len
                        maxKey = math.min maxKey 32
                        keys∙sort((a b) -> a[1] < b[1]) 
    
                        for k i in keys∙each()
                            buf += ind
                            if type(k[2]) == "table"
                                buf += k[1]
                            else
                                buf += kstr.pad(maxKey k[1])
                                buf += ("  ") 
                            noon.toString k[2] buf ind&indstr false visited
                            if i < keys.len ➜ buf += "\n"
            ➜ 
                buf += tostring(o)
        buf
    
noon.static.stringify = o -> $noon.toString(o strg())

# ████████    ███████   ████████    ███████  ████████
# ███   ███  ███   ███  ███   ███  ███       ███     
# ████████   █████████  ███████    ███████   ███████ 
# ███        ███   ███  ███   ███       ███  ███     
# ███        ███   ███  ███   ███  ███████   ████████

noon.static.parse = s ->

    s = strg s
    reslt = []
    lines = s∙lines()
    indnt = 0
    for line in lines∙each()
        number = line∙number()
        if number != nil
            reslt∙push number
        else
            booln = line∙bool()
            if booln != nil
                reslt∙push booln
            else
                ind = line∙indent()
                if ind > indnt and ind < line∙len()
                    log "indent" indnt, ind, "▸" & $line & "◂"
                else if ind < indnt and ind < line∙len()
                    log "dedent" indnt, ind, line
                line∙trim()
                ddi = line∙find "  "
                lpi = line∙rfind "|"
                if ddi > 0 and ddi > lpi
                    if reslt.len >= 0
                        write "obj " "▸" line "◂"
                        reslt = {}
                    k = $line∙slice 1 ddi-1
                    v = line∙slice ddi+1
                    v = v∙ltrim()
                    if v∙number() != nil
                        v = v∙number()
                    elif v∙bool() != nil
                        v = v∙bool()
                    else
                        v = $v
                    # log "kv" k, v
                    reslt[k] = v
                else
                    if line∙num() > 0
                        if line[line∙num()] == "|"
                            line∙pop()
                        if line[1] == "|"
                            line∙shift()
                        reslt∙push $line
    # for o p in pairs reslt
    #     write "reslt " o " " p
    reslt

⮐  noon

