###
     ███████   ███████   ███       ███████   ████████   
    ███       ███   ███  ███      ███   ███  ███   ███  
    ███       ███   ███  ███      ███   ███  ███████    
    ███       ███   ███  ███      ███   ███  ███   ███  
     ███████   ███████   ███████   ███████   ███   ███  
###

use ../../kxk    ▪ kstr randRange
use ../edit/tool ◆ belt

class color

    @readabilityCache: {}

    @ansi256: [
        '#000000' '#800000' '#008000' '#808000'
        '#000080' '#800080' '#008080' '#c0c0c0'
        '#808080' '#ff0000' '#00ff00' '#ffff00'
        '#0000ff' '#ff00ff' '#00ffff' '#ffffff'
        '#000000' '#00005f' '#000087' '#0000af' '#0000d7' '#0000ff'
        '#005f00' '#005f5f' '#005f87' '#005faf' '#005fd7' '#005fff'
        '#008700' '#00875f' '#008787' '#0087af' '#0087d7' '#0087ff'
        '#00af00' '#00af5f' '#00af87' '#00afaf' '#00afd7' '#00afff'
        '#00d700' '#00d75f' '#00d787' '#00d7af' '#00d7d7' '#00d7ff'
        '#00ff00' '#00ff5f' '#00ff87' '#00ffaf' '#00ffd7' '#00ffff'
        '#5f0000' '#5f005f' '#5f0087' '#5f00af' '#5f00d7' '#5f00ff'
        '#5f5f00' '#5f5f5f' '#5f5f87' '#5f5faf' '#5f5fd7' '#5f5fff'
        '#5f8700' '#5f875f' '#5f8787' '#5f87af' '#5f87d7' '#5f87ff'
        '#5faf00' '#5faf5f' '#5faf87' '#5fafaf' '#5fafd7' '#5fafff'
        '#5fd700' '#5fd75f' '#5fd787' '#5fd7af' '#5fd7d7' '#5fd7ff'
        '#5fff00' '#5fff5f' '#5fff87' '#5fffaf' '#5fffd7' '#5fffff'
        '#870000' '#87005f' '#870087' '#8700af' '#8700d7' '#8700ff'
        '#875f00' '#875f5f' '#875f87' '#875faf' '#875fd7' '#875fff'
        '#878700' '#87875f' '#878787' '#8787af' '#8787d7' '#8787ff'
        '#87af00' '#87af5f' '#87af87' '#87afaf' '#87afd7' '#87afff'
        '#87d700' '#87d75f' '#87d787' '#87d7af' '#87d7d7' '#87d7ff'
        '#87ff00' '#87ff5f' '#87ff87' '#87ffaf' '#87ffd7' '#87ffff'
        '#af0000' '#af005f' '#af0087' '#af00af' '#af00d7' '#af00ff'
        '#af5f00' '#af5f5f' '#af5f87' '#af5faf' '#af5fd7' '#af5fff'
        '#af8700' '#af875f' '#af8787' '#af87af' '#af87d7' '#af87ff'
        '#afaf00' '#afaf5f' '#afaf87' '#afafaf' '#afafd7' '#afafff'
        '#afd700' '#afd75f' '#afd787' '#afd7af' '#afd7d7' '#afd7ff'
        '#afff00' '#afff5f' '#afff87' '#afffaf' '#afffd7' '#afffff'
        '#d70000' '#d7005f' '#d70087' '#d700af' '#d700d7' '#d700ff'
        '#d75f00' '#d75f5f' '#d75f87' '#d75faf' '#d75fd7' '#d75fff'
        '#d78700' '#d7875f' '#d78787' '#d787af' '#d787d7' '#d787ff'
        '#d7af00' '#d7af5f' '#d7af87' '#d7afaf' '#d7afd7' '#d7afff'
        '#d7d700' '#d7d75f' '#d7d787' '#d7d7af' '#d7d7d7' '#d7d7ff'
        '#d7ff00' '#d7ff5f' '#d7ff87' '#d7ffaf' '#d7ffd7' '#d7ffff'
        '#ff0000' '#ff005f' '#ff0087' '#ff00af' '#ff00d7' '#ff00ff'
        '#ff5f00' '#ff5f5f' '#ff5f87' '#ff5faf' '#ff5fd7' '#ff5fff'
        '#ff8700' '#ff875f' '#ff8787' '#ff87af' '#ff87d7' '#ff87ff'
        '#ffaf00' '#ffaf5f' '#ffaf87' '#ffafaf' '#ffafd7' '#ffafff'
        '#ffd700' '#ffd75f' '#ffd787' '#ffd7af' '#ffd7d7' '#ffd7ff'
        '#ffff00' '#ffff5f' '#ffff87' '#ffffaf' '#ffffd7' '#ffffff'
        '#080808' '#121212' '#1c1c1c' '#262626' '#303030' '#3a3a3a'
        '#444444' '#4e4e4e' '#585858' '#606060' '#666666' '#767676'
        '#808080' '#8a8a8a' '#949494' '#9e9e9e' '#a8a8a8' '#b2b2b2'
        '#bcbcbc' '#c6c6c6' '#d0d0d0' '#dadada' '#e4e4e4' '#eeeeee'
        ]
    
    @hex:    c -> c is arr ? kstr.hexColor(c) : c
    @values: c -> c is str ? kstr.hexColor(c) : c
    
    # ███████     ███████   ████████   ███   ███  ████████  ███   ███
    # ███   ███  ███   ███  ███   ███  ███  ███   ███       ████  ███
    # ███   ███  █████████  ███████    ███████    ███████   ███ █ ███
    # ███   ███  ███   ███  ███   ███  ███  ███   ███       ███  ████
    # ███████    ███   ███  ███   ███  ███   ███  ████████  ███   ███

    @darken: c f=0.5 -> 
    
        ⮐  [0 0 0] if empty c
        c.map((v) -> clamp(0 255 int(f*v)))
        
    # ███████    ████████   ███   ███████   ███   ███  █████████  ████████  ███   ███
    # ███   ███  ███   ███  ███  ███        ███   ███     ███     ███       ████  ███
    # ███████    ███████    ███  ███  ████  █████████     ███     ███████   ███ █ ███
    # ███   ███  ███   ███  ███  ███   ███  ███   ███     ███     ███       ███  ████
    # ███████    ███   ███  ███   ███████   ███   ███     ███     ████████  ███   ███

    @brighten: c f=0.5 ->
    
        ⮐  [255 255 255] if empty c
        c.map((v) -> clamp(0 255 int((1+f)*v)))
        
    # ███   ███  ███  ███████    ████████    ███████   ███   ███  █████████
    # ███   ███  ███  ███   ███  ███   ███  ███   ███  ████  ███     ███   
    #  ███ ███   ███  ███████    ███████    █████████  ███ █ ███     ███   
    #    ███     ███  ███   ███  ███   ███  ███   ███  ███  ████     ███   
    #     █      ███  ███████    ███   ███  ███   ███  ███   ███     ███   

    @vibrant: c f=0.5 ->
        
        ⮐  [128 128 128] if empty c
        w = (c[0] + c[1] + c[2]) / 3
        w *= 2 if c[0] * c[1] * c[2] == 0
        [
            min(255 parseInt(c[0]*f+w*(1-f)))
            min(255 parseInt(c[1]*f+w*(1-f)))
            min(255 parseInt(c[2]*f+w*(1-f)))
        ]
        
    @saturate: c s=1.0 l=1.0->
    
        hsl = @rgbToHsl c
        hsl[1] *= s
        hsl[2] *= l
        @hslToRgb hsl
        
    # ███   ███   ███████  ███    
    # ███   ███  ███       ███    
    # █████████  ███████   ███    
    # ███   ███       ███  ███    
    # ███   ███  ███████   ███████

    @rgbToHsl: c ->
    
        [r g b] = c
        
        r /= 255
        g /= 255
        b /= 255
    
        vmax = Math.max(r g b)
        vmin = Math.min(r g b)
        delta = vmax - vmin
    
        h = 0
        s = 0
        l = (vmax + vmin) / 2
    
        if delta != 0
        
            s = if l > 0.5 then delta / (2 - vmax - vmin) else delta / (vmax + vmin)
    
            switch vmax
                r ➜ h = (g - b) / delta + (if g < b then 6 else 0)
                g ➜ h = (b - r) / delta + 2
                b ➜ h = (r - g) / delta + 4
    
            h /= 6
    
        [h*360 s*100 l*100]
        
    @hslToRgb: c ->
    
        [h s l] = c
    
        h /= 360
        s /= 100
        l /= 100
    
        r = 0
        g = 0
        b = 0
    
        if s == 0
            r = g = b = l
        else
            hue2rgb = p q t ->
                if t < 0   ➜  t += 1
                if t > 1   ➜  t -= 1
                if t < 1/6 ➜ ⮐  p + (q - p) * 6 * t
                if t < 1/2 ➜ ⮐  q
                if t < 2/3 ➜ ⮐  p + (q - p) * (2/3 - t) * 6
                p
    
            q = if l < 0.5 ➜ l * (1 + s) else l + s - l * s
            p = 2 * l - q
    
            r = hue2rgb p q h + 1/3
            g = hue2rgb p q h
            b = hue2rgb p q h - 1/3
    
        [Math.round(r * 255) Math.round(g * 255) Math.round(b * 255)]
        
    #  ███████   ███   ███   ███████  ███        ████████    ███████   ███████  
    # ███   ███  ████  ███  ███       ███        ███   ███  ███        ███   ███
    # █████████  ███ █ ███  ███████   ███        ███████    ███  ████  ███████  
    # ███   ███  ███  ████       ███  ███        ███   ███  ███   ███  ███   ███
    # ███   ███  ███   ███  ███████   ███        ███   ███   ███████   ███████  

    @bg_rgb: c -> # background
    
        ⮐  '\x1b[49m' if empty c
        "\x1b[48;2;#{c[0]};#{c[1]};#{c[2]}m" 

    @fg_rgb: c -> # foreground (text) 
        
        ⮐  '\x1b[39m' if empty c
        "\x1b[38;2;#{c[0]};#{c[1]};#{c[2]}m" 

    @ul_rgb: c -> # underline color
        
        ⮐  '\x1b[59m' if empty c
        "\x1b[58;2;#{c[0]};#{c[1]};#{c[2]}m" 
        
    # ████████    ███████   ███   ███  ███████     ███████   ██     ██
    # ███   ███  ███   ███  ████  ███  ███   ███  ███   ███  ███   ███
    # ███████    █████████  ███ █ ███  ███   ███  ███   ███  █████████
    # ███   ███  ███   ███  ███  ████  ███   ███  ███   ███  ███ █ ███
    # ███   ███  ███   ███  ███   ███  ███████     ███████   ███   ███

    @randomBackgroundColors: lines bg fg ->
        
        resl = []
        for line in lines
            rl = ''
            rl += color.fg_rgb fg
            for char,idx in line
                clr = ''
                if char == ' '
                    clr = '\x1b[49m' if idx and line[idx-1] != ' '
                else
                    clr = color.bg_rgb @darken(bg 0.75+Math.random()*0.25)
                rl +=  clr + char 
            resl.push rl + '\x1b[49m'
        resl
                
    #  ███████  ████████  ███      ███          ███      ███  ███   ███  ████████   ███████  
    # ███       ███       ███      ███          ███      ███  ████  ███  ███       ███       
    # ███       ███████   ███      ███          ███      ███  ███ █ ███  ███████   ███████   
    # ███       ███       ███      ███          ███      ███  ███  ████  ███            ███  
    #  ███████  ████████  ███████  ███████      ███████  ███  ███   ███  ████████  ███████   

    @linesForCells: cells ->
        
        lines = []
        for row in cells
            line = ''
            for cell,idx in row
                line += color.bg_rgb cell.bg
                line += color.fg_rgb cell.fg
                line += cell.char
            lines.push line + '\x1b[49m'
        lines
        
    #  0000000   000       0000000   000   000  
    # 000        000      000   000  000 0 000  
    # 000  0000  000      000   000  000000000  
    # 000   000  000      000   000  000   000  
    #  0000000   0000000   0000000   00     00  
    
    @glowEffect: cells strength=0.5 ->
        
        for row,y in cells
            for cell,x in row
                nbcs = belt.cellNeighborsAtPos cells x y 6 3
                continue if empty nbcs
                
                sum = [0 0 0]
                for nbc in nbcs
                    dx = nbc.pos[0]-x
                    dy = nbc.pos[1]-y
                    df = 1 - max(0 Math.sqrt(dx*dx + dy*dy) / 6)
                    for vi in 0..2
                        sum[vi] += nbc.cell.fg[vi]*df
                    
                scl = strength * 0.014
                scl = scl * randRange(0.98 1.02)
                sum = sum.map (v) -> clamp 0 255 int(scl * v)
                cell.bg = sum
        cells
        
    # ███   ███   ███████   ████████   ███   ███████   █████████  ████████
    # ███   ███  ███   ███  ███   ███  ███  ███   ███     ███     ███     
    #  ███ ███   █████████  ███████    ███  █████████     ███     ███████ 
    #    ███     ███   ███  ███   ███  ███  ███   ███     ███     ███     
    #     █      ███   ███  ███   ███  ███  ███   ███     ███     ████████

    @variateCellsColor: cells type amount ->
        
        for cell in cells
            clr = cell.cell[type]
            f = 1 + randRange(-amount/2 amount/2)
            clr = clr.map (v) -> int clamp(0 255 v * f)
            cell.cell[type] = clr

    # 0000000    000  00     00  
    # 000   000  000  000   000  
    # 000   000  000  000000000  
    # 000   000  000  000 0 000  
    # 0000000    000  000   000  
    
    @dimCellsColor: cells type amount ->
        
        for cell in cells
            clr = cell.cell[type]
            clr = clr.map (v) -> int clamp(0 255 v * amount)
            cell.cell[type] = clr
            
    # ███      ███   ███  ██     ██  ███  ███   ███   ███████   ███   ███   ███████  ████████
    # ███      ███   ███  ███   ███  ███  ████  ███  ███   ███  ████  ███  ███       ███     
    # ███      ███   ███  █████████  ███  ███ █ ███  █████████  ███ █ ███  ███       ███████ 
    # ███      ███   ███  ███ █ ███  ███  ███  ████  ███   ███  ███  ████  ███       ███     
    # ███████   ███████   ███   ███  ███  ███   ███  ███   ███  ███   ███   ███████  ████████

    @luminance: c ->
        
        [r g b] = c
    
        r = r / 255
        g = g / 255
        b = b / 255
    
        r = if r <= 0.03928 then r / 12.92 else ((r + 0.055) / 1.055) ** 2.4
        g = if g <= 0.03928 then g / 12.92 else ((g + 0.055) / 1.055) ** 2.4
        b = if b <= 0.03928 then b / 12.92 else ((b + 0.055) / 1.055) ** 2.4
    
        0.2126 * r + 0.7152 * g + 0.0722 * b
            
    #  ███████   ███████   ███   ███  █████████  ████████    ███████    ███████  █████████
    # ███       ███   ███  ████  ███     ███     ███   ███  ███   ███  ███          ███   
    # ███       ███   ███  ███ █ ███     ███     ███████    █████████  ███████      ███   
    # ███       ███   ███  ███  ████     ███     ███   ███  ███   ███       ███     ███   
    #  ███████   ███████   ███   ███     ███     ███   ███  ███   ███  ███████      ███   

    @adjustForBackground: fg bg ->
    
        color.readabilityCache[bg] ?= {}
        
        if clr = color.readabilityCache[bg][fg]
            ⮐  clr
    
        color.readabilityCache[bg][fg] = @ensureReadability fg bg
                
    # 00000000   00000000   0000000   0000000     0000000   0000000    000  000      000  000000000  000   000  
    # 000   000  000       000   000  000   000  000   000  000   000  000  000      000     000      000 000   
    # 0000000    0000000   000000000  000   000  000000000  0000000    000  000      000     000       00000    
    # 000   000  000       000   000  000   000  000   000  000   000  000  000      000     000        000     
    # 000   000  00000000  000   000  0000000    000   000  0000000    000  0000000  000     000        000     
    
    @ensureReadability: fg bg ->
    
        ⮐  fg if empty fg or not fg[0] is num
        ⮐  fg if empty bg or not bg[0] is num
    
        fgo = copy fg # todo: remove this when fail case never happens
    
        contrastRatio = l1 l2 -> (max(l1 l2) + 0.05) / (min(l1 l2) + 0.05)
    
        fgLuminance = @luminance fg
        bgLuminance = @luminance bg
    
        contrast = contrastRatio fgLuminance bgLuminance
    
        targetContrast = 4.5 # WCAG AA standard
    
        [h s l] = @rgbToHsl fg

        step = bgLuminance > 0.5 ? -5 : 5

        cnt = 0          # todo: remove this when fail case never happens
        while cnt < 50   # todo: replace with while true when fail case never happens
            cnt++        # todo: remove this when fail case never happens
            fg = @hslToRgb [h s l]
            fgLuminance = @luminance fg
    
            contrast = contrastRatio fgLuminance bgLuminance
    
            ⮐  fg if contrast >= targetContrast
    
            l += step
                
            if l < 0 or l > 100
                step = -step
                
        log "fail #{fgo} #{bg}" # todo: remove this when fail case never happens
        fgo                     # todo: remove this when fail case never happens
    
for key,val of color.ansi256 # convert colors to rgb triplets
    color.ansi256[key] = color.values val
            
export color
